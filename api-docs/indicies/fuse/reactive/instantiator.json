{
  "root": {
    "id": {
      "id": "fuse/reactive/instantiator",
      "parentId": "fuse/reactive",
      "type": "Class",
      "modifiers": [
        "public",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/instantiator",
      "href": "fuse/reactive/instantiator"
    },
    "titles": {
      "indexTitle": "Instantiator",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Iterates over the axis steps/data.",
        "full": "Iterates over the axis steps/data.\n\nThis example places rotated labels at each tick. Though note this simple layout can be achieved easier just using `PlotAxis` instead.\n\n    <c:PlotAxisData Axis=\"X\">\n        <Text X=\"{Plot axis.position} * 100%\" Y=\"0\" FontSize=\"18\" Color=\"#000\"\n            Value=\"{Plot axis.label}\" Anchor=\"105%,45%\" TransformOrigin=\"Anchor\" ux:Name=\"t\">\n            <Rotation Degrees=\"-60\"/>\n        </Text>\n    </c:PlotAxisData>"
      },
      "id": {
        "id": "fuse/charting/plotaxisdata",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotaxisdata",
        "href": "fuse/charting/plotaxisdata"
      },
      "titles": {
        "indexTitle": "PlotAxisData",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotAxisData"
      }
    },
    {
      "comment": {
        "brief": "Iterator for visual plot data.",
        "full": "Iterator for visual plot data.\n\nThis works like an @Each for the visible data points. Use a @PlotBar or  @PlotCurvePoint to add elements matching this data. Or use a `{Plot data.*}` to get at the variables for the data point.\n\n    <Panel>\n        <c:PlotData>\n            <c:PlotBar/>\n        </c:PlotData>\n    </Panel>\n\n    <Curve>\n        <c:PlotData>\n            <c:PlotCurvePoint/>\n        </c:PlotData>\n    </Curve>",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotdata",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotdata",
        "href": "fuse/charting/plotdata"
      },
      "titles": {
        "indexTitle": "PlotData",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotData"
      }
    },
    {
      "comment": {
        "brief": "Displays a collection of objects using the given template(s) for each item.",
        "full": "Displays a collection of objects using the given template(s) for each item.\n\nThe children of an `Each` tag represent a template that will be \"projected\" for each item in the collection\nspecified by the `Items` property. The projected item then becomes the data context for that instance, so\ndata-binding can be specified relative to the item itself rather than having to index the collection explicitly.\n\nNote that each subtree projected by `Each` lives in its own scope.\nThis means that the children of an `Each` cannot be accessed from outside it.\nYou can, however, access nodes declared outside the `Each` from the inside.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            items: [\n                { name: \"Jake\", age: 24 },\n                { name: \"Julie\", age: 25 },\n                { name: \"Jerard\", age: 26 }\n            ]\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <StackPanel>\n                <Text Value=\"{name}\" />\n                <Text Value=\"{age}\" />\n            </StackPanel>\n        </Each>\n    </StackPanel>\n\n# Using `Each` with `ux:Template`\n\nIf you are using `Each` in a custom made component, you can increase the cusomizability of that component by allowing it to take in custom template objects which it can use instead of the default template the `Each` is using. To do this, you need to do two things:\n\n * Give the `TemplateSource` property an element that can recieve templates (in the case of custom made components, that would be your custom component's class)\n * Specify the template name `Each` will be looking for, using the property `TemplateKey`\n\nIf a template isn't specified, the child element of `Each` will be used as a de-facto template.\n\n## Example\nThe following example demonstrates passing custom templates into a class for an `Each` to use:\n\n    <StackPanel ux:Class=\"CoolRepeater\" Background=\"#FAD\">\n        <Each TemplateSource=\"this\" TemplateKey=\"Item\" Count=\"20\">\n            <Text>No template is given</Text>\n        </Each>\n    </StackPanel>\n    <CoolRepeater>\n        <Text ux:Template=\"Item\">Hello, world!</Text>\n    </CoolRepeater>\n\nNotice that if you remove the \"Hello, world!\" text that is our custom template, the `Each` will fall back to using the child as the template.\n\nIf you want the ability to control the template on a per-item basis, the similar `MatchKey`-property can be used:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        module.exports.posts = Observable(\n            {postType: \"text\", body: \"Lorem ipsum\", title: \"Hello, world\"},\n            {postType: \"quote\", quote: \"Stuff\", title: \"A quote\"}\n        );\n    </JavaScript>\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{posts}\" MatchKey=\"postType\">\n                <StackPanel ux:Template=\"text\" Height=\"100\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" />\n                    <Text FontSize=\"15\" Value=\"{body}\" TextWrapping=\"Wrap\" />\n                </StackPanel>\n                <DockPanel ux:Template=\"quote\" Height=\"200\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" Dock=\"Top\" />\n                    <Text FontSize=\"50\" Value=\"”\" Dock=\"Left\" />\n                    <Text FontSize=\"15\" Margin=\"10\" Value=\"{quote}\" />\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\n`MatchKey` works by looking for a property in the data context of each item from `Items`.\nThe value of this property is then used to determine the template to use for the current item.\nIn the above example, we store the template we want to use in the property `postType`, which will appear in the data context of each item being iterated."
      },
      "id": {
        "id": "fuse/reactive/each",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/each",
        "href": "fuse/reactive/each"
      },
      "titles": {
        "indexTitle": "Each",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
      }
    },
    {
      "comment": {
        "brief": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.",
        "full": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.\n\nYou may optionally assign an `Item` to the instance, making this function similar to `Each` with a single item."
      },
      "id": {
        "id": "fuse/reactive/instance",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instance",
        "href": "fuse/reactive/instance"
      },
      "titles": {
        "indexTitle": "Instance",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Instance"
      }
    }
  ]
}