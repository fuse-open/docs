{
  "root": {
    "id": {
      "id": "fuse/reactive/expression",
      "parentId": "fuse/reactive",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/expression",
      "href": "fuse/reactive/expression"
    },
    "titles": {
      "indexTitle": "Expression",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.Expression"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/darkenfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/darkenfunction",
        "href": "alive/darkenfunction"
      },
      "titles": {
        "indexTitle": "DarkenFunction",
        "fullyQualifiedIndexTitle": "Alive.DarkenFunction"
      }
    },
    {
      "id": {
        "id": "alive/lightenfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/lightenfunction",
        "href": "alive/lightenfunction"
      },
      "titles": {
        "indexTitle": "LightenFunction",
        "fullyQualifiedIndexTitle": "Alive.LightenFunction"
      }
    },
    {
      "id": {
        "id": "alive/mixfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/mixfunction",
        "href": "alive/mixfunction"
      },
      "titles": {
        "indexTitle": "MixFunction",
        "fullyQualifiedIndexTitle": "Alive.MixFunction"
      }
    },
    {
      "id": {
        "id": "alive/transparentizefunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/transparentizefunction",
        "href": "alive/transparentizefunction"
      },
      "titles": {
        "indexTitle": "TransparentizeFunction",
        "fullyQualifiedIndexTitle": "Alive.TransparentizeFunction"
      }
    },
    {
      "id": {
        "id": "alive/withopacityfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/withopacityfunction",
        "href": "alive/withopacityfunction"
      },
      "titles": {
        "indexTitle": "WithOpacityFunction",
        "fullyQualifiedIndexTitle": "Alive.WithOpacityFunction"
      }
    },
    {
      "comment": {
        "brief": "Animates the change in a value.",
        "full": "Animates the change in a value.\n\nThe syntax is `attract( value, config )`\n\nThis requires an @AttractorConfig that defines the style of the animation.\n\n# Example\n\n    <AttractorConfig Unit=\"Points\" Easing=\"SinusoidalInOut\" Duration=\"0.3\" ux:Global=\"asPoints\"/>\n\n    <Panel>\n        <Translation X=\"attract({xOffset}, asPoints)\"/>\n    </Panel>\n\nWhere `xOffset` is a context variable."
      },
      "id": {
        "id": "fuse/animations/attract",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/attract",
        "href": "fuse/animations/attract"
      },
      "titles": {
        "indexTitle": "Attract",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Attract"
      }
    },
    {
      "comment": {
        "brief": "Used to access information about the plot.",
        "full": "Used to access information about the plot.\n\nThe prefix `data.` is used within a @PlotData to access the values of the individual points on the plot.\n\nThe prefix `axis.` is used within a @PlotAxis to access the values of axis.\n\nUnprefixed values access values in the @Plot",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotexpression",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotexpression",
        "href": "fuse/charting/plotexpression"
      },
      "titles": {
        "indexTitle": "PlotExpression",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotExpression"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive object-member look-up operation.",
        "full": "Represents a reactive object-member look-up operation."
      },
      "id": {
        "id": "fuse/controls/pathexpression",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathexpression",
        "href": "fuse/controls/pathexpression"
      },
      "titles": {
        "indexTitle": "PathExpression",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathExpression"
      }
    },
    {
      "comment": {
        "brief": "The point at a normalized distance (0..1) along a path.",
        "full": "The point at a normalized distance (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathpointatdistance",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathpointatdistance",
        "href": "fuse/controls/pathpointatdistance"
      },
      "titles": {
        "indexTitle": "PathPointAtDistance",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtDistance"
      }
    },
    {
      "comment": {
        "brief": "The point at a normalized time (0..1) along a path.",
        "full": "The point at a normalized time (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathpointattime",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathpointattime",
        "href": "fuse/controls/pathpointattime"
      },
      "titles": {
        "indexTitle": "PathPointAtTime",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtTime"
      }
    },
    {
      "comment": {
        "brief": "The tangent angle at a normalized distance (0..1) along a path.",
        "full": "The tangent angle at a normalized distance (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathtangentangleatdistance",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathtangentangleatdistance",
        "href": "fuse/controls/pathtangentangleatdistance"
      },
      "titles": {
        "indexTitle": "PathTangentAngleAtDistance",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtDistance"
      }
    },
    {
      "comment": {
        "brief": "The tangent angle (radians) at a normalized time (0..1) along a path.",
        "full": "The tangent angle (radians) at a normalized time (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathtangentangleattime",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathtangentangleattime",
        "href": "fuse/controls/pathtangentangleattime"
      },
      "titles": {
        "indexTitle": "PathTangentAngleAtTime",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtTime"
      }
    },
    {
      "comment": {
        "brief": "Returns the height of an @Element: `ActualSize.Y`",
        "full": "Returns the height of an @Element: `ActualSize.Y`"
      },
      "id": {
        "id": "fuse/elements/heightfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/heightfunction",
        "href": "fuse/elements/heightfunction"
      },
      "titles": {
        "indexTitle": "HeightFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.HeightFunction"
      }
    },
    {
      "comment": {
        "brief": "These functions provide a layout property of an @Element.",
        "full": "These functions provide a layout property of an @Element.\n\nThe returned values are the actual values, resulting after layout has been performed. If the element does not yet have a layout, or the layout has been lost, the values here will also be lost.\n\n[subclass Fuse.Elements.LayoutFunction]\n[subclass Fuse.Elements.XYBaseLayoutFunction]"
      },
      "id": {
        "id": "fuse/elements/layoutfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/layoutfunction",
        "href": "fuse/elements/layoutfunction"
      },
      "titles": {
        "indexTitle": "LayoutFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.LayoutFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns the width of an @Element: `ActualSize.X`",
        "full": "Returns the width of an @Element: `ActualSize.X`"
      },
      "id": {
        "id": "fuse/elements/widthfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/widthfunction",
        "href": "fuse/elements/widthfunction"
      },
      "titles": {
        "indexTitle": "WidthFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.WidthFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns one of:",
        "full": "Returns one of:\n\n- The `ActualPosition.X` of an @Element. Refer to @LayoutFunction\n- The `X` value of a `float`, `float2`, `float3`, or `float4`"
      },
      "id": {
        "id": "fuse/elements/xfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/xfunction",
        "href": "fuse/elements/xfunction"
      },
      "titles": {
        "indexTitle": "XFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.XFunction"
      }
    },
    {
      "comment": {
        "brief": "These are overloaded functions that either provide a layout property or a vector component.",
        "full": "These are overloaded functions that either provide a layout property or a vector component.\n\n[subclass Fuse.Elements.XYBaseLayoutFunction]"
      },
      "id": {
        "id": "fuse/elements/xybaselayoutfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/xybaselayoutfunction",
        "href": "fuse/elements/xybaselayoutfunction"
      },
      "titles": {
        "indexTitle": "XYBaseLayoutFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.XYBaseLayoutFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns one of:",
        "full": "Returns one of:\n\n- The `ActualPosition.Y` of an @Element. Refer to @LayoutFunction\n- The `Y` value of a `float2`, `float3`, or `float4`"
      },
      "id": {
        "id": "fuse/elements/yfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/yfunction",
        "href": "fuse/elements/yfunction"
      },
      "titles": {
        "indexTitle": "YFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.YFunction"
      }
    },
    {
      "id": {
        "id": "fuse/motion/delayfunction",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/delayfunction",
        "href": "fuse/motion/delayfunction"
      },
      "titles": {
        "indexTitle": "DelayFunction",
        "fullyQualifiedIndexTitle": "Fuse.Motion.DelayFunction"
      }
    },
    {
      "id": {
        "id": "fuse/motion/springfunction",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/springfunction",
        "href": "fuse/motion/springfunction"
      },
      "titles": {
        "indexTitle": "SpringFunction",
        "fullyQualifiedIndexTitle": "Fuse.Motion.SpringFunction"
      }
    },
    {
      "comment": {
        "brief": "Finds a router from the current location.",
        "full": "Finds a router from the current location.\n\nThis can be used to get access to a router in JavaScript. This assume that a @Router has been\ndeclared somewhere higher in the UX tree (it need not be in the same file).\n\n    <Page>\n        <JavaScript dep:router=\"findRouter()\">\n            exports.go = function() {\n                router.goto( \"anotherPageName\" )\n            }\n        </JavaScript>\n\n        <Button Alignment=\"Center\" Clicked=\"{go}\"/>\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/findrouter",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/findrouter",
        "href": "fuse/navigation/findrouter"
      },
      "titles": {
        "indexTitle": "FindRouter",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.FindRouter"
      }
    },
    {
      "comment": {
        "brief": "Goto a full path in the router.",
        "full": "Goto a full path in the router.\n\nThe arguments are name-value pairs that specify the path components and their parameter."
      },
      "id": {
        "id": "fuse/navigation/gotoroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/gotoroutecommand",
        "href": "fuse/navigation/gotoroutecommand"
      },
      "titles": {
        "indexTitle": "GotoRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GotoRouteCommand"
      }
    },
    {
      "comment": {
        "brief": "Navigates on the router.",
        "full": "Navigates on the router.\n\nThe arguments must be name-value pairs.  It shares the same arguments as the JAvaScript `router.modify` function and the `RouterModify` action. In short the options are:\n\n    - how : @ModifyRouteHow\n    - path : An array of name-value pairs that specify the path components and their parameter. This syntax differs from the JavaScript interface.\n    - relative : Routing relative to the provided node. By default the path will be treated as global.\n    - transition : @NavigationGotoMode\n    - bookmark : Use a bookmark instead of `path`.\n    - style : Transition style for animation\n\nThe expression provided to `modifyRoute` is evaluated only when needed. It is expected the bindings will resolve quickly (not bound to a remote lookup for example), otherwise the routing operation will be delayed."
      },
      "id": {
        "id": "fuse/navigation/modifyroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/modifyroutecommand",
        "href": "fuse/navigation/modifyroutecommand"
      },
      "titles": {
        "indexTitle": "ModifyRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ModifyRouteCommand"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/pageexpression",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pageexpression",
        "href": "fuse/navigation/pageexpression"
      },
      "titles": {
        "indexTitle": "PageExpression",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PageExpression"
      }
    },
    {
      "comment": {
        "brief": "Push a full path on the router.",
        "full": "Push a full path on the router."
      },
      "id": {
        "id": "fuse/navigation/pushroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pushroutecommand",
        "href": "fuse/navigation/pushroutecommand"
      },
      "titles": {
        "indexTitle": "PushRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PushRouteCommand"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/routemodificationcommand",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/routemodificationcommand",
        "href": "fuse/navigation/routemodificationcommand"
      },
      "titles": {
        "indexTitle": "RouteModificationCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.RouteModificationCommand"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/abs",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/abs",
        "href": "fuse/reactive/abs"
      },
      "titles": {
        "indexTitle": "Abs",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Abs"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric cosine of the input",
        "full": "The invserse trigonometric cosine of the input"
      },
      "id": {
        "id": "fuse/reactive/acos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/acos",
        "href": "fuse/reactive/acos"
      },
      "titles": {
        "indexTitle": "Acos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Acos"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/add",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/add",
        "href": "fuse/reactive/add"
      },
      "titles": {
        "indexTitle": "Add",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Add"
      }
    },
    {
      "comment": {
        "brief": "Alternate between true/false values for ranges of integers.",
        "full": "Alternate between true/false values for ranges of integers.\n\n    alternate( value, groupSize )\n\nInput values are rounded to the nearest integer.\n\nExample:\n\n    alternate( value, 3 )\n\nThis will yield true for values 0,1,2, false for 3,4,5, true for 6,7,8, false for 9,10,11, etc."
      },
      "id": {
        "id": "fuse/reactive/alternate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/alternate",
        "href": "fuse/reactive/alternate"
      },
      "titles": {
        "indexTitle": "Alternate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Alternate"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric sine of the input",
        "full": "The invserse trigonometric sine of the input"
      },
      "id": {
        "id": "fuse/reactive/asin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/asin",
        "href": "fuse/reactive/asin"
      },
      "titles": {
        "indexTitle": "Asin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Asin"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input",
        "full": "The invserse trigonometric tangent of the input"
      },
      "id": {
        "id": "fuse/reactive/atan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan",
        "href": "fuse/reactive/atan"
      },
      "titles": {
        "indexTitle": "Atan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input components",
        "full": "The invserse trigonometric tangent of the input components\n\n    atan2(y, x)"
      },
      "id": {
        "id": "fuse/reactive/atan2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan2",
        "href": "fuse/reactive/atan2"
      },
      "titles": {
        "indexTitle": "Atan2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan2"
      }
    },
    {
      "comment": {
        "brief": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.",
        "full": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.\n\n    atanVector( v ) == atan2( v.Y, v.X )"
      },
      "id": {
        "id": "fuse/reactive/atanvector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atanvector",
        "href": "fuse/reactive/atanvector"
      },
      "titles": {
        "indexTitle": "AtanVector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.AtanVector"
      }
    },
    {
      "comment": {
        "brief": "[subclass Fuse.Reactive.BinaryFloatOperator]",
        "full": "[subclass Fuse.Reactive.BinaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/binaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryfloatoperator",
        "href": "fuse/reactive/binaryfloatoperator"
      },
      "titles": {
        "indexTitle": "BinaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take two arguments/operands.",
        "full": "Base class for reactive functions/operators that take two arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/binaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryoperator",
        "href": "fuse/reactive/binaryoperator"
      },
      "titles": {
        "indexTitle": "BinaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/ceil",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ceil",
        "href": "fuse/reactive/ceil"
      },
      "titles": {
        "indexTitle": "Ceil",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Ceil"
      }
    },
    {
      "comment": {
        "brief": "Restricts the range of a value to between two numbers.",
        "full": "Restricts the range of a value to between two numbers.\n\n    clamp( value, min, max)\n\nReturns\n- `min` when `value < min`\n- `max` when `value > max`\n- `value` otherwise\n\nValue may be a 1-4 component value. `min` and `max` must both be a single value."
      },
      "id": {
        "id": "fuse/reactive/clamp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/clamp",
        "href": "fuse/reactive/clamp"
      },
      "titles": {
        "indexTitle": "Clamp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Clamp"
      }
    },
    {
      "comment": {
        "brief": "Base class for UX expression functions that take arguments and compute a value from them.",
        "full": "Base class for UX expression functions that take arguments and compute a value from them.\n\nThis is the preferred base for most functions unless they have special needs to track whether/when arguments are set and/or lost.\n\nOnly a conctructor and the `Compute` method need to be defined."
      },
      "id": {
        "id": "fuse/reactive/computeexpression",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/computeexpression",
        "href": "fuse/reactive/computeexpression"
      },
      "titles": {
        "indexTitle": "ComputeExpression",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ComputeExpression"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/concat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/concat",
        "href": "fuse/reactive/concat"
      },
      "titles": {
        "indexTitle": "Concat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Concat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/conditional",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/conditional",
        "href": "fuse/reactive/conditional"
      },
      "titles": {
        "indexTitle": "Conditional",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Conditional"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/constant",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/constant",
        "href": "fuse/reactive/constant"
      },
      "titles": {
        "indexTitle": "Constant",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Constant"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/constantexpression",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/constantexpression",
        "href": "fuse/reactive/constantexpression"
      },
      "titles": {
        "indexTitle": "ConstantExpression",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ConstantExpression"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric cosine of the input angle (in radians)",
        "full": "The trigonometric cosine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/cos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/cos",
        "href": "fuse/reactive/cos"
      },
      "titles": {
        "indexTitle": "Cos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Cos"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/data",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/data",
        "href": "fuse/reactive/data"
      },
      "titles": {
        "indexTitle": "Data",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Data"
      }
    },
    {
      "comment": {
        "brief": "Binds to the prime context data of this node.",
        "full": "Binds to the prime context data of this node.\n\nBehaviors like @With, @Each, and @Instance introduce a prime data context for their children.  @JavaScript and the `Model` tag do not introduce a prime data context.\n\nUse `data()` when you wish to bind directly to the prime data context. This is for when your data contains a simple value rather than a data structure.\n\n    <JavaScript>\n        exports.items = Observable(1,2,3)\n    </JavaScript>\n    <Each Items=\"{items}\">\n        <Text Value=\"{= data() }\"/>\n    </Each>"
      },
      "id": {
        "id": "fuse/reactive/datafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/datafunction",
        "href": "fuse/reactive/datafunction"
      },
      "titles": {
        "indexTitle": "DataFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DataFunction"
      }
    },
    {
      "comment": {
        "brief": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.",
        "full": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.\n\nIn this example three different fonts are created as resources. The font is selected by name in the exported JavaScript items.\n\n    <Font File=\"../../Assets/fonts/Roboto-Bold.ttf\" ux:Key=\"Bold\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Regular.ttf\" ux:Key=\"Regular\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Italic.ttf\" ux:Key=\"Italic\"/>\n\n    <JavaScript>\n        exports.items = [\n            { font: \"Bold\" },\n            { font: \"Regular\" },\n            { font: \"Italic\" },\n        ]\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <Text Value=\"Sample Text\" Font=\"{DataToResource font}\"/>\n        </Each>\n    </StackPanel>\n\n`{DataToResource variableKey}` is similar to `{Resource key}`, except it allows a variable key name instead of a static one."
      },
      "id": {
        "id": "fuse/reactive/datatoresource",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/datatoresource",
        "href": "fuse/reactive/datatoresource"
      },
      "titles": {
        "indexTitle": "DataToResource",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DataToResource"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/degreestoradians",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/degreestoradians",
        "href": "fuse/reactive/degreestoradians"
      },
      "titles": {
        "indexTitle": "DegreesToRadians",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DegreesToRadians"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/divide",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/divide",
        "href": "fuse/reactive/divide"
      },
      "titles": {
        "indexTitle": "Divide",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Divide"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/equal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/equal",
        "href": "fuse/reactive/equal"
      },
      "titles": {
        "indexTitle": "Equal",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Equal"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is even, false otherwise",
        "full": "True if the rounded value is even, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/even",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/even",
        "href": "fuse/reactive/even"
      },
      "titles": {
        "indexTitle": "Even",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Even"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp",
        "href": "fuse/reactive/exp"
      },
      "titles": {
        "indexTitle": "Exp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp2",
        "href": "fuse/reactive/exp2"
      },
      "titles": {
        "indexTitle": "Exp2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/floor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/floor",
        "href": "fuse/reactive/floor"
      },
      "titles": {
        "indexTitle": "Floor",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Floor"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/fract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/fract",
        "href": "fuse/reactive/fract"
      },
      "titles": {
        "indexTitle": "Fract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Fract"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterorequal",
        "href": "fuse/reactive/greaterorequal"
      },
      "titles": {
        "indexTitle": "GreaterOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterthan",
        "href": "fuse/reactive/greaterthan"
      },
      "titles": {
        "indexTitle": "GreaterThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterThan"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/indexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/indexfunction",
        "href": "fuse/reactive/indexfunction"
      },
      "titles": {
        "indexTitle": "IndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IndexFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/infixoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/infixoperator",
        "href": "fuse/reactive/infixoperator"
      },
      "titles": {
        "indexTitle": "InfixOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InfixOperator"
      }
    },
    {
      "comment": {
        "brief": "Common base for functions that work with an item in an instantiator",
        "full": "Common base for functions that work with an item in an instantiator"
      },
      "id": {
        "id": "fuse/reactive/instantiatorfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instantiatorfunction",
        "href": "fuse/reactive/instantiatorfunction"
      },
      "titles": {
        "indexTitle": "InstantiatorFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InstantiatorFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an Android device",
        "full": "`true` if running on an Android device"
      },
      "id": {
        "id": "fuse/reactive/isandroidfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isandroidfunction",
        "href": "fuse/reactive/isandroidfunction"
      },
      "titles": {
        "indexTitle": "IsAndroidFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsAndroidFunction"
      }
    },
    {
      "comment": {
        "brief": "Test if a value is defined the context, returning `true` or `false`.",
        "full": "Test if a value is defined the context, returning `true` or `false`.\n\nThis can be used to check if a value is available yet in the data context, for example `isDefined({a})`.\n\nIf the value exists but is null then `true` will still be returned. Consider using `isNull` if you wish to exclude null as well.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/isdefined",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isdefined",
        "href": "fuse/reactive/isdefined"
      },
      "titles": {
        "indexTitle": "IsDefined",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDefined"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on a desktop",
        "full": "`true` if running on a desktop"
      },
      "id": {
        "id": "fuse/reactive/isdesktopfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isdesktopfunction",
        "href": "fuse/reactive/isdesktopfunction"
      },
      "titles": {
        "indexTitle": "IsDesktopFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDesktopFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an iOS device",
        "full": "`true` if running on an iOS device"
      },
      "id": {
        "id": "fuse/reactive/isiosfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isiosfunction",
        "href": "fuse/reactive/isiosfunction"
      },
      "titles": {
        "indexTitle": "IsIOSFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsIOSFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an Mobile device",
        "full": "`true` if running on an Mobile device"
      },
      "id": {
        "id": "fuse/reactive/ismobilefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ismobilefunction",
        "href": "fuse/reactive/ismobilefunction"
      },
      "titles": {
        "indexTitle": "IsMobileFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsMobileFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns false if the value exists and is non-null, true otherwise.",
        "full": "Returns false if the value exists and is non-null, true otherwise.\n\nThis is the same condition used in the NullCoalesce operator:\n\n    expr ?? res\n\nIs the same as:\n\n    isNull(expr) ? res : expr"
      },
      "id": {
        "id": "fuse/reactive/isnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isnull",
        "href": "fuse/reactive/isnull"
      },
      "titles": {
        "indexTitle": "IsNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsNull"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on OSX",
        "full": "`true` if running on OSX"
      },
      "id": {
        "id": "fuse/reactive/isosxfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isosxfunction",
        "href": "fuse/reactive/isosxfunction"
      },
      "titles": {
        "indexTitle": "IsOSXFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsOSXFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on Windows",
        "full": "`true` if running on Windows"
      },
      "id": {
        "id": "fuse/reactive/iswindowsfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/iswindowsfunction",
        "href": "fuse/reactive/iswindowsfunction"
      },
      "titles": {
        "indexTitle": "IsWindowsFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsWindowsFunction"
      }
    },
    {
      "comment": {
        "brief": "Calculates the linear interpolation between two values.",
        "full": "Calculates the linear interpolation between two values.\n\n    lerp( from, to, step )\n\nWhen step==0 the result is `from`, when step==1 the result is `to`. Partial values are linearly interpolated. Step values <0 and >1 are also supported.\n\nThe input supports a 1-4 component value for `from` and `to`. The result will be same size.\n`step` must always be a single value."
      },
      "id": {
        "id": "fuse/reactive/lerp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lerp",
        "href": "fuse/reactive/lerp"
      },
      "titles": {
        "indexTitle": "Lerp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Lerp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessorequal",
        "href": "fuse/reactive/lessorequal"
      },
      "titles": {
        "indexTitle": "LessOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessthan",
        "href": "fuse/reactive/lessthan"
      },
      "titles": {
        "indexTitle": "LessThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessThan"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log",
        "href": "fuse/reactive/log"
      },
      "titles": {
        "indexTitle": "Log",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log2",
        "href": "fuse/reactive/log2"
      },
      "titles": {
        "indexTitle": "Log2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicaland",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicaland",
        "href": "fuse/reactive/logicaland"
      },
      "titles": {
        "indexTitle": "LogicalAnd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalAnd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalnot",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalnot",
        "href": "fuse/reactive/logicalnot"
      },
      "titles": {
        "indexTitle": "LogicalNot",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalNot"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalor",
        "href": "fuse/reactive/logicalor"
      },
      "titles": {
        "indexTitle": "LogicalOr",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalOr"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive look-up operation, with a computed index (number) or key (string).",
        "full": "Represents a reactive look-up operation, with a computed index (number) or key (string).\n\nIndex can be either a number (for IArray lookups) or a string (for IObject lookups).\n\nDiagnostic erros are reported in the following cases:\n* If the collection is an `IArray` and the index is not convertible to a number.\n* If the collection is an `IArray` and the index is not within the bounds of the array.\n* If the colleciton is an `IObject` and the key is not present in the object.\n* If the collection is neither an `IArray` or `IObject`."
      },
      "id": {
        "id": "fuse/reactive/lookup",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lookup",
        "href": "fuse/reactive/lookup"
      },
      "titles": {
        "indexTitle": "LookUp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LookUp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/max",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/max",
        "href": "fuse/reactive/max"
      },
      "titles": {
        "indexTitle": "Max",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Max"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive object-member look-up operation.",
        "full": "Represents a reactive object-member look-up operation."
      },
      "id": {
        "id": "fuse/reactive/member",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/member",
        "href": "fuse/reactive/member"
      },
      "titles": {
        "indexTitle": "Member",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Member"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/min",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/min",
        "href": "fuse/reactive/min"
      },
      "titles": {
        "indexTitle": "Min",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Min"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/mod",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/mod",
        "href": "fuse/reactive/mod"
      },
      "titles": {
        "indexTitle": "Mod",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Mod"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/multiply",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/multiply",
        "href": "fuse/reactive/multiply"
      },
      "titles": {
        "indexTitle": "Multiply",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Multiply"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/namedfunctioncall",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namedfunctioncall",
        "href": "fuse/reactive/namedfunctioncall"
      },
      "titles": {
        "indexTitle": "NamedFunctionCall",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NamedFunctionCall"
      }
    },
    {
      "comment": {
        "brief": "Creates a `Fuse.NameValuePair` from a name and a value.",
        "full": "Creates a `Fuse.NameValuePair` from a name and a value."
      },
      "id": {
        "id": "fuse/reactive/namevaluepair",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namevaluepair",
        "href": "fuse/reactive/namevaluepair"
      },
      "titles": {
        "indexTitle": "NameValuePair",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NameValuePair"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/negate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/negate",
        "href": "fuse/reactive/negate"
      },
      "titles": {
        "indexTitle": "Negate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Negate"
      }
    },
    {
      "comment": {
        "brief": "Returns the value if it isn't null otherwise doesn't evaluate.",
        "full": "Returns the value if it isn't null otherwise doesn't evaluate.\n\nThis is a special use function in cases where you need to deal temporarily with null values that later become non-null. Instead of the null creating errors in an expression chain, this causes the expression to not evaluate at all.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/nonnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nonnull",
        "href": "fuse/reactive/nonnull"
      },
      "titles": {
        "indexTitle": "NonNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NonNull"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/notequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/notequal",
        "href": "fuse/reactive/notequal"
      },
      "titles": {
        "indexTitle": "NotEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NotEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/nullcoalesce",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nullcoalesce",
        "href": "fuse/reactive/nullcoalesce"
      },
      "titles": {
        "indexTitle": "NullCoalesce",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NullCoalesce"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IObject` from an arbitrary number of NameValuePairs.",
        "full": "Creates an `IObject` from an arbitrary number of NameValuePairs.\n\nThe returned object also implements `IArray` with the original ordering of the NameValuePairs.\n\nIn UX expressions, objects are denoted as lists of NameValuePair: `{name1: value1, name2: value2}`.\n\nA single `NameValuePair` also implements `IObject` (but doesn't need this `Object` operator)."
      },
      "id": {
        "id": "fuse/reactive/object",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/object",
        "href": "fuse/reactive/object"
      },
      "titles": {
        "indexTitle": "Object",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Object"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is odd, false otherwise",
        "full": "True if the rounded value is odd, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/odd",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/odd",
        "href": "fuse/reactive/odd"
      },
      "titles": {
        "indexTitle": "Odd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Odd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/offsetindexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/offsetindexfunction",
        "href": "fuse/reactive/offsetindexfunction"
      },
      "titles": {
        "indexTitle": "OffsetIndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.OffsetIndexFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns the parameter of the given page (visual), parsed from a JSON string.",
        "full": "Returns the parameter of the given page (visual), parsed from a JSON string.\n\nUsage:\n\n    <Text Value=\"parameter(this).title\" />\n\nThe parameter can be ommited"
      },
      "id": {
        "id": "fuse/reactive/parameter",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/parameter",
        "href": "fuse/reactive/parameter"
      },
      "titles": {
        "indexTitle": "Parameter",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Parameter"
      }
    },
    {
      "comment": {
        "brief": "A series of functions to check the device platform.",
        "full": "A series of functions to check the device platform.\n\n[subclass Fuse.Reactive.PlatformFunction]"
      },
      "id": {
        "id": "fuse/reactive/platformfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/platformfunction",
        "href": "fuse/reactive/platformfunction"
      },
      "titles": {
        "indexTitle": "PlatformFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.PlatformFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/pow",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/pow",
        "href": "fuse/reactive/pow"
      },
      "titles": {
        "indexTitle": "Pow",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Pow"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/property",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/property",
        "href": "fuse/reactive/property"
      },
      "titles": {
        "indexTitle": "Property",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Property"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take four arguments/operands.",
        "full": "Base class for reactive functions/operators that take four arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/quaternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/quaternaryoperator",
        "href": "fuse/reactive/quaternaryoperator"
      },
      "titles": {
        "indexTitle": "QuaternaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.QuaternaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/radianstodegrees",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/radianstodegrees",
        "href": "fuse/reactive/radianstodegrees"
      },
      "titles": {
        "indexTitle": "RadiansToDegrees",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.RadiansToDegrees"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/resource",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/resource",
        "href": "fuse/reactive/resource"
      },
      "titles": {
        "indexTitle": "Resource",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Resource"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/round",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/round",
        "href": "fuse/reactive/round"
      },
      "titles": {
        "indexTitle": "Round",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Round"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sign",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sign",
        "href": "fuse/reactive/sign"
      },
      "titles": {
        "indexTitle": "Sign",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sign"
      }
    },
    {
      "comment": {
        "brief": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments.",
        "full": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments."
      },
      "id": {
        "id": "fuse/reactive/simplevarargfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/simplevarargfunction",
        "href": "fuse/reactive/simplevarargfunction"
      },
      "titles": {
        "indexTitle": "SimpleVarArgFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.SimpleVarArgFunction"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric sine of the input angle (in radians)",
        "full": "The trigonometric sine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/sin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sin",
        "href": "fuse/reactive/sin"
      },
      "titles": {
        "indexTitle": "Sin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sin"
      }
    },
    {
      "comment": {
        "brief": "Returns the first value to propagate from the source expression, and then stops listening.",
        "full": "Returns the first value to propagate from the source expression, and then stops listening."
      },
      "id": {
        "id": "fuse/reactive/snapshot",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/snapshot",
        "href": "fuse/reactive/snapshot"
      },
      "titles": {
        "indexTitle": "Snapshot",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Snapshot"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sqrt",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sqrt",
        "href": "fuse/reactive/sqrt"
      },
      "titles": {
        "indexTitle": "Sqrt",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sqrt"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/subtract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/subtract",
        "href": "fuse/reactive/subtract"
      },
      "titles": {
        "indexTitle": "Subtract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Subtract"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric tangent of the input angle (in radians)",
        "full": "The trigonometric tangent of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/tan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tan",
        "href": "fuse/reactive/tan"
      },
      "titles": {
        "indexTitle": "Tan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Tan"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take three arguments/operands.",
        "full": "Base class for reactive functions/operators that take three arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/ternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ternaryoperator",
        "href": "fuse/reactive/ternaryoperator"
      },
      "titles": {
        "indexTitle": "TernaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.TernaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Forces a conversion to floating point. This supports any 1-4 component float vector.",
        "full": "Forces a conversion to floating point. This supports any 1-4 component float vector."
      },
      "id": {
        "id": "fuse/reactive/tofloat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tofloat",
        "href": "fuse/reactive/tofloat"
      },
      "titles": {
        "indexTitle": "ToFloat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToFloat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/tolower",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tolower",
        "href": "fuse/reactive/tolower"
      },
      "titles": {
        "indexTitle": "ToLower",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToLower"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a Size or Size2 depending on input size.",
        "full": "Forces conversion to a Size or Size2 depending on input size.\n\nThis is useful when using operators that may not be able to infer the desired types. For example:\n\n    <JavaScript>\n        exports.jsArray = [0.2, 0.4]\n    </JavaScript>\n    <Panel Offset=\"size({jsArray}) * 100%\"/>\n\nThis function follows the conversion rules as though the operand was being converted directly to a `Size` or `Size2` property type. If the input is a `float2`, array, or already a Size2, then it will be converted to a `Size2`, otherwise a `Size` type."
      },
      "id": {
        "id": "fuse/reactive/tosize",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tosize",
        "href": "fuse/reactive/tosize"
      },
      "titles": {
        "indexTitle": "ToSize",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToSize"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a string value.",
        "full": "Forces conversion to a string value."
      },
      "id": {
        "id": "fuse/reactive/tostring",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tostring",
        "href": "fuse/reactive/tostring"
      },
      "titles": {
        "indexTitle": "ToString",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToString"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/toupper",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/toupper",
        "href": "fuse/reactive/toupper"
      },
      "titles": {
        "indexTitle": "ToUpper",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToUpper"
      }
    },
    {
      "comment": {
        "brief": "Rounds to the next whole integer closer to zero",
        "full": "Rounds to the next whole integer closer to zero"
      },
      "id": {
        "id": "fuse/reactive/trunc",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/trunc",
        "href": "fuse/reactive/trunc"
      },
      "titles": {
        "indexTitle": "Trunc",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Trunc"
      }
    },
    {
      "comment": {
        "brief": "Common base for floating point operations",
        "full": "Common base for floating point operations\n\nAll the derived expressions support 1-4 component input values and will return a value of the same size.\n\n[subclass Fuse.Reactive.UnaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/unaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryfloatoperator",
        "href": "fuse/reactive/unaryfloatoperator"
      },
      "titles": {
        "indexTitle": "UnaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Optimized base class for reactive functions/operators that take a single argument/operand.",
        "full": "Optimized base class for reactive functions/operators that take a single argument/operand."
      },
      "id": {
        "id": "fuse/reactive/unaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryoperator",
        "href": "fuse/reactive/unaryoperator"
      },
      "titles": {
        "indexTitle": "UnaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Base class for UX functions that accept a variable number of arguments.",
        "full": "Base class for UX functions that accept a variable number of arguments.\n\nDerived classes must override exaclty one of either `OnNewPartialArguments` or `OnNewArguments`."
      },
      "id": {
        "id": "fuse/reactive/varargfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/varargfunction",
        "href": "fuse/reactive/varargfunction"
      },
      "titles": {
        "indexTitle": "VarArgFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VarArgFunction"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)",
        "full": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)"
      },
      "id": {
        "id": "fuse/reactive/vector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vector",
        "href": "fuse/reactive/vector"
      },
      "titles": {
        "indexTitle": "Vector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Vector"
      }
    },
    {
      "comment": {
        "brief": "Returns the `W` value of a `float4` value.",
        "full": "Returns the `W` value of a `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorw",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorw",
        "href": "fuse/reactive/vectorw"
      },
      "titles": {
        "indexTitle": "VectorW",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorW"
      }
    },
    {
      "comment": {
        "brief": "Returns the `Z` value of a `float3` or `float4` value.",
        "full": "Returns the `Z` value of a `float3` or `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorz",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorz",
        "href": "fuse/reactive/vectorz"
      },
      "titles": {
        "indexTitle": "VectorZ",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorZ"
      }
    },
    {
      "comment": {
        "brief": "Provides details about the device and view needed for layout.",
        "full": "Provides details about the device and view needed for layout.\n\nThe `window()` function returns an object with reactive properties. \"Window\" is a common term that refers to the entire area the application is using on the device, which is not always the entire screen.\n    - `width` (float):  the width of the window\n    - `height` (float): the height of the window\n    -  `size` (float2): the combined width and height of the window\n    - `safeMargins` (float4): Margins needed on the content of the window to exclude it from all device UI and reserved areas.\n    - `staticMargins` (float4): Like `safeMargins` but does not adjust for popup controls like the soft keyboard.\n    - `deviceMargins` (float4): (Experimental) The margins the device reports as not being complete safe for drawing as something may obstruct the view (such as the rounded corners of an iPhone X)\n\nDrawing anythng but a background (image or brush fill) in the gradient areas is not recommended as it may be obscured by the system UI or the hardware.\n\nRefer to @SafeEdgePanel and [Safe Layout](articles:layout/safe-layout.md) for more information about safe layouts and device margins."
      },
      "id": {
        "id": "fuse/reactive/windowfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/windowfunction",
        "href": "fuse/reactive/windowfunction"
      },
      "titles": {
        "indexTitle": "WindowFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WindowFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` while the @Selectable is currently selected.",
        "full": "`true` while the @Selectable is currently selected.\n\nThis expression attaches to the first @Selectable node that is an ancestory of the expression node. Optionally,  you may specify an argument to get a different selectable `isSelected( myPanel )`."
      },
      "id": {
        "id": "fuse/selection/isselectedfunction",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/isselectedfunction",
        "href": "fuse/selection/isselectedfunction"
      },
      "titles": {
        "indexTitle": "IsSelectedFunction",
        "fullyQualifiedIndexTitle": "Fuse.Selection.IsSelectedFunction"
      }
    }
  ]
}