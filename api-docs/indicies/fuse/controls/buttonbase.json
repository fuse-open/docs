{
  "root": {
    "id": {
      "id": "fuse/controls/buttonbase",
      "parentId": "fuse/controls",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/buttonbase",
      "href": "fuse/controls/buttonbase"
    },
    "titles": {
      "indexTitle": "ButtonBase",
      "fullyQualifiedIndexTitle": "Fuse.Controls.ButtonBase"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "basic/backbutton",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/backbutton",
        "href": "basic/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Basic.BackButton"
      }
    },
    {
      "id": {
        "id": "basic/button",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/button",
        "href": "basic/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Basic.Button"
      }
    },
    {
      "comment": {
        "brief": "Displays a backbutton",
        "full": "Displays a backbutton\n\nOnly the semantic control for backbutton. Refer to @Navigation and @GoBack for how\nto use it in navigation.\n\n## Example:\n\n    <BackButton>\n        <Clicked>\n            <GoBack />\n        </Clicked>\n    </BackButton>"
      },
      "id": {
        "id": "fuse/controls/backbutton",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/backbutton",
        "href": "fuse/controls/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Fuse.Controls.BackButton"
      }
    },
    {
      "comment": {
        "brief": "Displays a button",
        "full": "Displays a button\n\nThe default button in Fuse. Its appearance is transparent with blue text.\nTo change the look or to create a semantically specific button, create a Subclass of this Class.\nPlease note that when used inside a @NativeViewHost, this button will have the platform native appearance\nwhich might need additional styling to make it visible. For example, on iOS the default native appearance of a\nbutton is blue text on white.\n\n## Examples\n\nBy default, `Button` is drawn as blue text over a transparent background.\n\n    <Button Text=\"Click me\" />\n\nHowever, Button can also be used to render the *platform native* button control whenever possible.\nThis is done by wrapping the Button in a @NativeViewHost, as shown below.\n\n    <NativeViewHost>\n        <Button Text=\"Native button\" />\n    </NativeViewHost>\n\nHowever, we usually want a button with our own look and feel.\nIn this case, it is recommended to subclass @Panel rather than Button.\nSince you can attach a `Clicked` handler to any element, using a @Panel as the base class offers a\ngreat deal of flexibility, while removing a lot of the unnecessary complexity of the actual Button class.\n\nBelow is an example of creating your own button control with @Panel:\n\n    <Panel ux:Class=\"MyButton\" HitTestMode=\"LocalBounds\" Margin=\"4\" Color=\"#25a\">\n        <string ux:Property=\"Text\" />\n        <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" Margin=\"30,15\" />\n\n        <WhilePressed>\n            <Change this.Color=\"#138\" Duration=\"0.05\" DurationBack=\".2\" />\n        </WhilePressed>\n    </Panel>\n\n    <MyButton Text=\"Click me\" />\n\nHowever, if you want a *platform native button* that falls back to a custom look on non-mobile devices,\nyou have to subclass `Button`.\n\n    <Button ux:Class=\"MyNativeButtonWithFallback\" Margin=\"2\">\n        <Panel ux:Template=\"GraphicsAppearance\" HitTestMode=\"LocalBounds\">\n            <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n            <Rectangle CornerRadius=\"4\" Layer=\"Background\" Color=\"#25a\" />\n        </Panel>\n    </Button>\n\nWhen placed in a @NativeViewHost, the Button will attempt to initialize a *native* button control.\nIf this is not possible (e.g. if it's running on desktop), it will fall back to the template specified\nby `ux:Template=\"GraphicsAppearance\"`.`\n\n    <NativeViewHost>\n        <!-- Will be native if possible -->\n        <MyNativeButtonWithFallback Text=\"Some button\" />\n    </NativeViewHost>\n\nIf we *don't* place the Button inside a @NativeViewHost,\nthe `GraphicsAppearance` template will always be used to draw the button.\n\n    <MyNativeButtonWithFallback />"
      },
      "id": {
        "id": "fuse/controls/button",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button",
        "href": "fuse/controls/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Button"
      }
    }
  ]
}