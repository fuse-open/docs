{
  "root": {
    "id": {
      "id": "fuse/controls/panel",
      "parentId": "fuse/controls",
      "type": "UxClass",
      "modifiers": [
        "public",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/panel",
      "href": "fuse/controls/panel"
    },
    "titles": {
      "indexTitle": "Panel",
      "fullyQualifiedIndexTitle": "Fuse.Controls.Panel"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "A Material Design-like floating action button.",
        "full": "A Material Design-like floating action button."
      },
      "id": {
        "id": "alive/actionbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/actionbutton",
        "href": "alive/actionbutton"
      },
      "titles": {
        "indexTitle": "ActionButton",
        "fullyQualifiedIndexTitle": "Alive.ActionButton"
      }
    },
    {
      "comment": {
        "brief": "A left-pointing arrow, used in navigation.\n**Note:** this component only provides visuals and does not actually perform navigation.",
        "full": "A left-pointing arrow, used in navigation.\n**Note:** this component only provides visuals and does not actually perform navigation.\n\n    <Router ux:Name=\"router\" />\n\n    <JavaScript>\n        exports.goBack = function() {\n            router.goBack();\n        }\n    }\n    </JavaScript>\n\n    <Alive.BackButton Clicked=\"{goBack}\" />"
      },
      "id": {
        "id": "alive/backbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/backbutton",
        "href": "alive/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Alive.BackButton"
      }
    },
    {
      "comment": {
        "brief": "A row of partially overlapping [Bubbles](api:alive/bubble).",
        "full": "A row of partially overlapping [Bubbles](api:alive/bubble).\n\n    <Alive.Bubbles>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image1.jpg\" />\n        </Alive.Bubble>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image2.jpg\" />\n        </Alive.Bubble>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image3.jpg\" />\n        </Alive.Bubble>\n    </Alive.Bubbles>"
      },
      "id": {
        "id": "alive/bubbles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubbles",
        "href": "alive/bubbles"
      },
      "titles": {
        "indexTitle": "Bubbles",
        "fullyQualifiedIndexTitle": "Alive.Bubbles"
      }
    },
    {
      "comment": {
        "brief": "A @StackPanel with the right margins and spacing for text content in a Card.",
        "full": "A @StackPanel with the right margins and spacing for text content in a Card.\n\n    <Alive.Card>\n        <Alive.CardBody>\n            <Alive.Title>Lorem ipsum</Alive.Title>\n            <Alive.Body>Lorem ipsum dolor sit amet...</Alive.Body>\n        </Alive.CardBody>\n    </Alive.Card>"
      },
      "id": {
        "id": "alive/cardbody",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardbody",
        "href": "alive/cardbody"
      },
      "titles": {
        "indexTitle": "CardBody",
        "fullyQualifiedIndexTitle": "Alive.CardBody"
      }
    },
    {
      "comment": {
        "brief": "A Carousel component with a depth-like effect.",
        "full": "A Carousel component with a depth-like effect.\n\n    <Alive.Carousel>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image11.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image2.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image3.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n    </Alive.Carousel>\n\nSee also [FlatCarousel](api:alive/flatcarousel)."
      },
      "id": {
        "id": "alive/carousel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/carousel",
        "href": "alive/carousel"
      },
      "titles": {
        "indexTitle": "Carousel",
        "fullyQualifiedIndexTitle": "Alive.Carousel"
      }
    },
    {
      "comment": {
        "brief": "A page in a [Carousel](api:alive/carousel).\nProvides no visuals, only animation.",
        "full": "A page in a [Carousel](api:alive/carousel).\nProvides no visuals, only animation.\n\n    <Alive.Carousel>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image11.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image2.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n        <Alive.CarouselPage>\n            <Alive.Card>\n                <Alive.ImageFill File=\"image3.jpg\" />\n            </Alive.Card>\n        </Alive.CarouselPage>\n    </Alive.Carousel>"
      },
      "id": {
        "id": "alive/carouselpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/carouselpage",
        "href": "alive/carouselpage"
      },
      "titles": {
        "indexTitle": "CarouselPage",
        "fullyQualifiedIndexTitle": "Alive.CarouselPage"
      }
    },
    {
      "comment": {
        "brief": "Provides sidebar navigation toggleable by a floating button.",
        "full": "Provides sidebar navigation toggleable by a floating button.\n\nA menu element must be provided using the `Menu` dependency.\n\nIn most cases, the Drawer sits at the root of the app, enclosing the root Navigator.\n\n    <App>\n        <JavaScript>\n            exports.goToPage1 = function() {\n                router.goto(\"page1\");\n                drawer.close();\n            }\n\n            exports.goToPage2 = function() {\n                router.goto(\"page2\");\n                drawer.close();\n            }\n        </JavaScript>\n\n        <Router ux:Name=\"router\" />\n        <Alive.Drawer>\n            <StackPanel ux:Binding=\"Menu\" ItemSpacing=\"10\">\n                <Alive.Body Value=\"Page 1\" Clicked=\"{goToPage1}\" />\n                <Alive.Body Value=\"Page 2\" Clicked=\"{goToPage2}\" />\n            </StackPanel>\n            <Navigator DefaultPath=\"page1\">\n                <Page ux:Name=\"page1\" />\n                <Page ux:Name=\"page2\" />\n            </Navigator>\n        </Alive.Drawer>\n    </App>\n\nDrawer can be opened and closed from JavaScript using the `open()` and `close()` methods.\n\n    <JavaScript>\n        exports.openDrawer = function() {\n            drawer.open();\n        }\n\n        exports.closeDrawer = function() {\n            drawer.close();\n        }\n    </JavaScript>\n\n    <Alive.Drawer ux:Name=\"drawer\">\n        <Panel ux:Binding=\"Menu\" />\n    </Alive.Drawer>\n\nDrawer displays a floating button above its content that opens the Drawer.\nThis can be disabled using the `HideButton` property.\n\n    <Alive.Drawer HideButton=\"true\">\n        <Panel ux:Binding=\"Menu\" />\n    </Alive.Drawer />\n\nYou can combine this property with `WhileActive` to hide the button for certain pages.\nIn the example below, the button is hidden while inside `SecondPage`.\n\n    <App>\n        <Router ux:Name=\"router\" />\n        <Alive.Drawer ux:Name=\"drawer\">\n            <StackPanel ux:Binding=\"Menu\" ItemSpacing=\"10\">\n                <!-- menu content -->\n            </StackPanel>\n            <Navigator>\n                <FirstPage ux:Template=\"page1\" />\n                <SecondPage ux:Template=\"page2\" drawer=\"drawer\" />\n            </Navigator>\n        </Alive.Drawer>\n\n        <Page ux:Class=\"FirstPage\" />\n\n        <Page ux:Class=\"SecondPage\">\n            <Alive.Drawer ux:Dependency=\"drawer\" />\n\n            <WhileActive>\n                <Change drawer.HideButton=\"true\" />\n            </WhileActive>\n        </Page>\n    </App>"
      },
      "id": {
        "id": "alive/drawer",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/drawer",
        "href": "alive/drawer"
      },
      "titles": {
        "indexTitle": "Drawer",
        "fullyQualifiedIndexTitle": "Alive.Drawer"
      }
    },
    {
      "comment": {
        "brief": "A Panel with the same height as the floating button of a [Drawer](api:alive/drawer).",
        "full": "A Panel with the same height as the floating button of a [Drawer](api:alive/drawer)."
      },
      "id": {
        "id": "alive/drawerbuttonbackground",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/drawerbuttonbackground",
        "href": "alive/drawerbuttonbackground"
      },
      "titles": {
        "indexTitle": "DrawerButtonBackground",
        "fullyQualifiedIndexTitle": "Alive.DrawerButtonBackground"
      }
    },
    {
      "comment": {
        "brief": "A flat carousel component.",
        "full": "A flat carousel component.\n\nSee [FlatCarouselPage](api:alive/flatcarouselpage) for more on individual page layout.\n\n    <Alive.FlatCarousel>\n        <Alive.FlatCarouselPage Title=\"Page 1\">\n            <Image File=\"image.jpg\" StretchMode=\"UniformToFill\" />\n        </Alive.FlatCarouselPage>\n        <Alive.FlatCarouselPage Title=\"Page 2\" Subtitle=\"Yeah!\">\n            <Image File=\"image.jpg\" StretchMode=\"UniformToFill\" />\n        </Alive.FlatCarouselPage>\n    </Alive.FlatCarousel>\n\nSee also [Carousel](api:alive/carousel)."
      },
      "id": {
        "id": "alive/flatcarousel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarousel",
        "href": "alive/flatcarousel"
      },
      "titles": {
        "indexTitle": "FlatCarousel",
        "fullyQualifiedIndexTitle": "Alive.FlatCarousel"
      }
    },
    {
      "comment": {
        "brief": "A page in a [FlatCarousel](api:alive/flatcarousel).",
        "full": "A page in a [FlatCarousel](api:alive/flatcarousel).\n\nFlatCarouselPage displays a gradient above its content.\nThus, there are two ways to display content above this gradient.\n\nYou can provide a Title and/or Subtitle to be displayed in the bottom-left corner.\n\n    <Alive.FlatCarousel>\n        <Alive.FlatCarouselPage Title=\"Page 1\">\n            <Image File=\"image.jpg\" StretchMode=\"UniformToFill\" />\n        </Alive.FlatCarouselPage>\n        <Alive.FlatCarouselPage Title=\"Page 2\" Subtitle=\"Yeah!\">\n            <Image File=\"image.jpg\" StretchMode=\"UniformToFill\" />\n        </Alive.FlatCarouselPage>\n    </Alive.FlatCarousel>\n\nInstead of the default Title/Subtitle setup, you can provide the `Content` template to use a custom element.\n\n    <Alive.FlatCarousel>\n        <Alive.FlatCarouselPage>\n            <Panel ux:Template=\"Content\">\n                <Alive.Body>Hello, world</Alive.Body>\n            </Panel>\n            <Image File=\"image.jpg\" StretchMode=\"UniformToFill\" />\n        </Alive.FlatCarouselPage>\n    </Alive.FlatCarousel>"
      },
      "id": {
        "id": "alive/flatcarouselpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarouselpage",
        "href": "alive/flatcarouselpage"
      },
      "titles": {
        "indexTitle": "FlatCarouselPage",
        "fullyQualifiedIndexTitle": "Alive.FlatCarouselPage"
      }
    },
    {
      "comment": {
        "brief": "A text label with an [Icon](api:alive/icon) docked to its left.",
        "full": "A text label with an [Icon](api:alive/icon) docked to its left.\n\nSee [Icon](api:alive/icon) for a list of available icons.\n\n    <Alive.IconLabel Text=\"Delete\" Icon=\"&#xEC45;\" />\n\nYou can specify the icons size using the `IconSize` property.\n\n    <Alive.IconLabel Text=\"Delete\" Icon=\"&#xEC45;\" IconSize=\"48\" />"
      },
      "id": {
        "id": "alive/iconlabel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/iconlabel",
        "href": "alive/iconlabel"
      },
      "titles": {
        "indexTitle": "IconLabel",
        "fullyQualifiedIndexTitle": "Alive.IconLabel"
      }
    },
    {
      "comment": {
        "brief": "A striped list of items, with optional Adding/Removing/LayoutAnimations.",
        "full": "A striped list of items, with optional Adding/Removing/LayoutAnimations.\n\nListView takes its items directly as a property.\n\n**Note:** `Items` must be an @Observable.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        exports.tasks = Observable(\n            { task: \"Groceries\" },\n            { task: \"Finish TPS report\" },\n            { task: \"Purchase boat\" }\n        );\n    </JavaScript>\n\n    <Alive.ListView Items=\"{tasks}\">\n        <Panel Height=\"80\">\n            <Alive.Body Value=\"{task}\" Alignment=\"Center\" />\n        </Panel>\n    </Alive.ListView>\n\nListView applies @AddingAnimation, @RemovingAnimation and @LayoutAnimation to each element by default.\nThis behavior can be disabled using the `IsAnimated` property.\n\n    <Alive.ListView IsAnimated=\"false\" Items=\"{data}\">"
      },
      "id": {
        "id": "alive/listview",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listview",
        "href": "alive/listview"
      },
      "titles": {
        "indexTitle": "ListView",
        "fullyQualifiedIndexTitle": "Alive.ListView"
      }
    },
    {
      "comment": {
        "brief": "A scrolling container with a header image.",
        "full": "A scrolling container with a header image.\n\nMediaScroller requires you to provide a `Media` element.\nThis is the main image that will be displayed above the rest of the content.\nNote that we use `ux:Binding` here instead of `ux:Template`.\nThis is because `Media` is a [dependency](articles:ux-markup/dependencies), and must always be provided.\n\n    <Alive.MediaScroller>\n        <Image ux:Binding=\"Media\" File=\"image.jpg\" Height=\"250\" />\n\n        <!-- content goes here -->\n    </Alive.MediaScroller>\n\nAny element that is not a `ux:Template` or `ux:Dependency` is placed in a @StackPanel that serves\nas the main content of the inner @ScrollView.\n\n    <Alive.MediaScroller>\n        <Image ux:Binding=\"Media\" File=\"image.jpg\" Height=\"250\" />\n\n        <Alive.Body Value=\"children\" />\n        <Alive.Body Value=\"will\" />\n        <Alive.Body Value=\"be\" />\n        <Alive.Body Value=\"stacked\" />\n        <Alive.Body Value=\"vertically\" />\n    </Alive.MediaScroller>\n\nWhen the user scrolls downwards, the `Media` element shrinks with the scrolling motion,\nuntil it has the same height as `TopBar`.\n\n    <Alive.MediaScroller>\n        <Panel ux:Template=\"TopBar\">\n            <Alive.Body Alignment=\"Center\" Margin=\"0,20\">\n                This is the title!\n            </Alive.Body>\n        </Panel>\n        <Image ux:Binding=\"Media\" File=\"image.jpg\" Height=\"250\" />\n    </Alive.MediaScroller>\n\nYou may specify a color to fade in while `Media` morphs into `TopBar` using the `TopBarColor` property.\n\n    <Alive.MediaScroller TopBarColor=\"{Resource Alive.AccentColor}\">\n        <Panel ux:Template=\"TopBar\" Height=\"56\" />\n        <Image ux:Binding=\"Media\" File=\"image.jpg\" Height=\"250\" />\n    </Alive.MediaScroller>\n\nWhen the user scrolls above the scrollable area, the `Media` element will be pixel-stretched in accordance.\nTo avoid this, you may also specfy a `MediaOverlay` template.\nThis is useful for content with sharp edges (such as text).\n\n    <Alive.MediaScroller TopBarColor=\"{Resource Alive.AccentColor}\">\n        <Panel ux:Template=\"MediaOverlay\">\n            <Alive.Card Margin=\"20\">\n                <Alive.ImageFill File=\"image.jpg\" />\n            </Alive.Card>\n        </Panel>\n        <Panel ux:Binding=\"Media\" Color=\"{Resource Alive.PrimaryBackgroundColor}\" />\n    </Alive.MediaScroller>\n\n`MediaOverlay` is displayed below the fading colored overlay.\nYou may provide the `BottomBar` template to display an element on top of this overlay,\naligned to bottom of `Media`.\n\n    <Alive.MediaScroller TopBarColor=\"{Resource Alive.AccentColor}\">\n        <Panel ux:Template=\"MediaOverlay\">\n            <Alive.Card Margin=\"20\">\n                <Alive.ImageFill File=\"image.jpg\" />\n            </Alive.Card>\n        </Panel>\n        <Panel ux:Binding=\"Media\" Color=\"{Resource Alive.PrimaryBackgroundColor}\" />\n    </Alive.MediaScroller>"
      },
      "id": {
        "id": "alive/mediascroller",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/mediascroller",
        "href": "alive/mediascroller"
      },
      "titles": {
        "indexTitle": "MediaScroller",
        "fullyQualifiedIndexTitle": "Alive.MediaScroller"
      }
    },
    {
      "comment": {
        "brief": "A navigation bar including @StatusBarBackground.\nChildren are placed inside a DockPanel.",
        "full": "A navigation bar including @StatusBarBackground.\nChildren are placed inside a DockPanel.\n\nUse [NavBarTitle](api:alive/navbartitle) for title text in a `NavBar`.\n\n    <DockPanel>\n        <Alive.NavBar>\n            <Alive.BackButton Dock=\"Left\" />\n            <Alive.NavBarTitle>Page</Alive.NavBarTitle>\n        </Alive.NavBar>\n    </DockPanel>"
      },
      "id": {
        "id": "alive/navbar",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/navbar",
        "href": "alive/navbar"
      },
      "titles": {
        "indexTitle": "NavBar",
        "fullyQualifiedIndexTitle": "Alive.NavBar"
      }
    },
    {
      "comment": {
        "brief": "A @Page that takes its background color from the currently active theme.",
        "full": "A @Page that takes its background color from the currently active theme."
      },
      "id": {
        "id": "alive/page",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/page",
        "href": "alive/page"
      },
      "titles": {
        "indexTitle": "Page",
        "fullyQualifiedIndexTitle": "Alive.Page"
      }
    },
    {
      "comment": {
        "brief": "A variant of [TabPage](api:alive/tabpage) that keeps the previous and next pages partially in view.",
        "full": "A variant of [TabPage](api:alive/tabpage) that keeps the previous and next pages partially in view.\n\n**Note:* The enclosing @PageControl must have the\n[InactiveState](api:fuse/controls/pagecontrol/inactivestate) property set to\n[Unchanged](api:fuse/controls/navigationcontrolinactivestate/unchanged).\n[TabPageControl](api:alive/tabpagecontrol) does this automatically.\n\nSee [TabPage](api:alive/tabpage) for usage."
      },
      "id": {
        "id": "alive/partialtabpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/partialtabpage",
        "href": "alive/partialtabpage"
      },
      "titles": {
        "indexTitle": "PartialTabPage",
        "fullyQualifiedIndexTitle": "Alive.PartialTabPage"
      }
    },
    {
      "comment": {
        "brief": "A radar-style [Plot](api:fuse/charting/plot) for a single data series of *exactly* six data points.",
        "full": "A radar-style [Plot](api:fuse/charting/plot) for a single data series of *exactly* six data points.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        exports.data = Observable(\n            { y: 1, label: \"Talks\" },\n            { y: 2, label: \"Exhibitions\" },\n            { y: 7, label: \"Music\" },\n            { y: 4, label: \"Workshops\" },\n            { y: 5, label: \"Comedy\" },\n            { y: 6, label: \"Meetups }\n        )\n    </JavaScript>\n\n    <Alive.RadarPlot>\n        <Fuse.Charting.DataSeries Data=\"{data}\" />\n    </Alive.RadarPlot>"
      },
      "id": {
        "id": "alive/radarplot",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/radarplot",
        "href": "alive/radarplot"
      },
      "titles": {
        "indexTitle": "RadarPlot",
        "fullyQualifiedIndexTitle": "Alive.RadarPlot"
      }
    },
    {
      "comment": {
        "brief": "A slider control.\nHas the same interface as any other @RangeControl, such as the default @Slider.",
        "full": "A slider control.\nHas the same interface as any other @RangeControl, such as the default @Slider."
      },
      "id": {
        "id": "alive/slider",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/slider",
        "href": "alive/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Alive.Slider"
      }
    },
    {
      "comment": {
        "brief": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.",
        "full": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.\n\n**Note:** StickyHeader *must* be placed directly inside the ScrollView's root element.\nThis is because `StickyHeader` calculates its own position relative to its parent.\n\n    <ScrollView>\n        <StackPanel>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\">\n                    <Alive.Title Margin=\"15\">Header</Alive.Title>\n\n                    <StackPanel ItemSpacing=\"20\" Margin=\"20\">\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                    </StackPanel>\n                </Panel>\n            </Alive.StickyHeader>\n        </StackPanel>\n    </ScrollView>\n\n[MediaScroller](api:alive/mediascroller) wraps a StackPanel around its children,\nand so any StickyHeader must be a direct child of the `MediaScroller` itself.\n\n    <Alive.MediaScroller>\n        <Panel ux:Binding=\"Media\" />\n\n        <Alive.StickyHeader>\n            <Panel ux:Binding=\"Header\">\n                <Alive.Title Margin=\"15\">Header</Alive.Title>\n\n                <!-- content -->\n            </Panel>\n        </Alive.StickyHeader>\n    </Alive.MediaScroller>\n\nSee also @StickyHeaderAnimation"
      },
      "id": {
        "id": "alive/stickyheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheader",
        "href": "alive/stickyheader"
      },
      "titles": {
        "indexTitle": "StickyHeader",
        "fullyQualifiedIndexTitle": "Alive.StickyHeader"
      }
    },
    {
      "comment": {
        "brief": "Reveals a button when the user swipes left on its contents.\nA confirmation message is shown when the button is tapped.",
        "full": "Reveals a button when the user swipes left on its contents.\nA confirmation message is shown when the button is tapped.\n\n```\n<Alive.SwipeActionPanel ButtonText=\"Do nothing\" ConfirmationText=\"And thus, nothing was done\">\n    <Panel Color=\"#fff\" Height=\"80\" />\n</Alive.SwipeActionPanel>\n```\n\nWhen the button is tapped, this component will raise a UserEvent named Alive.SwipeActionConfirmed.\nYou can handle this event using the Alive.SwipeActionConfirmed trigger.\n\n    <JavaScript>\n        exports.onConfirmed = function() {\n            doSomething();\n        }\n    </JavaScript>\n\n    <Alive.SwipeActionPanel>\n        <Alive.SwipeActionConfirmed Handler=\"{onConfirmed}\" />\n\n    </Alive.SwipeActionPanel>\n\nThe button has a red color by default, and fades into yellow following the confirmation animation.\nYou can customize this gradient using the GradientStartColor and GradientEndColor properties.\n\nTip: Alive provides a set of default gradients, as seen in the example below.\n\n    <Alive.SwipeActionPanel GradientStartColor=\"Alive.Gradient1.StartColor\" GradientEndColor=\"Alive.Gradient1.EndColor\">\n\nBy default, the confirmation message is hidden after a short duration.\nThis behavior can be disabled using the StayOpen property.\nIt is useful for preventing the confirmation animation from playing at the same time as a RemovingAnimation,\nfor cases where the button causes its containing element to be removed from a list.\n\n    <Panel>\n        <Alive.SwipeActionPanel StayOpen=\"true\">\n            <!-- Content -->\n        </Alive.SwipeActionPanel>\n\n        <RemovingAnimation>\n            <Scale Factor=\"0\" Duration=\".4\" />\n        </RemovingAnimation>\n    </Panel>"
      },
      "id": {
        "id": "alive/swipeactionpanel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/swipeactionpanel",
        "href": "alive/swipeactionpanel"
      },
      "titles": {
        "indexTitle": "SwipeActionPanel",
        "fullyQualifiedIndexTitle": "Alive.SwipeActionPanel"
      }
    },
    {
      "comment": {
        "brief": "A Switch control that can be swiped.\nHas the same interface as any other @ToggleControl, such as the default @Switch.",
        "full": "A Switch control that can be swiped.\nHas the same interface as any other @ToggleControl, such as the default @Switch."
      },
      "id": {
        "id": "alive/switch",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/switch",
        "href": "alive/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Alive.Switch"
      }
    },
    {
      "comment": {
        "brief": "A PageIndicator that uses values provided by the `Label` property of [TabPage](api:alive/tabpage)\nto instantiate tabs with text labels for each page in a @PageControl or other @LinearNavigation.",
        "full": "A PageIndicator that uses values provided by the `Label` property of [TabPage](api:alive/tabpage)\nto instantiate tabs with text labels for each page in a @PageControl or other @LinearNavigation.\n\n*Note:* You can use the simpler [TabPageControl](api:alive/tabpagecontrol) in most cases,\nwhich combines a `TabBar` with a @PageControl.\n\nYou must specify a `Navigation`, which refers to the @PageControl or other @LinearNavigation\nthat contains the pages.\n\n    <DockPanel>\n        <Alive.TabBar Dock=\"Top\" Navigation=\"pageControl\" />\n        <PageControl ux:Name=\"pageControl\">\n            <Alive.TabPage Label=\"Page 1\">\n                <!-- page content -->\n            </Alive.TabPage>\n            <Alive.TabPage Label=\"Page 2\">\n                <!-- page content -->\n            </Alive.TabPage>\n            <Alive.TabPage Label=\"Page 3\">\n                <!-- page content -->\n            </Alive.TabPage>\n        </PageControl>\n    </DockPanel>"
      },
      "id": {
        "id": "alive/tabbar",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabbar",
        "href": "alive/tabbar"
      },
      "titles": {
        "indexTitle": "TabBar",
        "fullyQualifiedIndexTitle": "Alive.TabBar"
      }
    },
    {
      "comment": {
        "brief": "A @Page that exports a title for use with [TabPageControl](api:alive/tabpagecontrol) or [TabBar](api:alive/tabbar).",
        "full": "A @Page that exports a title for use with [TabPageControl](api:alive/tabpagecontrol) or [TabBar](api:alive/tabbar).\n\nThe `Label` property on each TabPage in a @PageControl or [TabPageControl](api:alive/tabpagecontrol) is used\nto generate labelled tabs for each page.\n\nSee also [PartialTabPage](api:alive/partialtabpage).\n\n    <TabPageControl>\n        <Alive.TabPage Label=\"Page 1\">\n            <!-- page content -->\n        </Alive.TabPage>\n        <Alive.TabPage Label=\"Page 2\">\n            <!-- page content -->\n        </Alive.TabPage>\n        <Alive.TabPage Label=\"Page 3\">\n            <!-- page content -->\n        </Alive.TabPage>\n    </TabPageControl>"
      },
      "id": {
        "id": "alive/tabpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabpage",
        "href": "alive/tabpage"
      },
      "titles": {
        "indexTitle": "TabPage",
        "fullyQualifiedIndexTitle": "Alive.TabPage"
      }
    },
    {
      "comment": {
        "brief": "Combines a [TabBar](api:alive/tabbar) and a @PageControl.",
        "full": "Combines a [TabBar](api:alive/tabbar) and a @PageControl.\n\n    <TabPageControl>\n        <Alive.TabPage Label=\"Page 1\">\n            <!-- page content -->\n        </Alive.TabPage>\n        <Alive.TabPage Label=\"Page 2\">\n            <!-- page content -->\n        </Alive.TabPage>\n        <Alive.TabPage Label=\"Page 3\">\n            <!-- page content -->\n        </Alive.TabPage>\n    </TabPageControl>"
      },
      "id": {
        "id": "alive/tabpagecontrol",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabpagecontrol",
        "href": "alive/tabpagecontrol"
      },
      "titles": {
        "indexTitle": "TabPageControl",
        "fullyQualifiedIndexTitle": "Alive.TabPageControl"
      }
    },
    {
      "id": {
        "id": "alive/textstyles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/textstyles",
        "href": "alive/textstyles"
      },
      "titles": {
        "indexTitle": "TextStyles",
        "fullyQualifiedIndexTitle": "Alive.TextStyles"
      }
    },
    {
      "comment": {
        "brief": "Displays a @Title and @SubTitle on top of the secondary background color.",
        "full": "Displays a @Title and @SubTitle on top of the secondary background color.\n\n    <Alive.TitlePanel\n        Title=\"Title\"\n        Subtitle=\"Subtitle\" />"
      },
      "id": {
        "id": "alive/titlepanel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/titlepanel",
        "href": "alive/titlepanel"
      },
      "titles": {
        "indexTitle": "TitlePanel",
        "fullyQualifiedIndexTitle": "Alive.TitlePanel"
      }
    },
    {
      "comment": {
        "brief": "A title with an underline that extends to the left.",
        "full": "A title with an underline that extends to the left.\n\n    <Alive.UnderlineTitle Text=\"Hello, world\" />"
      },
      "id": {
        "id": "alive/underlinetitle",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/underlinetitle",
        "href": "alive/underlinetitle"
      },
      "titles": {
        "indexTitle": "UnderlineTitle",
        "fullyQualifiedIndexTitle": "Alive.UnderlineTitle"
      }
    },
    {
      "id": {
        "id": "basic/backbutton",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/backbutton",
        "href": "basic/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Basic.BackButton"
      }
    },
    {
      "id": {
        "id": "basic/button",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/button",
        "href": "basic/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Basic.Button"
      }
    },
    {
      "id": {
        "id": "basic/navigationbar",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/navigationbar",
        "href": "basic/navigationbar"
      },
      "titles": {
        "indexTitle": "NavigationBar",
        "fullyQualifiedIndexTitle": "Basic.NavigationBar"
      }
    },
    {
      "id": {
        "id": "basic/resources",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/resources",
        "href": "basic/resources"
      },
      "titles": {
        "indexTitle": "Resources",
        "fullyQualifiedIndexTitle": "Basic.Resources"
      }
    },
    {
      "id": {
        "id": "basic/slider",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/slider",
        "href": "basic/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Basic.Slider"
      }
    },
    {
      "id": {
        "id": "basic/switch",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/switch",
        "href": "basic/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Basic.Switch"
      }
    },
    {
      "comment": {
        "brief": "A panel that contains a chart.",
        "full": "A panel that contains a chart.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plot",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plot",
        "href": "fuse/charting/plot"
      },
      "titles": {
        "indexTitle": "Plot",
        "fullyQualifiedIndexTitle": "Fuse.Charting.Plot"
      }
    },
    {
      "comment": {
        "brief": "A layout and enumeration for the axis steps of a @Plot, which is used to place labels on axes. Often used together with a @(GridLayout) for positioning.",
        "full": "A layout and enumeration for the axis steps of a @Plot, which is used to place labels on axes. Often used together with a @(GridLayout) for positioning.\n\n# Example\n\nThe following example places labels on the y-axis of a bar chart.\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <GridLayout Rows=\"1*,40\" Columns=\"40,1*\"/>\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotAxis Row=\"0\" Column=\"0\" Axis=\"Y\">\n                    <Text ux:Template=\"Label\" Alignment=\"Center\" FontSize=\"14\" Color=\"#666\"\n                        Value=\"{Plot axis.value}\"/>\n                </c:PlotAxis>\n                <c:PlotData>\n                    <c:PlotBar Row=\"0\" Column=\"1\">\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n            </c:Plot>\n        </Panel>\n    </Panel>",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotaxis",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotaxis",
        "href": "fuse/charting/plotaxis"
      },
      "titles": {
        "indexTitle": "PlotAxis",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotAxis"
      }
    },
    {
      "comment": {
        "brief": "Positions a plot bar.",
        "full": "Positions a plot bar.\n\nThis automatically sets the `X`,`Y`,`Width`,`Heigth` and `Anchor` properties on the element. The result is undefined if you override one of these values. Use a child element if you wish to make an element relative to the PlotBar placement.\n\n# Example\n\nThe following example draws a red bar chart using the `PlotBar` element and @Rectangle\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotData>\n                    <c:PlotBar>\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n            </c:Plot>\n        </Panel>\n    </Panel>",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotbar",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotbar",
        "href": "fuse/charting/plotbar"
      },
      "titles": {
        "indexTitle": "PlotBar",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotBar"
      }
    },
    {
      "comment": {
        "brief": "Common base for plot positioned elements.",
        "full": "Common base for plot positioned elements.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotelement",
        "parentId": "fuse/charting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotelement",
        "href": "fuse/charting/plotelement"
      },
      "titles": {
        "indexTitle": "PlotElement",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotElement"
      }
    },
    {
      "comment": {
        "brief": "A `Panel` positioned on the data point for a chart. This is an easy way to position an object at the correct position for the current plot data.",
        "full": "A `Panel` positioned on the data point for a chart. This is an easy way to position an object at the correct position for the current plot data.\n\nThis panel has a default of `Anchor=\"50%,50%\"`.  This can be changed with `PointAnchor`\n\nThis panel does not have any default size.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/charting/plotpoint",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotpoint",
        "href": "fuse/charting/plotpoint"
      },
      "titles": {
        "indexTitle": "PlotPoint",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotPoint"
      }
    },
    {
      "comment": {
        "brief": "Displays a backbutton",
        "full": "Displays a backbutton\n\nOnly the semantic control for backbutton. Refer to @Navigation and @GoBack for how\nto use it in navigation.\n\n## Example:\n\n    <BackButton>\n        <Clicked>\n            <GoBack />\n        </Clicked>\n    </BackButton>"
      },
      "id": {
        "id": "fuse/controls/backbutton",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/backbutton",
        "href": "fuse/controls/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Fuse.Controls.BackButton"
      }
    },
    {
      "comment": {
        "brief": "Displays a button",
        "full": "Displays a button\n\nThe default button in Fuse. Its appearance is transparent with blue text.\nTo change the look or to create a semantically specific button, create a Subclass of this Class.\nPlease note that when used inside a @NativeViewHost, this button will have the platform native appearance\nwhich might need additional styling to make it visible. For example, on iOS the default native appearance of a\nbutton is blue text on white.\n\n## Examples\n\nBy default, `Button` is drawn as blue text over a transparent background.\n\n    <Button Text=\"Click me\" />\n\nHowever, Button can also be used to render the *platform native* button control whenever possible.\nThis is done by wrapping the Button in a @NativeViewHost, as shown below.\n\n    <NativeViewHost>\n        <Button Text=\"Native button\" />\n    </NativeViewHost>\n\nHowever, we usually want a button with our own look and feel.\nIn this case, it is recommended to subclass @Panel rather than Button.\nSince you can attach a `Clicked` handler to any element, using a @Panel as the base class offers a\ngreat deal of flexibility, while removing a lot of the unnecessary complexity of the actual Button class.\n\nBelow is an example of creating your own button control with @Panel:\n\n    <Panel ux:Class=\"MyButton\" HitTestMode=\"LocalBounds\" Margin=\"4\" Color=\"#25a\">\n        <string ux:Property=\"Text\" />\n        <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" Margin=\"30,15\" />\n\n        <WhilePressed>\n            <Change this.Color=\"#138\" Duration=\"0.05\" DurationBack=\".2\" />\n        </WhilePressed>\n    </Panel>\n\n    <MyButton Text=\"Click me\" />\n\nHowever, if you want a *platform native button* that falls back to a custom look on non-mobile devices,\nyou have to subclass `Button`.\n\n    <Button ux:Class=\"MyNativeButtonWithFallback\" Margin=\"2\">\n        <Panel ux:Template=\"GraphicsAppearance\" HitTestMode=\"LocalBounds\">\n            <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n            <Rectangle CornerRadius=\"4\" Layer=\"Background\" Color=\"#25a\" />\n        </Panel>\n    </Button>\n\nWhen placed in a @NativeViewHost, the Button will attempt to initialize a *native* button control.\nIf this is not possible (e.g. if it's running on desktop), it will fall back to the template specified\nby `ux:Template=\"GraphicsAppearance\"`.`\n\n    <NativeViewHost>\n        <!-- Will be native if possible -->\n        <MyNativeButtonWithFallback Text=\"Some button\" />\n    </NativeViewHost>\n\nIf we *don't* place the Button inside a @NativeViewHost,\nthe `GraphicsAppearance` template will always be used to draw the button.\n\n    <MyNativeButtonWithFallback />"
      },
      "id": {
        "id": "fuse/controls/button",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button",
        "href": "fuse/controls/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Button"
      }
    },
    {
      "comment": {
        "brief": "Baseclass for buttons",
        "full": "Baseclass for buttons\n\nButtonBase is the undecorated baseclass for buttons in fuse. Can be used to make\nux classes for buttons that has text.\n\n## Example:\n\n    <ButtonBase ux:Class=\"GradientButton\" Margin=\"2\">\n        <Text ux:Name=\"Button_Text\" Value=\"{ReadProperty this.Text}\" Color=\"#000\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n        <Rectangle CornerRadius=\"4\" Layer=\"Background\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#0fc\" />\n                <GradientStop Offset=\"1\" Color=\"#0cf\" />\n            </LinearGradient>\n        </Rectangle>\n    </ButtonBase>"
      },
      "id": {
        "id": "fuse/controls/buttonbase",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/buttonbase",
        "href": "fuse/controls/buttonbase"
      },
      "titles": {
        "indexTitle": "ButtonBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ButtonBase"
      }
    },
    {
      "comment": {
        "brief": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.",
        "full": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.\n\nThis is no longer suitable for some devices and you should consider using @SafeEdgePanel instead.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
      },
      "id": {
        "id": "fuse/controls/clientpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/clientpanel",
        "href": "fuse/controls/clientpanel"
      },
      "titles": {
        "indexTitle": "ClientPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ClientPanel"
      }
    },
    {
      "comment": {
        "brief": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.",
        "full": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.\n\n## Usage example\n\nWe use the `Subtree` property to identify the inner visual that will receive the children.\n\n    <Container ux:Class=\"MyContainer\" Subtree=\"innerPanel\">\n        <Rectangle ux:Binding=\"Children\" CornerRadius=\"10\" Margin=\"10\">\n            <Stroke Color=\"Red\" Width=\"2\" />\n            <Panel Margin=\"10\" ux:Name=\"innerPanel\" />\n        </Rectangle>\n    </Container>\n\nNote that to add nodes that make up the container itself (e.g. decoration), we need to explicitly mark them\nwith `ux:Binding=\"Children\"`, otherwise these nodes will be added to `innerPanel`.\n\nTo use the container, we can simply do:\n\n    <MyContainer>\n        <Panel Color=\"Blue\" />\n    </MyContainer>\n\nHere, the blue panel will be placed as a child of `innerPanel`, instead of as a direct child of the\ncontainer."
      },
      "id": {
        "id": "fuse/controls/container",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/container",
        "href": "fuse/controls/container"
      },
      "titles": {
        "indexTitle": "Container",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Container"
      }
    },
    {
      "comment": {
        "brief": "Displays a component to select a date.",
        "full": "Displays a component to select a date.\n\nCurrently, the DatePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `DatePicker` can be used to select a specific date value. The type of its `Value`, `MinValue`, and `MaxValue`\nproperties are each of type `Uno.DateTime`, which is marshalled automatically to and from the JavaScript `Date` type.\nThis makes interaction between JavaScript and the `DatePicker` type seamless via databinding. If you plan to wrap\na `DatePicker` in a UX component and use a UX property to hook up to any of these values, the `Uno.DateTime` type\nshould be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `DatePicker` will assume\nincoming values are relative to UTC, and truncate the time component to midnight, effectively ignoring the time\ncomponent altogether. Similarly, values read from `DatePicker` properties will only consist of a date component at\nmidnight UTC. This makes values going to/from the `DatePicker` control easy to create and interpret consistently, but\nalso means that if a value with a time component other than midnight at UTC is written to one of `DatePicker`'s `Value`\nproperties, subsequent values read from the property may not match the written value, as the time component will have\nbeen truncated.\n\nNote that this control should not be used to deal with historic dates, as calendar/date and timestamp translation is\ninconsistent between different locales due to when and where different calendar systems were adopted. However, the\nbehavior is consistent for all dates since at least 1900 including all representable future dates.\n\n## Example\n\nThe following example shows how to set up a `DatePicker` object with a specific minimum and maximum value, and set the\nvalue from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someDate = Observable(new Date(Date.parse(\"2007-02-14T00:00:00.000Z\")));\n\n            someDate.onValueChanged(module, function(date) {\n                console.log(\"someDate changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someDate: someDate,\n\n                minDate: new Date(Date.parse(\"1950-01-01T00:00:00.000Z\")),\n                maxDate: new Date(Date.parse(\"2050-01-01T00:00:00.000Z\")),\n\n                whoYouGonnaCall: function() {\n                    someDate.value = new Date(Date.parse(\"1984-06-08T00:00:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <DatePicker Value=\"{someDate}\" MinValue=\"{minDate}\" MaxValue=\"{maxDate}\" />\n        </NativeViewHost>\n\n        <Button Text=\"Who you gonna call?\" Clicked=\"{whoYouGonnaCall}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/datepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker",
        "href": "fuse/controls/datepicker"
      },
      "titles": {
        "indexTitle": "DatePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DatePicker"
      }
    },
    {
      "id": {
        "id": "fuse/controls/datepickerbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepickerbase",
        "href": "fuse/controls/datepickerbase"
      },
      "titles": {
        "indexTitle": "DatePickerBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DatePickerBase"
      }
    },
    {
      "comment": {
        "brief": "Lays out its children by docking them to the different sides, one after the other.",
        "full": "Lays out its children by docking them to the different sides, one after the other.\n\nOne can specify which side per element by using the @Dock property like this:\n\n    <DockPanel>\n        <Rectangle Dock=\"Left\"/>\n    </DockPanel>\n\nThe @Dock property can be assigned to be either Left, Right, Top, Bottom or Fill (which is the default).\n\n    <DockPanel>\n        <Rectangle ux:Class=\"MyRectangle\" MinWidth=\"100\" MinHeight=\"200\" />\n        <MyRectangle Color=\"Red\" Dock=\"Left\"/>\n        <MyRectangle Color=\"Green\" Dock=\"Top\"/>\n        <MyRectangle Color=\"Blue\" Dock=\"Right\"/>\n        <MyRectangle Color=\"Yellow\" Dock=\"Bottom\"/>\n        <MyRectangle Color=\"Teal\" />\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/dockpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/dockpanel",
        "href": "fuse/controls/dockpanel"
      },
      "titles": {
        "indexTitle": "DockPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DockPanel"
      }
    },
    {
      "comment": {
        "brief": "A navigation control for panels that slide in from the sides of the display.",
        "full": "A navigation control for panels that slide in from the sides of the display.\n\nAdd an `Edge` property to the children to define on which edge they attach. The user can swipe from that side to reveal the panel.\n\nUse a `GoBack` inside this navigation to dismiss side-panels from UX, or use the `dismiss` method from JavaScript.\n\n## Model\n\nThe EdgeNavigator can be bound to a model with the `Pages` property. For example:\n\n   <EdgeNavigator Pages=\"{pages}\">\n       <Panel Edge=\"Left\" ux:Template=\"left\"/>\n       <Panel Edge=\"Right\" ux:Template=\"right\"/>\n       <Panel ux:Template=\"main\"/>\n   </EdgeNavigator>\n\nThen in your main model state you define `pages`\n\n   export default class MainState {\n       constructor() {\n           this.pages = [ new LeftPage(), new RightPage(), new MainPage() ]\n       }\n   }\n\n   class LeftPage {\n       constructor() {\n           this.$path = \"left\"\n       }\n   }\n\n   class RightPage {\n       constructor() {\n           this.$path = \"right\"\n       }\n   }\n\n   class MainPage {\n       constructor() {\n           this.$path = \"main\"\n       }\n   }"
      },
      "id": {
        "id": "fuse/controls/edgenavigator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/edgenavigator",
        "href": "fuse/controls/edgenavigator"
      },
      "titles": {
        "indexTitle": "EdgeNavigator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.EdgeNavigator"
      }
    },
    {
      "comment": {
        "brief": "Lays out children in a grid formation.",
        "full": "Lays out children in a grid formation.\n\n## RowCount and ColumnCount properties\n\nIf what you need is a certain number of equally sized rows and/or columns,\nyou can use the @RowCount and @ColumnCount properties.\n\n    <Grid RowCount=\"4\" ColumnCount=\"2\"/>\n\nBy default, elements in the grid are placed in the order they appear in UX, from left to right,\ntop to bottom. However, you can explicitly specify per element which grid cell they should be placed\nin using the `Row` and `Column` properties.\n\n    <Grid RowCount=\"1\" ColumnCount=\"2\">\n        <Rectangle Row=\"0\" Column=\"1\" Color=\"Red\"/>\n        <Rectangle Row=\"0\" Column=\"0\" Color=\"Blue\"/>\n    </Grid>\n\nIf you want an element to occupy multiple rows or columns,\nyou can use the `RowSpan` and `ColumnSpan` properties.\n\n    <Grid RowCount=\"2\" ColumnCount=\"2\">\n        <Rectangle ColumnSpan=\"2\" RowSpan=\"2\" Color=\"Red\"/>\n    </Grid>\n\n## Rows and Columns properties\n\nMore fine grained control of how the rows and column sizes are calculated can be achieved with the\n@Rows and @Columns properties. These properties accept a comma separated list of *grid sizes* which\ncan take on a few different forms. The values can either be absolute, relative or automatic.\n\nExample of a Grid with 3 rows of size 10, 10 and 50 points, and 3 columns, the first each occupy 20%\nof the available space and the last one occupies 60%.\n\n    <Grid Rows=\"10,10,50\" Columns=\"1*,1*,3*\"/>\n\nThe proportional column sizes here are calculated by first summing all the values (1+1+3 = 5).\nThen we divide our value by the total (1/5 = 20%, 1/5 = 20%, 3/5 = 60%).\n\nNote that proportional sizes only make sense if the grid is expanding to fill the parent panel, or\nhas a fixed size. If it is shrinking to fit it's contents the proportional rows/columns will have zero\nsize.\n\nThe following Grid has 2 rows where the first row gets the height of the tallest element in that row,\nand the second row takes up any remaining space:\n\n    <Grid Rows=\"auto,1*\" />"
      },
      "id": {
        "id": "fuse/controls/grid",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/grid",
        "href": "fuse/controls/grid"
      },
      "titles": {
        "indexTitle": "Grid",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Grid"
      }
    },
    {
      "comment": {
        "brief": "Displays a native map view.",
        "full": "Displays a native map view.\n\nThe `MapView` allows you to present annotated, interactive world-wide maps to the user using the mapping APIs native to the platform: Google Maps on Android and Apple Maps on iOS.\r\n\r\nThe `MapView` is a native control, and thus needs to be contained in a @NativeViewHost to be displayed. As with other native mobile controls, there currently isn't a `MapView` available for desktop targets.\r\n\r\n*Note:* You need to add a reference to `Fuse.Maps` in the `Packages` section of your `.unoproj`:\r\n\r\n```\r\n\"Packages\": [\r\n\t\"Fuse.Maps\",\r\n\t\"Fuse\",\r\n\t\"FuseJS\"\r\n]\r\n```\r\n\r\nGetting a `MapView` included in your app is straight forward: Simply include the node in your UX as you normally would with a native control:\r\n\r\n```XML\r\n<NativeViewHost>\r\n\t<MapView/>\r\n</NativeViewHost>\r\n```\r\n\r\nTo initialize and manipulate the map camera, use the [Latitude](api:fuse/controls/mapview/latitude), [Longitude](api:fuse/controls/mapview/longitude), [Zoom](api:fuse/controls/mapview/zoom), [Tilt](api:fuse/controls/mapview/tilt) and [Bearing](api:fuse/controls/mapview/bearing) properties, all of which are two-way bindable.\r\n`Zoom` follows Google's \"zoom levels\", which can be read about in detail [here](https://developers.google.com/maps/documentation/static-maps/intro#Zoomlevels).\r\n\r\nThe map can be further customized by setting the rendering style using the [Style](api:fuse/controls/mapview/style) property.\r\nOptions are `Normal`, `Satellite` and `Hybrid`.\r\n\r\nTo annotate the map with labelled markers, see @MapMarker\r\n\r\n## Maps on Android\r\n\r\nGoogle Maps requires a valid Google Maps API key. Follow [Google's documentation](https://developers.google.com/maps/documentation/android-api/signup) to get one set up. Once you have your key it must be added to your project file, as shown below\r\n\r\n```JSON\r\n\"Android\": {\r\n   \"Geo\": {\r\n        \"ApiKey\": \"your_key_here\"\r\n    }\r\n}\r\n```\r\n\r\nThis example displays a map with an average zoom level focused on Fuse's home in Oslo, Norway"
      },
      "id": {
        "id": "fuse/controls/mapview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/mapview",
        "href": "fuse/controls/mapview"
      },
      "titles": {
        "indexTitle": "MapView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MapView"
      }
    },
    {
      "comment": {
        "brief": "Allows you to move @Elements between different layouts using the `Placeholder` class.",
        "full": "Allows you to move @Elements between different layouts using the `Placeholder` class.\n\nThis allows us to @Move elements between different locations in the visual tree, and also switch between certain layouts on the fly.\n\n**Note:** `MultiLayoutPanel` is a good option for when you want to have different layouts based on on the value of certain data. In the cases where you are mostly interested in using different layouts as a means of creating animations, using the @Element.LayoutMaster property might be a better choice.\n\n# Example\nThis example shows a simple 3-choice Selection which uses a `MultiLayoutPanel` together with `LayoutAnimation` to animate an indicator for the selected option:\n\n    <Panel Alignment=\"Center\" Width=\"200\" Height=\"50\" >\n        <MultiLayoutPanel ux:Name=\"multiLayout\">\n            <Grid ColumnCount=\"3\">\n                <Panel ux:Name=\"offPanel\">\n                    <Placeholder>\n                        <Panel ux:Name=\"pointer\" Color=\"#2196F3\" Width=\"50\" Height=\"2\">\n                            <LayoutAnimation>\n                                <Move X=\"1\" Y=\"1\" RelativeTo=\"LayoutChange\" Duration=\".4\" Easing=\"QuadraticInOut\" />\n                            </LayoutAnimation>\n                        </Panel>\n                    </Placeholder>\n                    <Text TextAlignment=\"Center\">Off</Text>\n                    <Clicked>\n                    <Set multiLayout.LayoutElement=\"offPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"standbyPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">Standby</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"standbyPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"onPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">On</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"onPanel\" />\n                    </Clicked>\n                </Panel>\n            </Grid>\n        </MultiLayoutPanel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/multilayoutpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/multilayoutpanel",
        "href": "fuse/controls/multilayoutpanel"
      },
      "titles": {
        "indexTitle": "MultiLayoutPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MultiLayoutPanel"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationbar",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationbar",
        "href": "fuse/controls/navigationbar"
      },
      "titles": {
        "indexTitle": "NavigationBar",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationBar"
      }
    },
    {
      "comment": {
        "brief": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation.",
        "full": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation."
      },
      "id": {
        "id": "fuse/controls/navigationcontrol",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationcontrol",
        "href": "fuse/controls/navigationcontrol"
      },
      "titles": {
        "indexTitle": "NavigationControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControl"
      }
    },
    {
      "comment": {
        "brief": "General-purpose navigation container with on-demand instantiation and recycling of pages.",
        "full": "General-purpose navigation container with on-demand instantiation and recycling of pages.\n\n> Note: It is recommended that you first read the [Navigation guide](/docs/navigation/navigation) for a full overview of Fuse's navigation system.\r\n\r\n## Pages\r\n\r\n`Navigator` takes a collection of [templates](/docs/basics/creating-components#templates-ux-template) as its children.\r\nThis allows it to instantiate and recycle pages as it needs.\r\n\r\nYou can declare a node as a template by specifying the `ux:Template` attribute. The path of the route is matched to the `ux:Template` value to select a template.\r\n\r\n\t<Page ux:Template=\"matchPath\">\r\n\r\nYou can read more about templates [here](/docs/basics/creating-components#templates-ux-template).\r\n\r\nNon-template pages can also be used. The `Name` of the page will be used to match the path:\r\n\r\n\t<Page Name=\"matchPath\">\r\n\t\r\nThese pages always just have the one instance, will always be reused, and will never be removed. Otherwise they function the same as the template pages.\r\n\r\nHere are some general rules that will you help decide whether you want to use a template or non-template page:\r\n\r\n- If you need transitions between pages with the same path, but different parameter, then use a template.\r\n- If you have pages that impact performance even when inactive, or for other reasons should be removed when unused, then use a template.\r\n- If you have a page that should always exist to preserve state, or is very frequently navigated to, use a non-template.\r\n\r\nNote that templates and non-templates can be mixed within one `Navigator`.\r\n\r\n## Transitions\r\n\r\nNavigator comes with a set of default transitions that match the behavior of\r\n[`push()`](/docs/fuse/navigation/router/push_0f0d575d),\r\n[`goBack()`](/docs/fuse/navigation/router/goback_0f0d575d) and\r\n[`goto()`](/docs/fuse/navigation/router/goto_0f0d575d).\r\n\r\nTo have complete control over page transitions use the @PageView class. It works just like a `Navigator` but has no standard transitions or state changes.\r\n\r\nWhen using custom transitions be sure to add a @ReleasePage action. This instructs the `Navigator` and `PageView` on when it can reuse, discard, or add the page to its cache.\r\n\r\n## Example\r\n\t\r\nThe following example illustrates a basic navigation setup using a @Router and @Navigator.\r\nFor a complete introduction and proper examples of Fuse's navigation system, see the [Navigation guide](/docs/navigation/navigation).\r\n\t\r\n\t<JavaScript>\r\n\t\tmodule.exports = {\r\n\t\t\tgotoFirst: function() { router.goto(\"firstPage\"); },\r\n\t\t\tgotoSecond: function() { router.goto(\"secondPage\"); }\r\n\t\t};\r\n\t</JavaScript>\r\n\r\n\t<Router ux:Name=\"router\" />\r\n\r\n\t<DockPanel>\r\n\t\t<Navigator DefaultPath=\"firstPage\">\r\n\t\t\t<Page ux:Template=\"firstPage\">\r\n\t\t\t\t<Text Alignment=\"Center\">This is the first page.</Text>\r\n\t\t\t</Page>\r\n\t\t\t<Page ux:Template=\"secondPage\">\r\n\t\t\t\t<Text Alignment=\"Center\">This is the second page.</Text>\r\n\t\t\t</Page>\r\n\t\t</Navigator>\r\n\t\t\r\n\t\t<Grid Dock=\"Bottom\" Columns=\"1*,1*\">\r\n\t\t\t<Button Text=\"First page\" Padding=\"20\" Clicked=\"{gotoFirst}\" />\r\n\t\t\t<Button Text=\"Second page\" Padding=\"20\" Clicked=\"{gotoSecond}\" />\r\n\t\t</Grid>\r\n\t</DockPanel>\r\n\t\r\n## Navigation Order\r\n\r\nThe `Navigator` uses discrete page progress changes while navigating. The active page will have progress `0`. If a page is pushed it will start at `1` and be switched immediately to `0`. The previously active page will become `-1`. A \"back\" operation will reverse the transition.\r\n\r\nOnly progresses `-1`, `0`, and `1` are used. Further distance is not calculated, nor are partial values possible.\r\n\r\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/controls/navigator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigator",
        "href": "fuse/controls/navigator"
      },
      "titles": {
        "indexTitle": "Navigator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Navigator"
      }
    },
    {
      "comment": {
        "brief": "Deprecated, for backwards compatibility",
        "full": "Deprecated, for backwards compatibility"
      },
      "id": {
        "id": "fuse/controls/number",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/number",
        "href": "fuse/controls/number"
      },
      "titles": {
        "indexTitle": "Number",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Number"
      }
    },
    {
      "comment": {
        "brief": "Represents a page that participates in navigation.",
        "full": "Represents a page that participates in navigation.\n\nYou generally want to use this as the base class when implementing your page views, although any @Visual can be used.\n\nSee the [navigation guide](/docs/navigation/navigation) for an introductory guide to implementing navigation in your app.\n\n## Example\n\nThe following example illustrates subclassing @Page and using it in a @PageControl.\n\n    <Page ux:Class=\"MyPage\">\n        <Text Alignment=\"Center\">This is a page!</Text>\n    </Page>\n\n    <PageControl>\n        <MyPage />\n        <MyPage />\n    </PageControl>\n\n## Remarks\n\n@Page exposes a local @Uno.UX.Resource \"Title\", which can be set using the @Title property."
      },
      "id": {
        "id": "fuse/controls/page",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/page",
        "href": "fuse/controls/page"
      },
      "titles": {
        "indexTitle": "Page",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Page"
      }
    },
    {
      "comment": {
        "brief": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.",
        "full": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.\n\n# Examples\n\nThe following example illustrates the default behavior of `PageControl`, which is to slide the pages in response to swipe gestures:\n\n    <PageControl>\n        <Panel Background=\"Red\"/>\n        <Panel Background=\"Blue\"/>\n    </PageControl>\n\n`PageControl` is a router outlet, meaning that it can be controlled by a @Router.\nYou can disable this behavior by setting the @IsRouterOutlet property to `false`.\n\n    <JavaScript>\n        module.exports = {\n            gotoPage1: function() { router.goto(\"page1\"); },\n            gotoPage2: function() { router.goto(\"page2\"); },\n            gotoPage3: function() { router.goto(\"page3\"); }\n        };\n    </JavaScript>\n\n    <Router ux:Name=\"router\" />\n\n    <PageControl>\n        <Panel ux:Name=\"page1\" Color=\"#e74c3c\" Clicked=\"{gotoPage2}\" />\n        <Panel ux:Name=\"page2\" Color=\"#2ecc71\" Clicked=\"{gotoPage3}\" />\n        <Panel ux:Name=\"page3\" Color=\"#3498db\" Clicked=\"{gotoPage1}\" />\n    </PageControl>\n\nBy using data binding, you can set the currently active page by `Name` using the `Active` property.\nIn the following example, We have three pages and a button that returns the user to the first page.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            var currentPage = Observable(\"page1\");\n            function clickHandler() {\n                currentPage.value = \"page1\";\n            }\n            module.exports = {\n                clickHandler: clickHandler,\n                currentPage: currentPage\n            };\n        </JavaScript>\n        <PageControl Active=\"{currentPage}\">\n            <Panel Name=\"page1\" Background=\"Red\"/>\n            <Panel Name=\"page2\" Background=\"Green\"/>\n            <Panel Name=\"page3\" Background=\"Blue\"/>\n        </PageControl>\n        <Button Text=\"Home\" Clicked=\"{clickHandler}\" Dock=\"Bottom\"/>\n    </DockPanel>\n\nTake a look at the [Slides](/examples/page-control) example to see how this can be used in practice.\n\n## Navigation Order\n\nThe pages of a `PageControl` are ordered front to back, with the first child being in the front. Going forward means going towards the first child and going backwards means going towards the last child.\n\n`PageControl` uses continous navigation between pages (not discrete changes).\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/controls/pagecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pagecontrol",
        "href": "fuse/controls/pagecontrol"
      },
      "titles": {
        "indexTitle": "PageControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageControl"
      }
    },
    {
      "comment": {
        "brief": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.",
        "full": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.\n\nThe @ActivatingAnimation animator can be used to animate a `Dot` when its corresponding page is active.\n\n# Example\n\nThe following example shows the use of `PageIndicator` to indicate the current progress in a @PageControl navigation, by scaling the rectangle indicator representing the current page by a `Factor` of 1.3.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            module.exports.pages = Observable(\"#FF0000\", \"#00FF00\", \"#0000FF\");\n        </JavaScript>\n        <PageControl ux:Name=\"nav\">\n            <Each Items=\"{pages}\">\n                <Page Color=\"data()\">\n\n                </Page>\n            </Each>\n        </PageControl>\n        <PageIndicator Dock=\"Bottom\" Navigation=\"nav\" Alignment=\"Center\">\n            <Rectangle ux:Template=\"Dot\" Width=\"30\" Height=\"30\" Margin=\"10\" Color=\"#555\">\n                <ActivatingAnimation>\n                    <Scale Factor=\"1.3\" />\n                </ActivatingAnimation>\n            </Rectangle>\n        </PageIndicator>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/pageindicator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicator",
        "href": "fuse/controls/pageindicator"
      },
      "titles": {
        "indexTitle": "PageIndicator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicator"
      }
    },
    {
      "id": {
        "id": "fuse/controls/pageindicatordot",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicatordot",
        "href": "fuse/controls/pageindicatordot"
      },
      "titles": {
        "indexTitle": "PageIndicatorDot",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicatorDot"
      }
    },
    {
      "comment": {
        "brief": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.",
        "full": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.\n\n`<PageView />` is equivalent to the following:\n\n    <Navigator Transition=\"None\" GotoState=\"Unchanged\" />"
      },
      "id": {
        "id": "fuse/controls/pageview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageview",
        "href": "fuse/controls/pageview"
      },
      "titles": {
        "indexTitle": "PageView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageView"
      }
    },
    {
      "comment": {
        "brief": "PhotoPreview",
        "full": "PhotoPreview\n\nThis element provides a fast path for previewing photos\ncaptured with `CameraView` inside a `NativeViewHost`.\n\nA `PhotoPreview` has to be connected to `CameraView`. Whenever\na photo is captured it will be loaded by the connected `PhotoPreview`\nimmediately. The `PhotoPreview` can also be connected to a\n`CameraView.PhotoLoaded` trigger which can be used to respond\nwhen the photo is ready.\n\nExample:\n\n    <NativeViewHost>\n        <Panel ux:Name=\"previewPanel\" Visibility=\"Hidden\">\n            <Button Text=\"DISMISS\" Alignment=\"Bottom\" Margin=\"10\">\n                <Clicked>\n                    <Set previewPanel.Visibility=\"Hidden\" />\n                    <Set cameraPanel.Visibility=\"Visible\" />\n                </Clicked>\n            </Button>\n            <PhotoPreview ux:Name=\"photoPreview\" CameraView=\"cameraView\" PreviewStretchMode=\"UniformToFill\" />\n        </Panel>\n        <Panel ux:Name=\"cameraPanel\">\n            <CameraView ux:Name=\"cameraView\" PreviewStretchMode=\"UniformToFill\" ClipToBounds=\"true\" />\n        </Panel>\n        <CameraView.PhotoLoaded PhotoPreview=\"photoPreview\">\n            <Set previewPanel.Visibility=\"Visible\" />\n            <Set cameraPanel.Visibility=\"Hidden\" />\n        </CameraView.PhotoLoaded>\n    </NativeViewHost>"
      },
      "id": {
        "id": "fuse/controls/photopreview",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreview",
        "href": "fuse/controls/photopreview"
      },
      "titles": {
        "indexTitle": "PhotoPreview",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreview"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photopreviewbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreviewbase",
        "href": "fuse/controls/photopreviewbase"
      },
      "titles": {
        "indexTitle": "PhotoPreviewBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreviewBase"
      }
    },
    {
      "comment": {
        "brief": "Baseclass for controls that contains a range value",
        "full": "Baseclass for controls that contains a range value\n\nThis is the baseclass for @Controls that hold a range value. For example @Slider.\n\nRangeControl is what you want to use if your component will hold a range value,\nRangeControl support for example @ProgressAnimation which makes it nice to use in\nanimation.\n\n## Example\n\n    <StackPanel>\n\n        <RangeControl ux:Class=\"CustomSlider\" Padding=\"16,2,16,2\" Margin=\"2\" >\n            <LinearRangeBehavior />\n            <Panel>\n                <Circle Anchor=\"50%,50%\" ux:Name=\"thumb\" Alignment=\"Left\" Color=\"#ffffffee\" Width=\"28\" Height=\"28\" />\n            </Panel>\n            <Rectangle Layer=\"Background\" Color=\"#aaaaaacc\" CornerRadius=\"45\" />\n            <ProgressAnimation>\n                <Move Target=\"thumb\" X=\"1\" RelativeTo=\"ParentSize\" />\n            </ProgressAnimation>\n        </RangeControl>\n\n        <CustomSlider />\n\n    </StackPanel>\n\n## Available RangeControl classes\n\n[subclass Fuse.Controls.RangeControl]"
      },
      "id": {
        "id": "fuse/controls/rangecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rangecontrol",
        "href": "fuse/controls/rangecontrol"
      },
      "titles": {
        "indexTitle": "RangeControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl"
      }
    },
    {
      "id": {
        "id": "fuse/controls/rangecontrol2d",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rangecontrol2d",
        "href": "fuse/controls/rangecontrol2d"
      },
      "titles": {
        "indexTitle": "RangeControl2D",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl2D"
      }
    },
    {
      "comment": {
        "brief": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.",
        "full": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
      },
      "id": {
        "id": "fuse/controls/safeedgepanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/safeedgepanel",
        "href": "fuse/controls/safeedgepanel"
      },
      "titles": {
        "indexTitle": "SafeEdgePanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.SafeEdgePanel"
      }
    },
    {
      "comment": {
        "brief": "Displays a slider",
        "full": "Displays a slider\n\nSlider is a @RangeControl with a simple slider look. This @Control\nwill get the platform native look on mobile export targets when\nused in a @NativeViewHost.\n\n## Example:\n\n    <StackPanel>\n        <Slider Value=\"50\" Minimum=\"0\" Maximum=\"100\" />\n        <NativeViewHost>\n            <Slider Value=\"0.25\" Minimum=\"0\" Maximum=\"1\" />\n        </NativeViewHost>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/slider",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/slider",
        "href": "fuse/controls/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Slider"
      }
    },
    {
      "comment": {
        "brief": "Stacks children vertically (default) or horizontally.",
        "full": "Stacks children vertically (default) or horizontally.\n\nThe default layout is a vertical stack, but one can use the Orientation property to specify that the stack should be laid out horizontally.\n\n    <StackPanel Orientation=\"Horizontal\">\n        ... elements ...\n    </StackPanel>\n\nYou can use the @ItemSpacing property to make some space between elements. It differs from setting Margin on each child, in that it only\nadjusts the space directly between the elements, not the space around each of them.\n\n## Example\n\nThe following example shows three Panels in a StackPanel, spaced using the ItemSpacing property:\n\n    <StackPanel ItemSpacing=\"20\">\n        <Panel Height=\"100\" Background=\"Red\"/>\n        <Panel Height=\"100\" Background=\"Green\"/>\n        <Panel Height=\"100\" Background=\"Blue\"/>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/stackpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/stackpanel",
        "href": "fuse/controls/stackpanel"
      },
      "titles": {
        "indexTitle": "StackPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.StackPanel"
      }
    },
    {
      "comment": {
        "brief": "Displays a switch",
        "full": "Displays a switch\n\nA switch implemented with @ToggleControl. The platform\nnative switch will be displayed if used in NativeViewHost.\n\n## Example\n\n    <StackPanel>\n        <Switch ux:Name=\"_sw\">\n            <WhileTrue Value=\"{ReadProperty _sw.Value}\">\n                <DebugAction Message=\"Switch.Value = true\" />\n            </WhileTrue>\n        </Switch>\n        <NativeViewHost>\n            <Switch />\n        </NativeViewHost>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/switch",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/switch",
        "href": "fuse/controls/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Switch"
      }
    },
    {
      "comment": {
        "brief": "Displays a component to select a time.",
        "full": "Displays a component to select a time.\n\nCurrently, the TimePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `TimePicker` can be used to select a specific time value. The type of its `Value` property is `Uno.DateTime`,\nwhich is marshalled automatically to and from the JavaScript `Date` type. This makes interaction between JavaScript\nand the `TimePicker` type seamless via databinding. If you plan to wrap a `TimePicker` in a UX component and use a\nUX property to hook up this value, the `Uno.DateTime` type should be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `TimePicker` will assume\nincoming values are relative to UTC, and truncate the date component to the Unix epoch (1 Jan 1970), effectively\nignoring the date component altogether. Similarly, values read from `TimePicker` properties will only consist of a time\ncomponent at on 1 Jan 1970. This makes values going to/from the `TimePicker` control easy to create and interpret\nconsistently, but also means that if a value with a date component other than the unix epoch is written to TimePicker`'s\n`Value` property, subsequent values read from the property may not match the written value, as the date component will\nhave been truncated.\n\nYou should avoid modifying the `TimePicker` values programmatically while the control has focus, as this is known to\nhave some issues on some Android devices (particularly ones which use the new `clock` appearance prior to Android 7).\n\n## Example\n\nThe following example shows how to set up a `TimePicker` object and set the value from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someTime = Observable(new Date(Date.parse(\"2007-02-14T12:34:56.000Z\")));\n\n            someTime.onValueChanged(module, function(date) {\n                console.log(\"someTime changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someTime: someTime,\n\n                timeToGetCracking: function() {\n                    someTime.value = new Date(Date.parse(\"1970-01-01T13:37:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <TimePicker Value=\"{someTime}\" Is24HourView=\"true\" />\n        </NativeViewHost>\n\n        <Button Text=\"Time to get cracking!\" Clicked=\"{timeToGetCracking}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/timepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker",
        "href": "fuse/controls/timepicker"
      },
      "titles": {
        "indexTitle": "TimePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TimePicker"
      }
    },
    {
      "id": {
        "id": "fuse/controls/timepickerbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepickerbase",
        "href": "fuse/controls/timepickerbase"
      },
      "titles": {
        "indexTitle": "TimePickerBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TimePickerBase"
      }
    },
    {
      "comment": {
        "brief": "Panel that contains a toggleable value",
        "full": "Panel that contains a toggleable value\n\nPanel type that is suitable for making toggleable semantic controls,\nlike Switch, CheckBox, ToggleButton etc.\n\n## Example\n\n    <ToggleControl ux:Class=\"CheckBox\" BoxSizing=\"FillAspect\" Aspect=\"1\" Margin=\"2\" HitTestMode=\"LocalBounds\" Width=\"48\" Height=\"48\">\n        <Rectangle Color=\"#999\" Margin=\"4\" ux:Name=\"_toggledBox\" Opacity=\"0\" />\n        <WhileTrue Value=\"{ReadProperty this.Value}\">\n            <Change _toggledBox.Opacity=\"1\" Duration=\"0.15\" Easing=\"CubicOut\" EasingBack=\"CubicIn\" />\n        </WhileTrue>\n        <Rectangle Layer=\"Background\">\n            <Stroke Color=\"#000\" />\n        </Rectangle>\n        <Clicked>\n            <Toggle Target=\"this\" />\n        </Clicked>\n    </ToggleControl>"
      },
      "id": {
        "id": "fuse/controls/togglecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/togglecontrol",
        "href": "fuse/controls/togglecontrol"
      },
      "titles": {
        "indexTitle": "ToggleControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ToggleControl"
      }
    },
    {
      "comment": {
        "brief": "Displays a video.",
        "full": "Displays a video.\n\n`Video` allows playback of video from file or stream through its properties `File` and `Url` respectively.\nIt is similar to Image; they share the properties `StretchMode`, `StretchDirection` and `ContentAlignment` and they work in the same way for both classes.\n\n## Useful properties\n\nVideo comes with a set of properties that can be used to configure it or control it, in addition to the properties shared with Image:\n\n- `Volume`: range from 0.0 to 1.0, default is 1.0\n- `Duration`: the duration of the video in seconds\n- `Position`: the current position of the video in seconds\n- `IsLooping`: a bool specifying if the video should loop or not, default is false\n\n## Useful triggers that can be used with `Video`\n\n    <Video>\n        <WhilePlaying />    <!-- Active while the video is playing -->\n        <WhilePaused />     <!-- Active while the video is paused -->\n        <WhileCompleted />  <!-- Active while the video is done playing -->\n        <WhileLoading />    <!-- Active while the video is loading -->\n        <WhileFailed />     <!-- Active if the video failed to load or an error occured -->\n    </Video>\n\n## Useful actions that can be used to control `Video`\n\nFuse comes with a set of actions that can be used to control video playback. They all have a common `Target` property that specifies which `Video` element they control.\n\n    <Pause />                   <!-- Pauses playback, leaving the current position as-is -->\n    <Stop />                    <!-- Stops playback and returns to the beginning of the video -->\n    <Resume />                  <!-- Resumes playback from the current position -->\n\n## Supported formats\n\n`Video` is implemented by using the videodecoder provided by the export target and therefore supports whatever the platform supports. Be aware that Windows, OS X, Android and iOS might not share support for some formats\n\n- [Android supported formats](https://developer.android.com/guide/appendix/media-formats.html)\n- [iOS and OS X supported formats (found under 'public.movie')](https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html)\n- [Windows supported formats](https://msdn.microsoft.com/en-us/library/cc189080%28v=vs.95%29.aspx?f=255&MSPPError=-2147217396)\n\n## Playing from the local file system\n\nVideos can also be played from the local file system of the device the app is running on. This can be done by prepending `file://` to the absolute path of the video:\n\n    <Video File=\"file:///data/data/com.fuse.app/video.mp4\" />\n\nNotice the three slashes at the start. This is due to unix file system paths always beginning with a `/`\n\n## Example\n\nThe following example shows how to play a video, display its playback progress using @ProgressAnimation, and pause/resume the video using the @Pause and @Resume animators.\n\n    <DockPanel>\n        <Video ux:Name=\"video\" Dock=\"Fill\" File=\"fuse_video.mp4\" IsLooping=\"true\" StretchMode=\"UniformToFill\">\n            <ProgressAnimation>\n                <Change progressBar.Width=\"100\" />\n            </ProgressAnimation>\n        </Video>\n        <Rectangle ux:Name=\"progressBar\" Dock=\"Bottom\" Fill=\"#f00\" Width=\"0%\" Height=\"10\" />\n        <Grid Dock=\"Bottom\" ColumnCount=\"2\" RowCount=\"1\">\n            <Button Text=\"Play\">\n                <Clicked>\n                    <Resume Target=\"video\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Pause\">\n                <Clicked>\n                    <Pause Target=\"video\" />\n                </Clicked>\n            </Button>\n        </Grid>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/video",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/video",
        "href": "fuse/controls/video"
      },
      "titles": {
        "indexTitle": "Video",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Video"
      }
    },
    {
      "comment": {
        "brief": "Displays web content natively on android and iOS.",
        "full": "Displays web content natively on android and iOS.\n\nAs the WebView is native only, it needs to be contained in a @NativeViewHost.\n\nThe WebView can be used to present web content either over the http protocol or by loading HTML as a string, and hooks into some useful triggers for building a customized browsing experience, such as @PageBeginLoading, @WhilePageLoading and @PageLoaded.\nNavigation triggers like @GoBack and @GoForward are complemented with WebView-specific ones, like @Reload, @LoadUrl and @LoadHtml. It can also be used to drive a @ProgressAnimation.\n\nThe @EvaluateJS trigger is noteworthy, since it allows arbitrary JavaScript to be run in the WebView's context and the resulting data be fed back into Fuse:\n\n```XML\n<App Background=\"#333\">\n    <JavaScript>\n            module.exports = {\n                onPageLoaded : function(res) {\n                    console.log(\"WebView arrived at \"+ JSON.parse(res.json).url);\n            }\n        };\n    </JavaScript>\n    <DockPanel>\n        <StatusBarBackground Dock=\"Top\"/>\n        <NativeViewHost>\n            <WebView Dock=\"Fill\" Url=\"http://www.google.com\">\n                <PageLoaded>\n                    <EvaluateJS Handler=\"{onPageLoaded}\">\n                        var result = {\n                            url : document.location.href\n                        };\n                        return result;\n                    </EvaluateJS>\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n\n        <BottomBarBackground Dock=\"Bottom\" />\n    </DockPanel>\n</App>\n```\n\nWebViews can also be fed raw HTML to display by wrapping an @HTML node or via the @LoadHtml trigger action:\n\n`<LoadHtml TargetNode=\"myWebView\" BaseUrl=\"http://my.domain\" Source=\"{html}\"/>`"
      },
      "id": {
        "id": "fuse/controls/webview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/webview",
        "href": "fuse/controls/webview"
      },
      "titles": {
        "indexTitle": "WebView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.WebView"
      }
    },
    {
      "comment": {
        "brief": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.",
        "full": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.\n\nYou can specify which direction the elements are laid out in by assigning the `FlowDirection` property.\nFlowDirection can either be LeftToRight or RightToLeft.\n\nThe following `WrapPanel` lays out its children horizontally from right to left.\n\n    <WrapPanel FlowDirection=\"RightToLeft\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nThe `Orientation` property can be used to make a vertical WrapPanel like so:\n\n    <WrapPanel Orientation=\"Vertical\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nYou can also specify the maximum area the `WrapPanel` will allocate an element by using the `ItemWidth` and `ItemHeight` properties."
      },
      "id": {
        "id": "fuse/controls/wrappanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/wrappanel",
        "href": "fuse/controls/wrappanel"
      },
      "titles": {
        "indexTitle": "WrapPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.WrapPanel"
      }
    },
    {
      "comment": {
        "brief": "Bootstrapper for ux:Test",
        "full": "Bootstrapper for ux:Test\n\nThis class does not serve any general-purpose purpose, and\nshouldn't be used by applications.",
        "attributes": {
          "advanced": true,
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/testing/testrootpanel",
        "parentId": "fuse/testing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/testing/testrootpanel",
        "href": "fuse/testing/testrootpanel"
      },
      "titles": {
        "indexTitle": "TestRootPanel",
        "fullyQualifiedIndexTitle": "Fuse.Testing.TestRootPanel"
      }
    }
  ]
}