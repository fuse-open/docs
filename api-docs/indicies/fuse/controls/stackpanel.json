{
  "root": {
    "id": {
      "id": "fuse/controls/stackpanel",
      "parentId": "fuse/controls",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/stackpanel",
      "href": "fuse/controls/stackpanel"
    },
    "titles": {
      "indexTitle": "StackPanel",
      "fullyQualifiedIndexTitle": "Fuse.Controls.StackPanel"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "A row of partially overlapping [Bubbles](api:alive/bubble).",
        "full": "A row of partially overlapping [Bubbles](api:alive/bubble).\n\n    <Alive.Bubbles>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image1.jpg\" />\n        </Alive.Bubble>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image2.jpg\" />\n        </Alive.Bubble>\n        <Alive.Bubble>\n            <Alive.ImageFill File=\"image3.jpg\" />\n        </Alive.Bubble>\n    </Alive.Bubbles>"
      },
      "id": {
        "id": "alive/bubbles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubbles",
        "href": "alive/bubbles"
      },
      "titles": {
        "indexTitle": "Bubbles",
        "fullyQualifiedIndexTitle": "Alive.Bubbles"
      }
    },
    {
      "comment": {
        "brief": "A @StackPanel with the right margins and spacing for text content in a Card.",
        "full": "A @StackPanel with the right margins and spacing for text content in a Card.\n\n    <Alive.Card>\n        <Alive.CardBody>\n            <Alive.Title>Lorem ipsum</Alive.Title>\n            <Alive.Body>Lorem ipsum dolor sit amet...</Alive.Body>\n        </Alive.CardBody>\n    </Alive.Card>"
      },
      "id": {
        "id": "alive/cardbody",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardbody",
        "href": "alive/cardbody"
      },
      "titles": {
        "indexTitle": "CardBody",
        "fullyQualifiedIndexTitle": "Alive.CardBody"
      }
    },
    {
      "comment": {
        "brief": "A striped list of items, with optional Adding/Removing/LayoutAnimations.",
        "full": "A striped list of items, with optional Adding/Removing/LayoutAnimations.\n\nListView takes its items directly as a property.\n\n**Note:** `Items` must be an @Observable.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        exports.tasks = Observable(\n            { task: \"Groceries\" },\n            { task: \"Finish TPS report\" },\n            { task: \"Purchase boat\" }\n        );\n    </JavaScript>\n\n    <Alive.ListView Items=\"{tasks}\">\n        <Panel Height=\"80\">\n            <Alive.Body Value=\"{task}\" Alignment=\"Center\" />\n        </Panel>\n    </Alive.ListView>\n\nListView applies @AddingAnimation, @RemovingAnimation and @LayoutAnimation to each element by default.\nThis behavior can be disabled using the `IsAnimated` property.\n\n    <Alive.ListView IsAnimated=\"false\" Items=\"{data}\">"
      },
      "id": {
        "id": "alive/listview",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listview",
        "href": "alive/listview"
      },
      "titles": {
        "indexTitle": "ListView",
        "fullyQualifiedIndexTitle": "Alive.ListView"
      }
    },
    {
      "comment": {
        "brief": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.",
        "full": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.\n\n**Note:** StickyHeader *must* be placed directly inside the ScrollView's root element.\nThis is because `StickyHeader` calculates its own position relative to its parent.\n\n    <ScrollView>\n        <StackPanel>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\">\n                    <Alive.Title Margin=\"15\">Header</Alive.Title>\n\n                    <StackPanel ItemSpacing=\"20\" Margin=\"20\">\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                        <Alive.Body>Content</Alive.Body>\n                    </StackPanel>\n                </Panel>\n            </Alive.StickyHeader>\n        </StackPanel>\n    </ScrollView>\n\n[MediaScroller](api:alive/mediascroller) wraps a StackPanel around its children,\nand so any StickyHeader must be a direct child of the `MediaScroller` itself.\n\n    <Alive.MediaScroller>\n        <Panel ux:Binding=\"Media\" />\n\n        <Alive.StickyHeader>\n            <Panel ux:Binding=\"Header\">\n                <Alive.Title Margin=\"15\">Header</Alive.Title>\n\n                <!-- content -->\n            </Panel>\n        </Alive.StickyHeader>\n    </Alive.MediaScroller>\n\nSee also @StickyHeaderAnimation"
      },
      "id": {
        "id": "alive/stickyheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheader",
        "href": "alive/stickyheader"
      },
      "titles": {
        "indexTitle": "StickyHeader",
        "fullyQualifiedIndexTitle": "Alive.StickyHeader"
      }
    },
    {
      "comment": {
        "brief": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.",
        "full": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.\n\nThe @ActivatingAnimation animator can be used to animate a `Dot` when its corresponding page is active.\n\n# Example\n\nThe following example shows the use of `PageIndicator` to indicate the current progress in a @PageControl navigation, by scaling the rectangle indicator representing the current page by a `Factor` of 1.3.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            module.exports.pages = Observable(\"#FF0000\", \"#00FF00\", \"#0000FF\");\n        </JavaScript>\n        <PageControl ux:Name=\"nav\">\n            <Each Items=\"{pages}\">\n                <Page Color=\"data()\">\n\n                </Page>\n            </Each>\n        </PageControl>\n        <PageIndicator Dock=\"Bottom\" Navigation=\"nav\" Alignment=\"Center\">\n            <Rectangle ux:Template=\"Dot\" Width=\"30\" Height=\"30\" Margin=\"10\" Color=\"#555\">\n                <ActivatingAnimation>\n                    <Scale Factor=\"1.3\" />\n                </ActivatingAnimation>\n            </Rectangle>\n        </PageIndicator>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/pageindicator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicator",
        "href": "fuse/controls/pageindicator"
      },
      "titles": {
        "indexTitle": "PageIndicator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicator"
      }
    }
  ]
}