{
  "root": {
    "id": {
      "id": "fuse/triggers/whiletrigger",
      "parentId": "fuse/triggers",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/triggers/whiletrigger",
      "href": "fuse/triggers/whiletrigger"
    },
    "titles": {
      "indexTitle": "WhileTrigger",
      "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrigger"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/darktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/darktheme",
        "href": "alive/darktheme"
      },
      "titles": {
        "indexTitle": "DarkTheme",
        "fullyQualifiedIndexTitle": "Alive.DarkTheme"
      }
    },
    {
      "id": {
        "id": "alive/fallbacktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/fallbacktheme",
        "href": "alive/fallbacktheme"
      },
      "titles": {
        "indexTitle": "FallbackTheme",
        "fullyQualifiedIndexTitle": "Alive.FallbackTheme"
      }
    },
    {
      "id": {
        "id": "alive/lighttheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/lighttheme",
        "href": "alive/lighttheme"
      },
      "titles": {
        "indexTitle": "LightTheme",
        "fullyQualifiedIndexTitle": "Alive.LightTheme"
      }
    },
    {
      "id": {
        "id": "alive/themebase",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/themebase",
        "href": "alive/themebase"
      },
      "titles": {
        "indexTitle": "ThemeBase",
        "fullyQualifiedIndexTitle": "Alive.ThemeBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollview/defaulttrigger",
        "parentId": "fuse/controls/scrollview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview/defaulttrigger",
        "href": "fuse/controls/scrollview/defaulttrigger"
      },
      "titles": {
        "indexTitle": "DefaultTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DefaultTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "href": "fuse/controls/navigationinternal/blockinputwhilenavigating"
      },
      "titles": {
        "indexTitle": "BlockInputWhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.BlockInputWhileNavigating"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "href": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze"
      },
      "titles": {
        "indexTitle": "PageWhileNavigatingFreeze",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.PageWhileNavigatingFreeze"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/whileclickertrigger",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileclickertrigger",
        "href": "fuse/gestures/whileclickertrigger"
      },
      "titles": {
        "indexTitle": "WhileClickerTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileClickerTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while at least one pointer is pressed on a visual.",
        "full": "Active while at least one pointer is pressed on a visual.\n\nIf `Capture` is `true` then this behaves more like a normal gesture and captures the pointer.\nMoving the pointer away from the element will cause the trigger to deactivate, but another visual will be prevented from capturing it.\nThis should be used when you wish to track the same pressing status as a @Clicked gesture.\n\n# Example\nIn this example, a panel will double in size when it is pressed:\n\n    <Panel Width=\"50\" Height=\"50\">\n        <WhilePressed>\n            <Scale Factor=\"2\" Duration=\"0.2\"/>\n        </WhilePressed>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whilepressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whilepressed",
        "href": "fuse/gestures/whilepressed"
      },
      "titles": {
        "indexTitle": "WhilePressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhilePressed"
      }
    },
    {
      "comment": {
        "brief": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.",
        "full": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.\n\n# Example\n\nThis example shows a `Panel` that is scaled by a factor of 1.5 while the `SwipeGesture` is active:\n\n    <Panel Width=\"100\" Height=\"100\" Background=\"#000\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Up\" Length=\"50\" Type=\"Simple\" />\n        <WhileSwipeActive Source=\"swipe\">\n            <Scale Factor=\"1.5\" Duration=\"0.4\" />\n        </WhileSwipeActive>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whileswipeactive",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswipeactive",
        "href": "fuse/gestures/whileswipeactive"
      },
      "titles": {
        "indexTitle": "WhileSwipeActive",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwipeActive"
      }
    },
    {
      "comment": {
        "brief": "Is active while a swiping gesture is in progress.",
        "full": "Is active while a swiping gesture is in progress.\n\nA swiping gesture is in progress while the user is swiping, as well as the time it takes the animation to complete the full length of the gesture. Invsersely, this trigger is inactive when the gesture is completely stable."
      },
      "id": {
        "id": "fuse/gestures/whileswiping",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswiping",
        "href": "fuse/gestures/whileswiping"
      },
      "titles": {
        "indexTitle": "WhileSwiping",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwiping"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is active.",
        "full": "Animates while the page is active.\n\n## Example\n\nThe following example changes the value of a @Text element to `Active` when the\nfirst page of a @PageControl is active. We set the `Threshold` high to make the\nchange happen later when transitioning to the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Inactive</Text>\n                <WhileActive Threshold=\"0.9\">\n                    <Change text.Value=\"Active\" />\n                </WhileActive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger for a page is calculated as `1 - distance_to_active`. So a page progress of 0 will map to `1` for this trigger, and anything more than `1` away from the active page will be `0`. For example, the `Threshold=\"0.9\"` in the above example means the trigger will become active when the page has been swiped 90% of the way to active, instead of waiting to 100%."
      },
      "id": {
        "id": "fuse/navigation/whileactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileactive",
        "href": "fuse/navigation/whileactive"
      },
      "titles": {
        "indexTitle": "WhileActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileActive"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating backward is possible.",
        "full": "Active whenever navigating backward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoback",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoback",
        "href": "fuse/navigation/whilecangoback"
      },
      "titles": {
        "indexTitle": "WhileCanGoBack",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoBack"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating forward is possible.",
        "full": "Active whenever navigating forward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoforward",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoforward",
        "href": "fuse/navigation/whilecangoforward"
      },
      "titles": {
        "indexTitle": "WhileCanGoForward",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoForward"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/whilehistorytrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilehistorytrigger",
        "href": "fuse/navigation/whilehistorytrigger"
      },
      "titles": {
        "indexTitle": "WhileHistoryTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileHistoryTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is inactive.",
        "full": "Animates while the page is inactive.\n\n## Example\n\nThe following example changes the value of a @Text element to `Inactive` when the\nfirst page of a @PageControl is inactive. We set the `Threshold` low to make the\nchange happen earlier when transitioning from the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Active</Text>\n                <WhileInactive Threshold=\"0.1\">\n                    <Change text.Value=\"Inactive\" />\n                </WhileInactive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger is calculated as the page's distance from the active page (or the navigation position for continuous navigation). For example, the active page has a distance of 0, meaning this trigger will not be activated, and a page 1 away from the active has a distance of 1, meaning this trigger will be activated. The `Threshold=0.1` in this example means the trigger activates after the page has been swiped only 10% of the distance away from the active position."
      },
      "id": {
        "id": "fuse/navigation/whileinactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinactive",
        "href": "fuse/navigation/whileinactive"
      },
      "titles": {
        "indexTitle": "WhileInactive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInactive"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes behind the current page. It can only be activated while the page is in front of the active one (in the front)."
      },
      "id": {
        "id": "fuse/navigation/whileinenterstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinenterstate",
        "href": "fuse/navigation/whileinenterstate"
      },
      "titles": {
        "indexTitle": "WhileInEnterState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInEnterState"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes in front of the current page. It can only be activated while the page is behind the active one (in the back)."
      },
      "id": {
        "id": "fuse/navigation/whileinexitstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinexitstate",
        "href": "fuse/navigation/whileinexitstate"
      },
      "titles": {
        "indexTitle": "WhileInExitState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInExitState"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is currently navigating between two pages.",
        "full": "Active while the user is currently navigating between two pages.\n\nDoes not provide progress.\n\n# Example\n\nIn this example, the pages become slightly smaller when you are navigating them:\n\n    <App>\n        <Page ux:Class=\"ScalingPanel\">\n            <Scaling ux:Name=\"scale\" Factor=\"1\" />\n            <WhileNavigating>\n                <Change scale.Factor=\".7\" Duration=\".1\" />\n            </WhileNavigating>\n        </Page>\n        <PageControl>\n            <ScalingPanel Color=\"Red\" />\n            <ScalingPanel Color=\"Blue\" />\n        </PageControl>\n    </App>"
      },
      "id": {
        "id": "fuse/navigation/whilenavigating",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigating",
        "href": "fuse/navigation/whilenavigating"
      },
      "titles": {
        "indexTitle": "WhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigating"
      }
    },
    {
      "comment": {
        "brief": "These triggers respond to the current \"activation\" state of a page.",
        "full": "These triggers respond to the current \"activation\" state of a page.\n\n[subclass Fuse.Navigation.NavigationAnimation]\n\nThe states of these triggers depends on the page progress of a page, where 0 is active and +/-1 (or higher) is inactive. These values are logically mapped into a range from 0...1 for each trigger, where 0 is the definitive \"off\" state of the trigger and 1 is the \"on\" state.\n\nValues in between are considered to be in transition. The `Threshold` and `Limit` properties can be used to adjust when these triggers flip between active/inactive on continuous navigation.\n\nIf the navigation is discrete, such as with `Navigator` or `DirectNavigation` the `Threshold` will have no effect as pages are either `0` or `1` in progress. The `Limit` property should also not be used since it will also be ineffectual.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/whilenavigationtrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigationtrigger",
        "href": "fuse/navigation/whilenavigationtrigger"
      },
      "titles": {
        "indexTitle": "WhileNavigationTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigationTrigger"
      }
    },
    {
      "comment": {
        "brief": "Is active while a page, optionally matching given criteria, is active in the navigation.",
        "full": "Is active while a page, optionally matching given criteria, is active in the navigation.\n\nThis trigger checks the `Navigation.Active` page only. During a transition it will consider partial progress, but only for the `Active` page itself."
      },
      "id": {
        "id": "fuse/navigation/whilepageactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilepageactive",
        "href": "fuse/navigation/whilepageactive"
      },
      "titles": {
        "indexTitle": "WhilePageActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhilePageActive"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection fulfills some criteria.",
        "full": "Active when the number of items in a collection fulfills some criteria.\n\nThe collection is specified with `Items`.\n\n`WhileCount` accepts a combination of properties that form an open or closed range of numbers to test against. The trigger is active while the count of items matches.\n\n- `EqualTo` is used on its own and the item count must match this number.\n- Using just `LessThan` or `LessThanEqual` the count of items must be less than, or less than or equal to, this number.\n- Using juse `GreaterThan` or `GreaterThanEqual` the count of items must be greater than, or greater than or equal to, this number.\n- Using both a `LessThan` or `LessThanEqual` and `GreaterThan` or `GreaterThanEqual` creates a closed range to compare. The number of items must be within this range.\n\nThis example shows how to use @WhileCount and @WhileEmpty with an @Observable:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Alice\", \"Bob\", \"Courtney\")\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>\n    <WhileCount Items=\"{friends}\" EqualTo=\"1\">\n        <Text>Your have 1 friend.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThan=\"3\" >\n        <Text>You have more than 3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"1\" LessThanEqual=\"3\" >\n        <Text>You have 1-3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"2\" LessThanEqual=\"5\" Invert=\"true\">\n        <Text>You do not have 2-5 friends.</Text>\n    </WhileCount>"
      },
      "id": {
        "id": "fuse/reactive/whilecount",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilecount",
        "href": "fuse/reactive/whilecount"
      },
      "titles": {
        "indexTitle": "WhileCount",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileCount"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is 0.",
        "full": "Active when the number of items in a collection is 0.\n\nThis is equivalent to using @WhileCount with `EqualTo=\"0\"`.\n\n## Example\n\nThis example displays the text `Your friends list is empty.` using `WhileEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable()\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whileempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whileempty",
        "href": "fuse/reactive/whileempty"
      },
      "titles": {
        "indexTitle": "WhileEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileEmpty"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is greater than 0.",
        "full": "Active when the number of items in a collection is greater than 0.\n\nThis is opposite of using @WhileEmpty.\n\n## Example\n\nThis example displays the text `You have at least one friend!` using `WhileNotEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Jake\")\n        }\n    </JavaScript>\n    <WhileNotEmpty Items=\"{friends}\">\n        <Text>You have at least one friend!</Text>\n    </WhileNotEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whilenotempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilenotempty",
        "href": "fuse/reactive/whilenotempty"
      },
      "titles": {
        "indexTitle": "WhileNotEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileNotEmpty"
      }
    },
    {
      "comment": {
        "brief": "This trigger is active while the @Selectable is currently selected in the @Selection",
        "full": "This trigger is active while the @Selectable is currently selected in the @Selection\n\nThis attaches to the first @Selectable node that is an ancestor of this one.\n\nConsider also the `isSelected()` function for use in expressions."
      },
      "id": {
        "id": "fuse/selection/whileselected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/whileselected",
        "href": "fuse/selection/whileselected"
      },
      "titles": {
        "indexTitle": "WhileSelected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.WhileSelected"
      }
    },
    {
      "comment": {
        "brief": "DEPRECATED: Use @WhileContainsText instead",
        "full": "DEPRECATED: Use @WhileContainsText instead"
      },
      "id": {
        "id": "fuse/triggers/containingtext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/containingtext",
        "href": "fuse/triggers/containingtext"
      },
      "titles": {
        "indexTitle": "ContainingText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ContainingText"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilebool",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebool",
        "href": "fuse/triggers/whilebool"
      },
      "titles": {
        "indexTitle": "WhileBool",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBool"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active whenever a sibling or parent is marked as busy.",
        "full": "A trigger that is active whenever a sibling or parent is marked as busy.\n\nUX nodes can mark themselves as busy, meaning that they are currently waiting on some background task and are not ready for rendering.\nThis can be anything from making a HTTP request to performing an expensive computation.\nWe can use WhileBusy to react to this, as it will be activated while a sibling or parent node is marked as busy.\n\n> *Note:* You can use the [FuseJS/BusyTask API](/docs/fuse/triggers/busytaskmodule) to mark nodes as busy via JavaScript.\n\n## Example\n\nThe following example displays an @Image from a URL, and a text while it's loading.\n\n    <Image Url=\"SOME_IMAGE_URL\">\n        <WhileBusy>\n            <Text Value=\"Loading...\" />\n        </WhileBusy>\n    </Image>\n\nWhen a node is marked as busy, its ancestors are also considered busy.\nThis lets us react to multiple busy nodes in the same trigger.\nIn the following example we have two @Images loaded via HTTP, and a \"Loading...\" indicator that fades to transparency after both images have downloaded.\n\n    <Panel>\n        <Panel ux:Name=\"loadingPanel\" Opacity=\"0\" Alignment=\"Top\">\n            <Text>Loading...</Text>\n        </Panel>\n        <WhileBusy>\n            <Change loadingPanel.Opacity=\"1\" Duration=\"0.5\" />\n        </WhileBusy>\n        <StackPanel>\n            <Image Url=\"SOME_IMAGE_URL\" />\n            <Image Url=\"SOME_OTHER_IMAGE_URL\" />\n        </StackPanel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whilebusy",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebusy",
        "href": "fuse/triggers/whilebusy"
      },
      "titles": {
        "indexTitle": "WhileBusy",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBusy"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is completed.",
        "full": "Active while the @Video is completed.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilecompleted",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecompleted",
        "href": "fuse/triggers/whilecompleted"
      },
      "titles": {
        "indexTitle": "WhileCompleted",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileCompleted"
      }
    },
    {
      "comment": {
        "brief": "Active while the surrounding context contains text.",
        "full": "Active while the surrounding context contains text.\n\nCan be used, for instance, inside @TextInputs.\n\n## Example\n\nThis example displays a warning text unless the user has entered some text into\na password field:\n\n    <StackPanel>\n        <TextInput IsPassword=\"True\">\n            <WhileContainsText>\n                <Change warningText.Visibility=\"Hidden\" />\n            </WhileContainsText>\n        </TextInput>\n        <Text Color=\"Red\" ux:Name=\"warningText\">You must enter a password!</Text>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/whilecontainstext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecontainstext",
        "href": "fuse/triggers/whilecontainstext"
      },
      "titles": {
        "indexTitle": "WhileContainsText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileContainsText"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `False`.",
        "full": "Active while the `IsEnabled` property of its containing element is `False`."
      },
      "id": {
        "id": "fuse/triggers/whiledisabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiledisabled",
        "href": "fuse/triggers/whiledisabled"
      },
      "titles": {
        "indexTitle": "WhileDisabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileDisabled"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `True`.",
        "full": "Active while the `IsEnabled` property of its containing element is `True`.\n\n# Example\nThis example shows a panel that is rotated 45 degrees. It will always be rotated 45 degrees, as `IsEnabled` is `true` by default.\n\n    <Panel  Width=\"50\" Height=\"50\" Background=\"Red\" >\n        <WhileEnabled>\n            <Rotate Degrees=\"45\" Duration=\"0.5\"/>\n        </WhileEnabled>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whileenabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenabled",
        "href": "fuse/triggers/whileenabled"
      },
      "titles": {
        "indexTitle": "WhileEnabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabled"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whileenableddisabledtrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenableddisabledtrigger",
        "href": "fuse/triggers/whileenableddisabledtrigger"
      },
      "titles": {
        "indexTitle": "WhileEnabledDisabledTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabledDisabledTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while the context has failed.",
        "full": "Active while the context has failed.\n\nThis trigger can be used inside a @Video, an @Image, or an @Each element.\n\n`<WhileFailed>` is equivalent to `<WhileBusy Activity=\"Failed\" IsHandled=\"true\"/>`"
      },
      "id": {
        "id": "fuse/triggers/whilefailed",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefailed",
        "href": "fuse/triggers/whilefailed"
      },
      "titles": {
        "indexTitle": "WhileFailed",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFailed"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `false`.",
        "full": "A trigger that is active while its `Value` property is `false`.\n\n> *Note*\n>\n> This is the exact opposite from @WhileTrue.\n> Head over there for documentation and examples."
      },
      "id": {
        "id": "fuse/triggers/whilefalse",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefalse",
        "href": "fuse/triggers/whilefalse"
      },
      "titles": {
        "indexTitle": "WhileFalse",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFalse"
      }
    },
    {
      "comment": {
        "brief": "Active when the `float` `Value` fulfills some criteria.",
        "full": "Active when the `float` `Value` fulfills some criteria."
      },
      "id": {
        "id": "fuse/triggers/whilefloat",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefloat",
        "href": "fuse/triggers/whilefloat"
      },
      "titles": {
        "indexTitle": "WhileFloat",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFloat"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is in focus.",
        "full": "Active whenever its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocused",
        "href": "fuse/triggers/whilefocused"
      },
      "titles": {
        "indexTitle": "WhileFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocused"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a child of its containing element is in focus.",
        "full": "Active whenever a child of its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocuswithin",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocuswithin",
        "href": "fuse/triggers/whilefocuswithin"
      },
      "titles": {
        "indexTitle": "WhileFocusWithin",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocusWithin"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is interacting with the surrounding element.",
        "full": "Active while the user is interacting with the surrounding element.\n\n`WhileInteracting` is active in a @SwipeGesture while the user is swiping, and in a @ScrollView when the user is scrolling.\n\n## Example\n\nThe following example shows a @Panel whose background color changes when the user is interacting with the @ScrollView surrounding it:\n\n    <ScrollView Alignment=\"VerticalCenter\" ClipToBounds=\"False\">\n        <Panel ux:Name=\"coloredPanel\" Background=\"#f00\" HitTestMode=\"LocalBoundsAndChildren\" MinHeight=\"200\">\n            <Text Alignment=\"Center\" TextColor=\"#fff\">Scroll me!</Text>\n        </Panel>\n\n        <WhileInteracting>\n            <Change coloredPanel.Background=\"#00f\" />\n        </WhileInteracting>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/whileinteracting",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileinteracting",
        "href": "fuse/triggers/whileinteracting"
      },
      "titles": {
        "indexTitle": "WhileInteracting",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileInteracting"
      }
    },
    {
      "comment": {
        "brief": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices.",
        "full": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices."
      },
      "id": {
        "id": "fuse/triggers/whilekeyboardvisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilekeyboardvisible",
        "href": "fuse/triggers/whilekeyboardvisible"
      },
      "titles": {
        "indexTitle": "WhileKeyboardVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileKeyboardVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while a resource in the surrounding context is loading.",
        "full": "Active while a resource in the surrounding context is loading.\n\nThis trigger can be used inside a @Video, @Image, or @Text element.\n\n## Example\n\nThe following example will display some text while an image resource is loading via URL:\n\n    <StackPanel>\n        <Image Url=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/Kitten_and_partial_reflection_in_mirror.jpg\">\n            <WhileLoading>\n                <Change showLoadingText.Value=\"True\" />\n            </WhileLoading>\n        </Image>\n\n        <WhileTrue ux:Name=\"showLoadingText\">\n            <Text>Image is loading...</Text>\n        </WhileTrue>\n    </StackPanel>\n\n`<WhileLoading>` is equivalent to `<WhileBusy Activity=\"Loading\">`."
      },
      "id": {
        "id": "fuse/triggers/whileloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileloading",
        "href": "fuse/triggers/whileloading"
      },
      "titles": {
        "indexTitle": "WhileLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileLoading"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is not in focus.",
        "full": "Active whenever its containing element is not in focus.\n\nThe inverse of @WhileFocused."
      },
      "id": {
        "id": "fuse/triggers/whilenotfocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilenotfocused",
        "href": "fuse/triggers/whilenotfocused"
      },
      "titles": {
        "indexTitle": "WhileNotFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileNotFocused"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its parent @WebView is loading.",
        "full": "A trigger that is active while its parent @WebView is loading.\n\n## Example\n\nThe following example displays a loading indicator while the @WebView is loading a page.\n\n    <NativeViewHost>\n        <Panel ux:Name=\"loadingIndicator\" Opacity=\"0\" Alignment=\"Bottom\" Color=\"#0006\">\n            <Text Alignment=\"Center\" Margin=\"10\" Color=\"#fff\">Loading...</Text>\n        </Panel>\n\n        <WebView Url=\"https://example.com/\">\n            <WhilePageLoading>\n                <Change loadingIndicator.Opacity=\"1\" Duration=\"0.2\" />\n            </WhilePageLoading>\n        </WebView>\n    </NativeViewHost>"
      },
      "id": {
        "id": "fuse/triggers/whilepageloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepageloading",
        "href": "fuse/triggers/whilepageloading"
      },
      "titles": {
        "indexTitle": "WhilePageLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePageLoading"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is paused.",
        "full": "Active while the @Video is paused.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilepaused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepaused",
        "href": "fuse/triggers/whilepaused"
      },
      "titles": {
        "indexTitle": "WhilePaused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePaused"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is playing.",
        "full": "Active while the @Video is playing.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whileplaying",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileplaying",
        "href": "fuse/triggers/whileplaying"
      },
      "titles": {
        "indexTitle": "WhilePlaying",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePlaying"
      }
    },
    {
      "comment": {
        "brief": "Active when a @ScrollView can be scrolled.",
        "full": "Active when a @ScrollView can be scrolled.\n\nUse the `ScrollDirections` property to filter the activation\nbased on which direction you're interested in.\n\n# Example\n\nIn the following example, our background changes color when we reach the bottom of our @(ScrollView):\n\n    <ScrollViewer>\n        <SolidColor ux:Name=\"color\" Color=\"#000\"/>\n        <StackPanel Margin=\"10\">\n            <Each Count=\"10\">\n                <Panel Height=\"200\" Background=\"Red\" Margin=\"2\"/>\n            </Each>\n        </StackPanel>\n        <WhileScrollable ScrollDirections=\"Down\">\n            <Change color.Color=\"#ddd\" Duration=\"0.4\"/>\n        </WhileScrollable>\n    </ScrollViewer>\n\n@example Docs/WhileScrollable.md"
      },
      "id": {
        "id": "fuse/triggers/whilescrollable",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrollable",
        "href": "fuse/triggers/whilescrollable"
      },
      "titles": {
        "indexTitle": "WhileScrollable",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrollable"
      }
    },
    {
      "comment": {
        "brief": "Is active while the @ScrollView is scrolled within a given region.",
        "full": "Is active while the @ScrollView is scrolled within a given region.\n\nThis defines the region the same way as @Scrolled"
      },
      "id": {
        "id": "fuse/triggers/whilescrolled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrolled",
        "href": "fuse/triggers/whilescrolled"
      },
      "titles": {
        "indexTitle": "WhileScrolled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrolled"
      }
    },
    {
      "comment": {
        "brief": "Activate when the condition on the string value is true",
        "full": "Activate when the condition on the string value is true"
      },
      "id": {
        "id": "fuse/triggers/whilestring",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilestring",
        "href": "fuse/triggers/whilestring"
      },
      "titles": {
        "indexTitle": "WhileString",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileString"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `true`.",
        "full": "A trigger that is active while its `Value` property is `true`.\n\n## Examples\n\nBy default, the value of a `WhileTrue` is `false`.\n\n    <WhileTrue>\n        <!-- Any actions/animators placed here will never be triggered -->\n    </WhileTrue>\n\nYou can, however, use @Set to change its value.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <Clicked>\n            <Set moveToTheRight.Value=\"true\" />\n        </Clicked>\n\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n    </Panel>\n\nIts value can also be toggled on and off using @Toggle.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n\n        <Clicked>\n            <Toggle Target=\"moveToTheRight\" />\n        </Clicked>\n    </Panel>\n\nIt is also particularly useful to data-bind `Value` to an @Observable.\n\nThe following example consists of a @TextBox, as well as a @Button that fades to full transparency while\nthe user has entered less than 6 characters into the @TextBox.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        var password = Observable(\"\");\n        var isPasswordInvalid = password.map(function(value) {\n            return value.length < 6;\n        });\n\n        module.exports = {\n            password: password,\n            isPasswordInvalid: isPasswordInvalid\n        };\n    </JavaScript>\n\n    <StackPanel Alignment=\"VerticalCenter\" ItemSpacing=\"50\" Margin=\"50\">\n        <TextBox Value=\"{password}\" IsPassword=\"true\" />\n        <Button Text=\"Log in\" ux:Name=\"loginButton\" />\n\n        <WhileTrue Value=\"{isPasswordInvalid}\">\n            <Change loginButton.Opacity=\"0\" Duration=\"0.3\" />\n        </WhileTrue>\n    </StackPanel>\n\n## Instance\n\nThe children of `WhileTrue` are created whether the `Value` is true or false; this is the standard behavior of all triggers. If you need to prevent item creation when the value is false, consider using an `Instance` instead and bind to the `IsEnabled` property."
      },
      "id": {
        "id": "fuse/triggers/whiletrue",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiletrue",
        "href": "fuse/triggers/whiletrue"
      },
      "titles": {
        "indexTitle": "WhileTrue",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrue"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilevalue_1",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevalue_1",
        "href": "fuse/triggers/whilevalue_1"
      },
      "titles": {
        "indexTitle": "WhileValue<T>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileValue<T>"
      }
    },
    {
      "comment": {
        "brief": "Active when the parent element is visible.",
        "full": "Active when the parent element is visible."
      },
      "id": {
        "id": "fuse/triggers/whilevisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisible",
        "href": "fuse/triggers/whilevisible"
      },
      "titles": {
        "indexTitle": "WhileVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while an element is positioned within the visible area of the @ScrollView.",
        "full": "Active while an element is positioned within the visible area of the @ScrollView.\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{images}\">\n                <DockPanel Height=\"100\">\n                    <Image Url=\"{source}\" MemoryPolicy=\"UnloadUnused\" Dock=\"Left\"\n                        Visibility=\"Hidden\" ux:Name=\"theImage\"/>\n                    <Text Value=\"{description}\" TextWrapping=\"Wrap\"/>\n\n                    <WhileVisibleInScrollView>\n                        <Change theImage.Visibility=\"Visible\"/>\n                    </WhileVisibleInScrollView>\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\nThis example will show the images only when they are actually in the visible area. Combined with the `UnloadUnused` memory policy this will allow the memory to be freed when they aren't visible to the user.\n\nIf the panel has a fixed height, as in this example, you could also collapse the text to save the calculation and rendering time.\n\nYou would also use this trigger if you wish to animate something within a ScrollView. There's no point in animating something the user can't actually see; using the trigger can save resources by not animating things that aren't visible.\n\nNote that the element itself need not necessarily be visible, but just have a layout that positions it in the visible area. `Visibility=\"Hidden\"` on a @Visual does not prevent the activiation of this trigger.\n\nThis trigger responds to changes in scroll position. Layout changes on the element will also update the status but layout changes further up the tree may not update the status (we do not have an efficient way to monitor for global positioning changes)."
      },
      "id": {
        "id": "fuse/triggers/whilevisibleinscrollview",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisibleinscrollview",
        "href": "fuse/triggers/whilevisibleinscrollview"
      },
      "titles": {
        "indexTitle": "WhileVisibleInScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisibleInScrollView"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilewindowaspect",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowaspect",
        "href": "fuse/triggers/whilewindowaspect"
      },
      "titles": {
        "indexTitle": "WhileWindowAspect",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowAspect"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport width is larger than its height.",
        "full": "Active when the app's viewport width is larger than its height.\n\n## Example\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in landscape.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowLandscape>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowLandscape>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowlandscape",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowlandscape",
        "href": "fuse/triggers/whilewindowlandscape"
      },
      "titles": {
        "indexTitle": "WhileWindowLandscape",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowLandscape"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport height is larger than or equal to its width.",
        "full": "Active when the app's viewport height is larger than or equal to its width.\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in portrait.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowPortrait>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowPortrait>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowportrait",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowportrait",
        "href": "fuse/triggers/whilewindowportrait"
      },
      "titles": {
        "indexTitle": "WhileWindowPortrait",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowPortrait"
      }
    },
    {
      "comment": {
        "brief": "Active while the size of the app's viewport fulfills some given constraints.",
        "full": "Active while the size of the app's viewport fulfills some given constraints.\n\nConstraints are specified via the @GreaterThan, @LessThan and @EqualTo\nproperties. Each constraint must be provided as a pair of numbers,\nrepresenting the target width and height (in points) to match against.\n\nNote that both the X and Y axis must satisfy the constraints you provide.\n\n## Examples\n\nThe following example changes the color of `myRect` if the size of the\napp's viewport exceeds 400x400 points.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#f00\" />\n    <WhileWindowSize GreaterThan=\"400,400\">\n        <Change myRect.Color=\"#00f\" Duration=\".5\"/>\n    </WhileWindowSize>\n\nIf you want to match on a single axis only, you can provide a value for\nthe other axis that is greater than zero, and that you can safely assume\nwill always match.\n\nFor instance, if you want to check if only the width of the viewport is\ngreater than 400 points, you could do the following:\n\n    <WhileWindowSize GreaterThan=\"400,1\">\n\nThis also works for @LessThan by providing a big value.\n\n    <WhileWindowSize LessThan=\"400,99999\">\n\nYou can also specify multiple constraints on the same `WhileWindowSize`\ntrigger. Note that all constraints that you specify must be satisfied in\norder for the trigger to activate.\n\n    <WhileWindowSize GreaterThan=\"200,300\" LessThan=\"700,1000\">"
      },
      "id": {
        "id": "fuse/triggers/whilewindowsize",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowsize",
        "href": "fuse/triggers/whilewindowsize"
      },
      "titles": {
        "indexTitle": "WhileWindowSize",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowSize"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/windowsizetrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/windowsizetrigger",
        "href": "fuse/triggers/windowsizetrigger"
      },
      "titles": {
        "indexTitle": "WindowSizeTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WindowSizeTrigger"
      }
    }
  ]
}