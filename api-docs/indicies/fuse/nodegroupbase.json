{
  "root": {
    "id": {
      "id": "fuse/nodegroupbase",
      "parentId": "fuse",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/nodegroupbase",
      "href": "fuse/nodegroupbase"
    },
    "titles": {
      "indexTitle": "NodeGroupBase",
      "fullyQualifiedIndexTitle": "Fuse.NodeGroupBase"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/darktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/darktheme",
        "href": "alive/darktheme"
      },
      "titles": {
        "indexTitle": "DarkTheme",
        "fullyQualifiedIndexTitle": "Alive.DarkTheme"
      }
    },
    {
      "id": {
        "id": "alive/fallbacktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/fallbacktheme",
        "href": "alive/fallbacktheme"
      },
      "titles": {
        "indexTitle": "FallbackTheme",
        "fullyQualifiedIndexTitle": "Alive.FallbackTheme"
      }
    },
    {
      "id": {
        "id": "alive/lighttheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/lighttheme",
        "href": "alive/lighttheme"
      },
      "titles": {
        "indexTitle": "LightTheme",
        "fullyQualifiedIndexTitle": "Alive.LightTheme"
      }
    },
    {
      "id": {
        "id": "alive/stickinganimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickinganimation",
        "href": "alive/stickinganimation"
      },
      "titles": {
        "indexTitle": "StickingAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Animation that progresses as a [StickyHeader](api:alive/stickyheader) begins sticking,\nwithin to a given distance.",
        "full": "Animation that progresses as a [StickyHeader](api:alive/stickyheader) begins sticking,\nwithin to a given distance.\n\nNot to be confused with [StickyHeaderAnimation](api:alive/stickyheaderanimation).\n\nThe `Distance` property determines the distance from where the header starts sticking that must be scrolled,\nfor the animation to progress from start to finish.\n\n    <ScrollView>\n        <StackPanel>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\" Height=\"60\" Color=\"{Resource Alive.AccentColor}\">\n                    <Shadow ux:Name=\"shadow\" Size=\"0\" />\n                </Panel>\n                <Alive.StickingAnimation Distance=\"60\">\n                    <Change shadow.Size=\"1\" />\n                </Alive.StickingAnimation>\n            </Alive.StickyHeader>\n        </StackPanel>\n    </ScrollView>"
      },
      "id": {
        "id": "alive/stickyheaderanimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheaderanimation",
        "href": "alive/stickyheaderanimation"
      },
      "titles": {
        "indexTitle": "StickyHeaderAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickyHeaderAnimation"
      }
    },
    {
      "id": {
        "id": "alive/swipeactionconfirmed",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/swipeactionconfirmed",
        "href": "alive/swipeactionconfirmed"
      },
      "titles": {
        "indexTitle": "SwipeActionConfirmed",
        "fullyQualifiedIndexTitle": "Alive.SwipeActionConfirmed"
      }
    },
    {
      "id": {
        "id": "alive/themebase",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/themebase",
        "href": "alive/themebase"
      },
      "titles": {
        "indexTitle": "ThemeBase",
        "fullyQualifiedIndexTitle": "Alive.ThemeBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollview/defaulttrigger",
        "parentId": "fuse/controls/scrollview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview/defaulttrigger",
        "href": "fuse/controls/scrollview/defaulttrigger"
      },
      "titles": {
        "indexTitle": "DefaultTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DefaultTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "href": "fuse/controls/navigationinternal/blockinputwhilenavigating"
      },
      "titles": {
        "indexTitle": "BlockInputWhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.BlockInputWhileNavigating"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/enterhorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/enterhorizontal",
        "href": "fuse/controls/navigationinternal/enterhorizontal"
      },
      "titles": {
        "indexTitle": "EnterHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.EnterHorizontal"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/entervertical",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/entervertical",
        "href": "fuse/controls/navigationinternal/entervertical"
      },
      "titles": {
        "indexTitle": "EnterVertical",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.EnterVertical"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/exithorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/exithorizontal",
        "href": "fuse/controls/navigationinternal/exithorizontal"
      },
      "titles": {
        "indexTitle": "ExitHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.ExitHorizontal"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/exitvertical",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/exitvertical",
        "href": "fuse/controls/navigationinternal/exitvertical"
      },
      "titles": {
        "indexTitle": "ExitVertical",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.ExitVertical"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/naventerhorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/naventerhorizontal",
        "href": "fuse/controls/navigationinternal/naventerhorizontal"
      },
      "titles": {
        "indexTitle": "NavEnterHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavEnterHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/navexithorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/navexithorizontal",
        "href": "fuse/controls/navigationinternal/navexithorizontal"
      },
      "titles": {
        "indexTitle": "NavExitHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavExitHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/navremovehorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/navremovehorizontal",
        "href": "fuse/controls/navigationinternal/navremovehorizontal"
      },
      "titles": {
        "indexTitle": "NavRemoveHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavRemoveHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "href": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze"
      },
      "titles": {
        "indexTitle": "PageWhileNavigatingFreeze",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.PageWhileNavigatingFreeze"
      }
    },
    {
      "comment": {
        "brief": "Allows navigation through swipe gestures.",
        "full": "Allows navigation through swipe gestures.\n\nWe can control the behavior of a `NavigatorSwipe` using the `How` parameter, which controls what happens when the specified direction is swiped. `PushBookmark` and `GotoBookmark` both\nnavigate to the bookmark specified by the `Bookmark` property in their own way(same behavior as @(Router) ). `Back` navigates backwards, but should be used with caution,\nas it does not check if there is anything to go back to, meaning it can generate errors.\n\nIn the following example, we demonstrate `NavigatorSwipe` being used on both a `Navigator`, and navigated pages. Some navigation rules are set up:\n\n * Swiping up while on the blue panel will go to a bookmark pointing to the indigo page.\n * Swiping up while on the indigo page will navigate you to the red page.\n * Swiping down on any page will go back to the previous page.\n\n    <Panel>\n        <Router ux:Name=\"router\" />\n\n        <JavaScript>\n            router.bookmark({\n                name: \"indigo\",\n                path: [ \"indigoPanel\", { } ]\n            });\n            router.bookmark({\n                name: \"red\",\n                path: [ \"redPanel\", { } ]\n            });\n        </JavaScript>\n\n        <DockPanel ux:Class=\"NamedPanel\">\n            <string ux:Property=\"Title\" />\n            <Text Value=\"{Property Title}\" FontSize=\"30\" Alignment=\"TopCenter\" Margin=\"20\" />\n        </DockPanel>\n        <Navigator DefaultPath=\"bluePanel\">\n            <NamedPanel Title=\"Blue panel\" ux:Template=\"bluePanel\" Color=\"#2196F3\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"indigo\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NamedPanel Title=\"Red panel\" ux:Template=\"redPanel\" Color=\"#F44336\" />\n            <NamedPanel Title=\"Indigo panel\" ux:Template=\"indigoPanel\" Color=\"#3F51B5\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"red\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NavigatorSwipe How=\"Back\" Direction=\"Down\"/>\n        </Navigator>\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/navigatorswipe",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigatorswipe",
        "href": "fuse/controls/navigatorswipe"
      },
      "titles": {
        "indexTitle": "NavigatorSwipe",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorSwipe"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photocaptured",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photocaptured",
        "href": "fuse/controls/photocaptured"
      },
      "titles": {
        "indexTitle": "PhotoCaptured",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoCaptured"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/photoloaded",
        "parentId": "fuse/controls/cameraview",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/photoloaded",
        "href": "fuse/controls/cameraview/photoloaded"
      },
      "titles": {
        "indexTitle": "PhotoLoaded",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoLoaded"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is clicked on a @Visual.",
        "full": "Triggers when a pointer is clicked on a @Visual.\n\nThe `Clicked` trigger is quite similar to the @(Tapped) trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when clicked:\n\n    <Panel Background=\"#F00\">\n        <Clicked>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Clicked>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/clicked",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/clicked",
        "href": "fuse/gestures/clicked"
      },
      "titles": {
        "indexTitle": "Clicked",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Clicked"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/clickertrigger",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/clickertrigger",
        "href": "fuse/gestures/clickertrigger"
      },
      "titles": {
        "indexTitle": "ClickerTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ClickerTrigger"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is double-clicked on a @Visual.",
        "full": "Triggers when a pointer is double-clicked on a @Visual.\n\nThis `DoubleClicked` trigger is very similar to the `DoubleTapped` trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n## Example\nThe following example rotates a rectangle if it is double clicked.\n\n    <Panel Width=\"100\" Height=\"100\" Color=\"#F00\" >\n        <DoubleClicked>\n            <Rotate Degrees=\"270\" Easing=\"ExponentialOut\" Duration=\".3\"/>\n        </DoubleClicked>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/doubleclicked",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/doubleclicked",
        "href": "fuse/gestures/doubleclicked"
      },
      "titles": {
        "indexTitle": "DoubleClicked",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.DoubleClicked"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is double-tapped on a @Visual.",
        "full": "Triggers when a pointer is double-tapped on a @Visual.\n\nThis `DoubleTapped` trigger is very similar to the `DoubleClicked` trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n## Example\nThe following example rotates a rectangle if it is double tapped.\n\n    <Panel Width=\"100\" Height=\"100\" Color=\"#F00\" >\n        <DoubleTapped>\n            <Rotate Degrees=\"270\" Easing=\"ExponentialOut\" Duration=\".3\"/>\n        </DoubleTapped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/doubletapped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/doubletapped",
        "href": "fuse/gestures/doubletapped"
      },
      "titles": {
        "indexTitle": "DoubleTapped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.DoubleTapped"
      }
    },
    {
      "comment": {
        "brief": "DEPRECATED: Use `SwipeGesture` with `EdgeNavigator` instead",
        "full": "DEPRECATED: Use `SwipeGesture` with `EdgeNavigator` instead"
      },
      "id": {
        "id": "fuse/gestures/edgeswipeanimation",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/edgeswipeanimation",
        "href": "fuse/gestures/edgeswipeanimation"
      },
      "titles": {
        "indexTitle": "EdgeSwipeAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.EdgeSwipeAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is held down for a period of time.",
        "full": "Triggers when a pointer is held down for a period of time.\n\nBeing @LongPressed does not prevent other gestures, like @Clicked, from also triggering on the visual."
      },
      "id": {
        "id": "fuse/gestures/longpressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/longpressed",
        "href": "fuse/gestures/longpressed"
      },
      "titles": {
        "indexTitle": "LongPressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.LongPressed"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is pressed on a visual.\nAs opposed to @Clicked or @Tapped, this trigger triggers immediately when a\npointer is pressed on the visual. It does not wait for a pointer release or minimum\namount of press time.",
        "full": "Triggers when a pointer is pressed on a visual.\nAs opposed to @Clicked or @Tapped, this trigger triggers immediately when a\npointer is pressed on the visual. It does not wait for a pointer release or minimum\namount of press time."
      },
      "id": {
        "id": "fuse/gestures/pressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/pressed",
        "href": "fuse/gestures/pressed"
      },
      "titles": {
        "indexTitle": "Pressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Pressed"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is released on a @Visual.",
        "full": "Triggers when a pointer is released on a @Visual.\n\nAs opposed to @Clicked or @Tapped, this trigger triggers without concern for how long the pointer was pressed for.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when released:\n\n    <Panel Background=\"#F00\">\n        <Released>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Released>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/released",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/released",
        "href": "fuse/gestures/released"
      },
      "titles": {
        "indexTitle": "Released",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Released"
      }
    },
    {
      "comment": {
        "brief": "Pulse trigger that activates when a swipe has occurred.",
        "full": "Pulse trigger that activates when a swipe has occurred.\n\nBy default, `Swiped` will only trigger when swiping to the primary swipe direction (when it enters the active state).\nFor instance, if the @SwipeGesture has `Direction=\"Left\"` it only triggers on a `Left` swipe and ignores the matching closing swipe.\nWe can control this behavior by setting the `How` property to either `ToActive` (default), `ToInactive` or `ToEither`.\n\n> **Note:** For a `Type=\"Active\"` @SwipeGesture, this only fires when the state actually changes.\n> If the user starts swiping but release the pointer without completing the gesture, it will not activate.\n\n# Example\n\nThis example shows a quick animation after a panel has been swiped.\n\n    <Panel Width=\"100\" Height=\"100\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Up\" Length=\"50\" Type=\"Simple\" />\n        <Swiped Source=\"swipe\">\n            <Scale Factor=\"1.5\" Duration=\"0.4\" DurationBack=\"0.2\" />\n        </Swiped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/swiped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/swiped",
        "href": "fuse/gestures/swiped"
      },
      "titles": {
        "indexTitle": "Swiped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Swiped"
      }
    },
    {
      "comment": {
        "brief": "A trigger that maps the progress of a SwipeGesture to a series of animations.",
        "full": "A trigger that maps the progress of a SwipeGesture to a series of animations.\n\nWhen the pointer is first pressed down on the @Element, progess will be `0`,\nand will move towards `1` as the pointer is dragged towards the `Length` of the @SwipeGesture.\n\n# Examples\n\nIn this example, a panel moves 200 points to the right when swiped over a distance of 200 points.\n\n    <Panel Width=\"100\" Height=\"100\" Background=\"#000\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\n        <SwipingAnimation Source=\"swipe\">\n            <Move X=\"200\" />\n        </SwipingAnimation>\n    </Panel>\n\nIn this example, we demonstrate using the `LengthNode` property of @(SwipeGesture),\nand the `RelativeNode` property of @(Move), to determine the swipe length based on the width of the panel.\n\n    <Panel ux:Name=\"parentContainer\" Margin=\"40\">\n        <Panel Width=\"60\" Height=\"60\" Background=\"#000\" Alignment=\"Left\">\n            <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Type=\"Active\" LengthNode=\"parentContainer\" />\n            <SwipingAnimation Source=\"swipe\">\n                <Move X=\"1\" RelativeTo=\"Size\" RelativeNode=\"parentContainer\" />\n            </SwipingAnimation>\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/swipinganimation",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/swipinganimation",
        "href": "fuse/gestures/swipinganimation"
      },
      "titles": {
        "indexTitle": "SwipingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is tapped on a @Visual.",
        "full": "Triggers when a pointer is tapped on a @Visual.\n\nThe `Tapped` trigger is quite similar to the @(Clicked) trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when tapped:\n\n    <Panel Background=\"#F00\">\n        <Tapped>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Tapped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/tapped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/tapped",
        "href": "fuse/gestures/tapped"
      },
      "titles": {
        "indexTitle": "Tapped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Tapped"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/whileclickertrigger",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileclickertrigger",
        "href": "fuse/gestures/whileclickertrigger"
      },
      "titles": {
        "indexTitle": "WhileClickerTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileClickerTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while a pointer is within the bounds of its containing element.",
        "full": "Active while a pointer is within the bounds of its containing element.\n\nNote that this trigger only has a value when the device\nsupports a hovering pointer such as the mouse pointer on\ndesktop machines. This trigger is thus not useful on most\nsmart phones.\n\n## Example\n\nThis example demonstrates how to scale `Panel` by a factor of 2 when a pointer hovers over it:\n\n    <Panel Width=\"50\" Height=\"50\">\n        <WhileHovering>\n            <Scale Factor=\"2\" Duration=\"0.2\" />\n        </WhileHovering>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whilehovering",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whilehovering",
        "href": "fuse/gestures/whilehovering"
      },
      "titles": {
        "indexTitle": "WhileHovering",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileHovering"
      }
    },
    {
      "comment": {
        "brief": "Active while at least one pointer is pressed on a visual.",
        "full": "Active while at least one pointer is pressed on a visual.\n\nIf `Capture` is `true` then this behaves more like a normal gesture and captures the pointer.\nMoving the pointer away from the element will cause the trigger to deactivate, but another visual will be prevented from capturing it.\nThis should be used when you wish to track the same pressing status as a @Clicked gesture.\n\n# Example\nIn this example, a panel will double in size when it is pressed:\n\n    <Panel Width=\"50\" Height=\"50\">\n        <WhilePressed>\n            <Scale Factor=\"2\" Duration=\"0.2\"/>\n        </WhilePressed>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whilepressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whilepressed",
        "href": "fuse/gestures/whilepressed"
      },
      "titles": {
        "indexTitle": "WhilePressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhilePressed"
      }
    },
    {
      "comment": {
        "brief": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.",
        "full": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.\n\n# Example\n\nThis example shows a `Panel` that is scaled by a factor of 1.5 while the `SwipeGesture` is active:\n\n    <Panel Width=\"100\" Height=\"100\" Background=\"#000\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Up\" Length=\"50\" Type=\"Simple\" />\n        <WhileSwipeActive Source=\"swipe\">\n            <Scale Factor=\"1.5\" Duration=\"0.4\" />\n        </WhileSwipeActive>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whileswipeactive",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswipeactive",
        "href": "fuse/gestures/whileswipeactive"
      },
      "titles": {
        "indexTitle": "WhileSwipeActive",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwipeActive"
      }
    },
    {
      "comment": {
        "brief": "Is active while a swiping gesture is in progress.",
        "full": "Is active while a swiping gesture is in progress.\n\nA swiping gesture is in progress while the user is swiping, as well as the time it takes the animation to complete the full length of the gesture. Invsersely, this trigger is inactive when the gesture is completely stable."
      },
      "id": {
        "id": "fuse/gestures/whileswiping",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswiping",
        "href": "fuse/gestures/whileswiping"
      },
      "titles": {
        "indexTitle": "WhileSwiping",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwiping"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a page becomes active.",
        "full": "Active whenever a page becomes active.\n\nThis trigger will also be pulsed at rooting time if the page is currently the active one.\n\n## Example\n\nThis example will print to the console whenever the each of the two pages is activated:\n\n    <PageControl>\n        <Page Background=\"Red\">\n            <Activated>\n                <DebugAction Message=\"Red page activated\" />\n            </Activated>\n        </Page>\n        <Page Background=\"Blue\">\n            <Activated>\n                <DebugAction Message=\"Blue page activated\" />\n            </Activated>\n        </Page>\n    </PageControl>\n\nNote that this trigger may also be used as an attached event directly on a `Page`, like so:\n\n    <Page Activated=\"{jsActivated}\">\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/activated",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/activated",
        "href": "fuse/navigation/activated"
      },
      "titles": {
        "indexTitle": "Activated",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Activated"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for an element that's becoming active.",
        "full": "Specifies an animation for an element that's becoming active.\n\nIf @(SwipeNavigate) is used, one can observe that `ActivatingAnimation` progressed from 0 as soon as the `Page` is entering, stays at 1 as long as the `Page` is active,\nand then progresses towards 0 again as the `Page` is exiting. This is the inverse of `DeactivatingAnimation`'s behavior.\n\n## Example\n\nThe following example shows an `ActivatingAnimation` animating the `Height` of a `Rectangle`, causing it to reduce in size vertically as a page is being navigated to:\n\n    <PageControl>\n        <Panel Background=\"Red\" />\n        <Panel Background=\"Blue\">\n            <Rectangle Color=\"Black\" Width=\"100%\" Height=\"0%\" Alignment=\"Top\" ux:Name=\"rect\"/>\n            <ActivatingAnimation>\n                <Change rect.Height=\"100%\" />\n            </ActivatingAnimation>\n        </Panel>\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/activatinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/activatinganimation",
        "href": "fuse/navigation/activatinganimation"
      },
      "titles": {
        "indexTitle": "ActivatingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ActivatingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a page becomes inactive.",
        "full": "Active whenever a page becomes inactive.\n\nThis trigger may not pulse when the trigger, navigation, or the page is unrooted.\n\n## Example\n\nThis example will print to the console whenever the each of the two pages is deactivated:\n\n    <PageControl>\n        <Page Background=\"Red\">\n            <Deactivated>\n                <DebugAction Message=\"Red page deactivated\" />\n            </Deactivated>\n        </Page>\n        <Page Background=\"Blue\">\n            <Deactivated>\n                <DebugAction Message=\"Blue page deactivated\" />\n            </Deactivated>\n        </Page>\n    </PageControl>\n\nNote that this trigger may also be used as an attached event directly on a `Page`, like so:\n\n    <Page Deactivated=\"{jsDeactivated}\">\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/deactivated",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/deactivated",
        "href": "fuse/navigation/deactivated"
      },
      "titles": {
        "indexTitle": "Deactivated",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Deactivated"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for an element that's becoming inactive.",
        "full": "Specifies an animation for an element that's becoming inactive.\n\nIf @(SwipeNavigate) is used, one can observe that `DeactivatingAnimation` progressed from 1 to 0 as soon as the `Page` is entering, stays at 0 as long as the `Page` is active,\nand then progresses towards 1 again as the `Page` is exiting. This is the inverse of `ActivatingAnimation`'s behavior.\n\n## Example\n\nThe following example shows a `DeactivatingAnimation` animating the `Height` of a `Rectangle`, causing it to fill the page being navigated to:\n\n    <PageControl>\n        <Panel Background=\"Red\" />\n        <Panel Background=\"Blue\">\n            <Rectangle Color=\"Black\" Width=\"100%\" Height=\"0%\" Alignment=\"Top\" ux:Name=\"rect\"/>\n            <DeactivatingAnimation>\n                <Change rect.Height=\"100%\" />\n            </DeactivatingAnimation>\n        </Panel>\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/deactivatinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/deactivatinganimation",
        "href": "fuse/navigation/deactivatinganimation"
      },
      "titles": {
        "indexTitle": "DeactivatingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.DeactivatingAnimation"
      }
    },
    {
      "comment": {
        "brief": "[subclass Fuse.Navigation.EnterExitAnimation]",
        "full": "[subclass Fuse.Navigation.EnterExitAnimation]"
      },
      "id": {
        "id": "fuse/navigation/enterexitanimation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/enterexitanimation",
        "href": "fuse/navigation/enterexitanimation"
      },
      "titles": {
        "indexTitle": "EnterExitAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.EnterExitAnimation"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for a page that is in front of the active one.",
        "full": "Specifies an animation for a page that is in front of the active one.\n\nAnimates from 0 to 1 as the page progress goes from 0 to 1. For discrete navigation changes the duration of the animators will be used.\n\nFor clarity, if the page is coming from the front, such as navigating forward in a `PageControl`, the trigger animates from 1 to 0. This is just a natural result of the page's progress changing from 1 to 0.\n\n## Example\n\nThis example shows the use of both `EnteringAnimation` and `ExitingAnimation` in a custom transition for three panels in a @(PageControl):\n\n    <Panel ux:Class=\"CustomPanel\" TransformOrigin=\"TopLeft\">\n        <EnteringAnimation>\n            <Rotate Degrees=\"90\"/>\n        </EnteringAnimation>\n        <ExitingAnimation>\n            <Rotate Degrees=\"-90\" />\n        </ExitingAnimation>\n    </Panel>\n    <PageControl Transition=\"None\">\n        <CustomPanel Background=\"#F00\" />\n        <CustomPanel Background=\"#0F0\" />\n        <CustomPanel Background=\"#00F\" />\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/enteringanimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/enteringanimation",
        "href": "fuse/navigation/enteringanimation"
      },
      "titles": {
        "indexTitle": "EnteringAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.EnteringAnimation"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for a page that is behind the active page.",
        "full": "Specifies an animation for a page that is behind the active page.\n\nAnimates from 0 to 1 as the page progress goes from 0 to -1. For discrete navigation changes the duration of the animators will be used.\n\n## Example\n\nThis example shows the use of both `ExitingAnimation` and `EnteringAnimation` in a custom transition for three panels in a @(PageControl):\n\n    <Panel ux:Class=\"CustomPanel\" TransformOrigin=\"TopLeft\">\n        <EnteringAnimation>\n            <Rotate Degrees=\"90\"/>\n        </EnteringAnimation>\n        <ExitingAnimation>\n            <Rotate Degrees=\"-90\" />\n        </ExitingAnimation>\n    </Panel>\n    <PageControl Transition=\"None\">\n        <CustomPanel Background=\"#F00\" />\n        <CustomPanel Background=\"#0F0\" />\n        <CustomPanel Background=\"#00F\" />\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/exitinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/exitinganimation",
        "href": "fuse/navigation/exitinganimation"
      },
      "titles": {
        "indexTitle": "ExitingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ExitingAnimation"
      }
    },
    {
      "comment": {
        "brief": "These triggers are used to animate pages as they move to and away from the active page.",
        "full": "These triggers are used to animate pages as they move to and away from the active page.\n\nThe basic behavior of this trigger depends on whether the navigation is continuous, such as a `PageControl` or `LinearNavigation`, or is discrete, such as `Navigator` or `DirectNavigation`.\n\nWhen used with continuous navigation a `Duration` property is not needed on the animators. The progress is mapped from the progress of the page itself in the navigation.\n\nWhen used with a discrete navigation a `Duration` is required. There is no smooth page progress change, it will simply flip between multiple states. Here the duration of the trigger will be used to do the animation.\n\n[subclass Fuse.Navigation.NavigationAnimation]\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/navigationanimation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationanimation",
        "href": "fuse/navigation/navigationanimation"
      },
      "titles": {
        "indexTitle": "NavigationAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationAnimation"
      }
    },
    {
      "comment": {
        "brief": "@hide",
        "full": "@hide"
      },
      "id": {
        "id": "fuse/navigation/navigationtrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationtrigger",
        "href": "fuse/navigation/navigationtrigger"
      },
      "titles": {
        "indexTitle": "NavigationTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is active.",
        "full": "Animates while the page is active.\n\n## Example\n\nThe following example changes the value of a @Text element to `Active` when the\nfirst page of a @PageControl is active. We set the `Threshold` high to make the\nchange happen later when transitioning to the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Inactive</Text>\n                <WhileActive Threshold=\"0.9\">\n                    <Change text.Value=\"Active\" />\n                </WhileActive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger for a page is calculated as `1 - distance_to_active`. So a page progress of 0 will map to `1` for this trigger, and anything more than `1` away from the active page will be `0`. For example, the `Threshold=\"0.9\"` in the above example means the trigger will become active when the page has been swiped 90% of the way to active, instead of waiting to 100%."
      },
      "id": {
        "id": "fuse/navigation/whileactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileactive",
        "href": "fuse/navigation/whileactive"
      },
      "titles": {
        "indexTitle": "WhileActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileActive"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating backward is possible.",
        "full": "Active whenever navigating backward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoback",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoback",
        "href": "fuse/navigation/whilecangoback"
      },
      "titles": {
        "indexTitle": "WhileCanGoBack",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoBack"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating forward is possible.",
        "full": "Active whenever navigating forward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoforward",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoforward",
        "href": "fuse/navigation/whilecangoforward"
      },
      "titles": {
        "indexTitle": "WhileCanGoForward",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoForward"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/whilehistorytrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilehistorytrigger",
        "href": "fuse/navigation/whilehistorytrigger"
      },
      "titles": {
        "indexTitle": "WhileHistoryTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileHistoryTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is inactive.",
        "full": "Animates while the page is inactive.\n\n## Example\n\nThe following example changes the value of a @Text element to `Inactive` when the\nfirst page of a @PageControl is inactive. We set the `Threshold` low to make the\nchange happen earlier when transitioning from the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Active</Text>\n                <WhileInactive Threshold=\"0.1\">\n                    <Change text.Value=\"Inactive\" />\n                </WhileInactive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger is calculated as the page's distance from the active page (or the navigation position for continuous navigation). For example, the active page has a distance of 0, meaning this trigger will not be activated, and a page 1 away from the active has a distance of 1, meaning this trigger will be activated. The `Threshold=0.1` in this example means the trigger activates after the page has been swiped only 10% of the distance away from the active position."
      },
      "id": {
        "id": "fuse/navigation/whileinactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinactive",
        "href": "fuse/navigation/whileinactive"
      },
      "titles": {
        "indexTitle": "WhileInactive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInactive"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes behind the current page. It can only be activated while the page is in front of the active one (in the front)."
      },
      "id": {
        "id": "fuse/navigation/whileinenterstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinenterstate",
        "href": "fuse/navigation/whileinenterstate"
      },
      "titles": {
        "indexTitle": "WhileInEnterState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInEnterState"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes in front of the current page. It can only be activated while the page is behind the active one (in the back)."
      },
      "id": {
        "id": "fuse/navigation/whileinexitstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinexitstate",
        "href": "fuse/navigation/whileinexitstate"
      },
      "titles": {
        "indexTitle": "WhileInExitState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInExitState"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is currently navigating between two pages.",
        "full": "Active while the user is currently navigating between two pages.\n\nDoes not provide progress.\n\n# Example\n\nIn this example, the pages become slightly smaller when you are navigating them:\n\n    <App>\n        <Page ux:Class=\"ScalingPanel\">\n            <Scaling ux:Name=\"scale\" Factor=\"1\" />\n            <WhileNavigating>\n                <Change scale.Factor=\".7\" Duration=\".1\" />\n            </WhileNavigating>\n        </Page>\n        <PageControl>\n            <ScalingPanel Color=\"Red\" />\n            <ScalingPanel Color=\"Blue\" />\n        </PageControl>\n    </App>"
      },
      "id": {
        "id": "fuse/navigation/whilenavigating",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigating",
        "href": "fuse/navigation/whilenavigating"
      },
      "titles": {
        "indexTitle": "WhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigating"
      }
    },
    {
      "comment": {
        "brief": "These triggers respond to the current \"activation\" state of a page.",
        "full": "These triggers respond to the current \"activation\" state of a page.\n\n[subclass Fuse.Navigation.NavigationAnimation]\n\nThe states of these triggers depends on the page progress of a page, where 0 is active and +/-1 (or higher) is inactive. These values are logically mapped into a range from 0...1 for each trigger, where 0 is the definitive \"off\" state of the trigger and 1 is the \"on\" state.\n\nValues in between are considered to be in transition. The `Threshold` and `Limit` properties can be used to adjust when these triggers flip between active/inactive on continuous navigation.\n\nIf the navigation is discrete, such as with `Navigator` or `DirectNavigation` the `Threshold` will have no effect as pages are either `0` or `1` in progress. The `Limit` property should also not be used since it will also be ineffectual.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/whilenavigationtrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigationtrigger",
        "href": "fuse/navigation/whilenavigationtrigger"
      },
      "titles": {
        "indexTitle": "WhileNavigationTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigationTrigger"
      }
    },
    {
      "comment": {
        "brief": "Is active while a page, optionally matching given criteria, is active in the navigation.",
        "full": "Is active while a page, optionally matching given criteria, is active in the navigation.\n\nThis trigger checks the `Navigation.Active` page only. During a transition it will consider partial progress, but only for the `Active` page itself."
      },
      "id": {
        "id": "fuse/navigation/whilepageactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilepageactive",
        "href": "fuse/navigation/whilepageactive"
      },
      "titles": {
        "indexTitle": "WhilePageActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhilePageActive"
      }
    },
    {
      "comment": {
        "brief": "Allows creating a class that contains several nodes and resources that are added directly to their Parent, as though included directly.",
        "full": "Allows creating a class that contains several nodes and resources that are added directly to their Parent, as though included directly.\n\n    <NodeGroup ux:Class=\"GridLine\">\n        <float4 ux:Property=\"Color\"/>\n        <string ux:Property=\"Title\"/>\n        <string ux:Property=\"Emoji\"/>\n\n        <Rectangle Color=\"{Property this.Color}\"/>\n        <Text Value=\"{Property this.Title}\"/>\n        <Text Value=\"{Property this.Emoji}\"/>\n    </NodeGroup>\n\n    <Grid Columns=\"50,1*,auto\" DefaultRow=\"auto\">\n        <GridLine Color=\"#AFA\" Title=\"Happy One\" Emoji=\"😀\"/>\n        <GridLine Color=\"#FFA\" Title=\"Cry Baby\" Emoji=\"😭\"/>\n        <GridLine Color=\"#FAA\" Title=\"Mr. Angry\" Emoji=\"😠\"/>\n    </Grid>\n\nA `NodeGroup` may be used as a target for `Each.TemplateSource` or `Instance.TemplateSource`. This can be used to create classes that position templated items.\n\n    <NodeGroup ux:Class=\"TitleBar\">\n        <Grid Columns=\"40,1*,40\" Alignment=\"Top\">\n            <Panel>\n                <Instance TemplateSource=\"this\" TemplateKey=\"leftOption\">\n                    <MyMenuButton/>\n                </Instance>\n            </Panel>\n            <Panel>\n                <Instance TemplateSource=\"this\" TemplateKey=\"title\">\n                    <Text Value=\"{Page Title}\"/>\n                </Instance>\n            </Panel>\n            <Panel TemplateSource=\"this\" TemplateKey=\"contextMenu\"/>\n        </Grid>\n    </NodeGroup>\n\n    <Page>\n        <TitleBar>\n            <Panel ux:Template=\"contextMenu\">\n                <MyShareButton/>\n            </Panel>\n        </TitleBar>\n    </Page>\n\n    <Page>\n        <TitleBar>\n            <Panel ux:Template=\"leftOption\"/><!-- leave empty -->\n            <Image File=\"pageTitle.png\" ux:Template=\"title\"/>\n        </TitleBar>\n    </Page>"
      },
      "id": {
        "id": "fuse/nodegroup",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/nodegroup",
        "href": "fuse/nodegroup"
      },
      "titles": {
        "indexTitle": "NodeGroup",
        "fullyQualifiedIndexTitle": "Fuse.NodeGroup"
      }
    },
    {
      "comment": {
        "brief": "Triggers as a draggable element enters the force field.",
        "full": "Triggers as a draggable element enters the force field.\n\nAs it is a pulse trigger, the forward animation will play in one continous run when the trigger is activated, and play the backwards animation continously when deactivated.\n\n## Example\nIn the following example, a circle in the middle of the screen flashes green if a smaller, blue circle, is moved into its force field:\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"BottomLeft\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <EnteredForceField ForceField=\"centerAttract\">\n                <Change centerCircle.Color=\"#66BB6A\" Duration=\".5\"/>\n            </EnteredForceField>\n        </Panel>\n        <Panel Width=\"200\" Height=\"200\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" Color=\"#EF5350\" />\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>\n    <Panel Alignment=\"BottomLeft\" Width=\"100\" Height=\"100\">\n        <PointAttractor Radius=\"500\" Strength=\"100\" Offset=\"0,0,0\"/>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/enteredforcefield",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/enteredforcefield",
        "href": "fuse/physics/enteredforcefield"
      },
      "titles": {
        "indexTitle": "EnteredForceField",
        "fullyQualifiedIndexTitle": "Fuse.Physics.EnteredForceField"
      }
    },
    {
      "comment": {
        "brief": "Triggers as a draggable element leaves the force field.",
        "full": "Triggers as a draggable element leaves the force field.\n\nAs it is a pulse trigger, the forward animation will play in one continous run when the trigger is activated, and play the backwards animation continously when deactivated.\n\n## Example\nIn the following example, a circle with a `PointAttractor` in the middle of the screen flashes green if a smaller, blue circle, is removed from the forcefield.\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"Center\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <ExitedForceField ForceField=\"centerAttract\">\n                <Change centerCircle.Color=\"#66BB6A\" Duration=\".5\"/>\n            </ExitedForceField>\n        </Panel>\n        <Panel Width=\"200\" Height=\"200\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" Color=\"#EF5350\" />\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/exitedforcefield",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/exitedforcefield",
        "href": "fuse/physics/exitedforcefield"
      },
      "titles": {
        "indexTitle": "ExitedForceField",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ExitedForceField"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefieldeventtrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefieldeventtrigger",
        "href": "fuse/physics/forcefieldeventtrigger"
      },
      "titles": {
        "indexTitle": "ForceFieldEventTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceFieldEventTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefieldtrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefieldtrigger",
        "href": "fuse/physics/forcefieldtrigger"
      },
      "titles": {
        "indexTitle": "ForceFieldTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceFieldTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates a draggable element depending on how close it is to a point attractor",
        "full": "Animates a draggable element depending on how close it is to a point attractor\n\nThe animation will animate from 0(outside the forcefield radius), to 1(at the center of the forcefield), unless `From` and `To` are used to specify a custom range. This is the same as using a `RangeAdapter`.\n\n# Example\nIn the following example, a red circle will get smaller as a blue, filled circle nears the center `PointAttract`, `centerAttract`. Because `To` is set to `1.3` on the `InForceFieldAnimation`, the animation will never animate further than `0.77`.\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"BottomLeft\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <InForceFieldAnimation  ForceField=\"centerAttract\" From=\"0\" To=\"1.3\">\n                <Scale Target=\"centerCircle\" Factor=\".0\" />\n            </InForceFieldAnimation>\n        </Panel>\n        <Panel Width=\"300\" Height=\"300\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" >\n                <Stroke Color=\"#F00\" Width=\"4\"/>\n            </Circle>\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>\n    <Panel Alignment=\"BottomLeft\" Width=\"100\" Height=\"100\">\n        <PointAttractor Radius=\"300\" Strength=\"150\" Offset=\"0,0,0\"/>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/inforcefieldanimation",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/inforcefieldanimation",
        "href": "fuse/physics/inforcefieldanimation"
      },
      "titles": {
        "indexTitle": "InForceFieldAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Physics.InForceFieldAnimation"
      }
    },
    {
      "comment": {
        "brief": "Active while the element is being dragged.",
        "full": "Active while the element is being dragged."
      },
      "id": {
        "id": "fuse/physics/whiledragging",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/whiledragging",
        "href": "fuse/physics/whiledragging"
      },
      "titles": {
        "indexTitle": "WhileDragging",
        "fullyQualifiedIndexTitle": "Fuse.Physics.WhileDragging"
      }
    },
    {
      "comment": {
        "brief": "Deprecated (< 2017-01-01)",
        "full": "Deprecated (< 2017-01-01)"
      },
      "id": {
        "id": "fuse/reactive/select",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/select",
        "href": "fuse/reactive/select"
      },
      "titles": {
        "indexTitle": "Select",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Select"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection fulfills some criteria.",
        "full": "Active when the number of items in a collection fulfills some criteria.\n\nThe collection is specified with `Items`.\n\n`WhileCount` accepts a combination of properties that form an open or closed range of numbers to test against. The trigger is active while the count of items matches.\n\n- `EqualTo` is used on its own and the item count must match this number.\n- Using just `LessThan` or `LessThanEqual` the count of items must be less than, or less than or equal to, this number.\n- Using juse `GreaterThan` or `GreaterThanEqual` the count of items must be greater than, or greater than or equal to, this number.\n- Using both a `LessThan` or `LessThanEqual` and `GreaterThan` or `GreaterThanEqual` creates a closed range to compare. The number of items must be within this range.\n\nThis example shows how to use @WhileCount and @WhileEmpty with an @Observable:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Alice\", \"Bob\", \"Courtney\")\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>\n    <WhileCount Items=\"{friends}\" EqualTo=\"1\">\n        <Text>Your have 1 friend.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThan=\"3\" >\n        <Text>You have more than 3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"1\" LessThanEqual=\"3\" >\n        <Text>You have 1-3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"2\" LessThanEqual=\"5\" Invert=\"true\">\n        <Text>You do not have 2-5 friends.</Text>\n    </WhileCount>"
      },
      "id": {
        "id": "fuse/reactive/whilecount",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilecount",
        "href": "fuse/reactive/whilecount"
      },
      "titles": {
        "indexTitle": "WhileCount",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileCount"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is 0.",
        "full": "Active when the number of items in a collection is 0.\n\nThis is equivalent to using @WhileCount with `EqualTo=\"0\"`.\n\n## Example\n\nThis example displays the text `Your friends list is empty.` using `WhileEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable()\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whileempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whileempty",
        "href": "fuse/reactive/whileempty"
      },
      "titles": {
        "indexTitle": "WhileEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileEmpty"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is greater than 0.",
        "full": "Active when the number of items in a collection is greater than 0.\n\nThis is opposite of using @WhileEmpty.\n\n## Example\n\nThis example displays the text `You have at least one friend!` using `WhileNotEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Jake\")\n        }\n    </JavaScript>\n    <WhileNotEmpty Items=\"{friends}\">\n        <Text>You have at least one friend!</Text>\n    </WhileNotEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whilenotempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilenotempty",
        "href": "fuse/reactive/whilenotempty"
      },
      "titles": {
        "indexTitle": "WhileNotEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileNotEmpty"
      }
    },
    {
      "comment": {
        "brief": "Represents a scope in which the current data context is narrowed down.",
        "full": "Represents a scope in which the current data context is narrowed down.\n\n`With` is useful when you have a complex data context and you'd like to simplify data-binding. This is\nparticularly useful for \"viewing\" part of a deeply-nested object graph.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            complex: {\n                item1: {\n                    subitem1: { name: \"Spongebob\", age: 32 }\n                }\n            }\n        };\n    </JavaScript>\n    <With Data=\"{complex.item1.subitem1}\">\n        <Text Value=\"{name}\" />\n        <Text Value=\"{age}\" />\n    </With>"
      },
      "id": {
        "id": "fuse/reactive/with",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/with",
        "href": "fuse/reactive/with"
      },
      "titles": {
        "indexTitle": "With",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.With"
      }
    },
    {
      "comment": {
        "brief": "Fired when the @Selectable is removed from the @Selection.",
        "full": "Fired when the @Selectable is removed from the @Selection."
      },
      "id": {
        "id": "fuse/selection/deselected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/deselected",
        "href": "fuse/selection/deselected"
      },
      "titles": {
        "indexTitle": "Deselected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Deselected"
      }
    },
    {
      "comment": {
        "brief": "Fired when the @Selectable is assed to the @Selection.",
        "full": "Fired when the @Selectable is assed to the @Selection."
      },
      "id": {
        "id": "fuse/selection/selected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selected",
        "href": "fuse/selection/selected"
      },
      "titles": {
        "indexTitle": "Selected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Selected"
      }
    },
    {
      "id": {
        "id": "fuse/selection/selectionevent",
        "parentId": "fuse/selection",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selectionevent",
        "href": "fuse/selection/selectionevent"
      },
      "titles": {
        "indexTitle": "SelectionEvent",
        "fullyQualifiedIndexTitle": "Fuse.Selection.SelectionEvent"
      }
    },
    {
      "comment": {
        "brief": "This trigger is active while the @Selectable is currently selected in the @Selection",
        "full": "This trigger is active while the @Selectable is currently selected in the @Selection\n\nThis attaches to the first @Selectable node that is an ancestor of this one.\n\nConsider also the `isSelected()` function for use in expressions."
      },
      "id": {
        "id": "fuse/selection/whileselected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/whileselected",
        "href": "fuse/selection/whileselected"
      },
      "titles": {
        "indexTitle": "WhileSelected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.WhileSelected"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the element is added to the visual tree.",
        "full": "Triggers when the element is added to the visual tree.\n\n`AddingAnimation` is by default a backward animation, meaning it will\nanimate from progress 1 back to 0.\n\n## Example\n\nThe following example showcases a list that you can add elements to by\npressing a button. Elements added are animated in using an\n`AddingAnimation`:\n\n    <StackPanel Width=\"100%\">\n        <JavaScript>\n            var Observable = require('FuseJS/Observable');\n            var elements = Observable({value: \"Element\"});\n            function addElement() {\n                elements.add({value: \"Element\"});\n            }\n            module.exports = {elements, addElement};\n        </JavaScript>\n        <Each Items=\"{elements}\">\n            <Panel Width=\"100%\" >\n                <Text Value=\"{value}\" Alignment=\"CenterLeft\"/>\n                <AddingAnimation>\n                    <Move RelativeTo=\"Size\" Duration=\".2\" X=\"2\" />\n                </AddingAnimation>\n            </Panel>\n        </Each>\n        <Button Text=\"Add more\" Clicked=\"{addElement}\"/>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/addinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/addinganimation",
        "href": "fuse/triggers/addinganimation"
      },
      "titles": {
        "indexTitle": "AddingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.AddingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers if run on an Android device",
        "full": "Triggers if run on an Android device\n\n## Example\n\nThis example sets a panel's background color to green if the app is\nrunning on Android. If the app is ran on another platform, it will be\nred:\n\n    <Panel ux:Name=\"panel\" Background=\"#F00\" >\n        <Android>\n            <Change panel.Background=\"#0F0\" />\n        </Android>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/android",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/android",
        "href": "fuse/triggers/android"
      },
      "titles": {
        "indexTitle": "Android",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Android"
      }
    },
    {
      "comment": {
        "brief": "Pulses when the busy status of a node is cleared.",
        "full": "Pulses when the busy status of a node is cleared.\n\n`Completed` is used to respond to the completion of a preparation, loading, or other busy task.\n\nThis example draws attention to an `Image` when it has completed loading:\n\n    <Image Url=\"some_big_image\">\n        <Completed>\n            <Scale Factor=\"0.8\" Duration=\"0.4\"/>\n        </Completed>\n    </Image>\n\n`Completed` always fires, even if the node wasn't busy before. This makes it suitable for things that should always run. It also makes it useful in combination with other triggers. For example, the below scales the image when the navigation page is both active and completed.\n\n    <Page>\n        <Image Alignment=\"Center\" Url=\"some_image\" ux:Name=\"theImage\"/>\n        <WhileActive>\n            <Completed>\n                <Scale Target=\"theImage\" Factor=\"1.5\" Duration=\"0.3\"/>\n            </Completed>\n        </WhileActive>\n    </Page>"
      },
      "id": {
        "id": "fuse/triggers/completed",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/completed",
        "href": "fuse/triggers/completed"
      },
      "titles": {
        "indexTitle": "Completed",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Completed"
      }
    },
    {
      "comment": {
        "brief": "DEPRECATED: Use @WhileContainsText instead",
        "full": "DEPRECATED: Use @WhileContainsText instead"
      },
      "id": {
        "id": "fuse/triggers/containingtext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/containingtext",
        "href": "fuse/triggers/containingtext"
      },
      "titles": {
        "indexTitle": "ContainingText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ContainingText"
      }
    },
    {
      "comment": {
        "brief": "Triggers when an interaction completes.",
        "full": "Triggers when an interaction completes.\n\n`InteractionCompleted` indicates the user is done interacting with an\nelement, and is a counterpart to @WhileInteracting.\n\n## Example\n\nThe following example shows a blue panel with a slider on it. When\nfinishing a slide of the slider, the panel blinks red.\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <Slider >\n            <InteractionCompleted>\n                <Change DurationBack=\"0.5\" panel.Color=\"Red\"/>\n            </InteractionCompleted>\n        </Slider>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/interactioncompleted",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/interactioncompleted",
        "href": "fuse/triggers/interactioncompleted"
      },
      "titles": {
        "indexTitle": "InteractionCompleted",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.InteractionCompleted"
      }
    },
    {
      "comment": {
        "brief": "Triggers if run on an iOS device",
        "full": "Triggers if run on an iOS device\n\n## Example\n\nThis example sets a panel's background color to green if the app is\nrunning on iOS. If the app is ran on another platform, it will be red:\n\n    <Panel ux:Name=\"panel\" Background=\"#F00\" >\n        <iOS>\n            <Change panel.Background=\"#0F0\" />\n        </iOS>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/ios",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/ios",
        "href": "fuse/triggers/ios"
      },
      "titles": {
        "indexTitle": "iOS",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.iOS"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the layout of an element changes",
        "full": "Triggers when the layout of an element changes\n\nWhen an Element has certain properties like Width, Height or Margin\n(collectively reffered to as \"layout properties\") changed or when its\nlocation in the visual tree changes, we can trigger a `LayoutAnimation`.\n\nCalculating layout for a large UX-document can be quite costly. When\nanimating layout properties with Change animators, we run the risk of\nforcing a new layout to be calculated each frame. This can very easily\nlead to frame drops.\n\nThe `LayoutAnimation` trigger can be used to make this more pleasant.\nFor example, instead of animating the Width of an Element using Change,\nwe can use Set and react to this change using a LayoutAnimation. Inside\nLayoutAnimation we specify how our element should move/resize from its\nprevious position to its new position.\n\n## Example\n\nThis example shows three rectangles, a teal, a red and a blue one. If\nthe red or blue rectangle is clucked, the Width and Alignment\nproperties of the teal rectangle gets smoothly animated.\n\n    <StackPanel>\n        <Rectangle ux:Name=\"panel\" Width=\"100\" Height=\"100\" CornerRadius=\"5\" Color=\"Teal\" Alignment=\"Center\">\n            <LayoutAnimation>\n                <Resize X=\"1\" Y=\"1\" RelativeTo=\"SizeChange\" Duration=\"0.25\"/>\n                <Move X=\"1\" Y=\"1\" RelativeTo=\"PositionChange\" Duration=\"0.25\"/>\n            </LayoutAnimation>\n        </Rectangle>\n        <Rectangle Color=\"Red\" CornerRadius=\"5\" Width=\"100\" Height=\"50\">\n            <Clicked>\n                <Set panel.Alignment=\"Left\"/>\n                <Set panel.Width=\"200\"/>\n            </Clicked>\n        </Rectangle>\n        <Rectangle Color=\"Blue\" CornerRadius=\"5\" Width=\"100\" Height=\"50\">\n            <Clicked>\n                <Set panel.Alignment=\"Right\"/>\n                <Set panel.Width=\"50\"/>\n            </Clicked>\n        </Rectangle>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/layoutanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/layoutanimation",
        "href": "fuse/triggers/layoutanimation"
      },
      "titles": {
        "indexTitle": "LayoutAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.LayoutAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the back-button is pressed",
        "full": "Triggers when the back-button is pressed\n\nThis trigger fires when the user presses either a physical or emulated\nback button on their device.\n\n> Be aware that @Router also interacts with the back-button. Using both\n> OnBackButton and Router in the same application might lead to\n> undesired behavior.\n\n## Example\n\nThe following code will flash the screen blue when the back button is\npressed:\n\n    <Panel>\n        <Rectangle ux:Name=\"rect\" Layer=\"Background\" Color=\"#F00\" />\n        <OnBackButton>\n            <Change rect.Color=\"#00F\" Duration=\"0.2\" />\n        </OnBackButton>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/onbackbutton",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onbackbutton",
        "href": "fuse/triggers/onbackbutton"
      },
      "titles": {
        "indexTitle": "OnBackButton",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnBackButton"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a specific key is pressed",
        "full": "Triggers when a specific key is pressed\n\nFor a complete list of supported keys, check out the @Key enum list.\n\n> Please note that not all platforms support all settings for Key.\n\n## Example\n\nThe following example will flash the screen blue when the \"menu\" button\n(which is present on some older Android devices) is pressed:\n\n    <Panel>\n        <Rectangle ux:Name=\"rect\" Layer=\"Background\" Color=\"#F00\" />\n        <OnKeyPress Key=\"MenuButton\">\n            <Change rect.Color=\"#00F\" Duration=\"0.2\" />\n        </OnKeyPress>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/onkeypress",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onkeypress",
        "href": "fuse/triggers/onkeypress"
      },
      "titles": {
        "indexTitle": "OnKeyPress",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnKeyPress"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @UserEvent is raised.",
        "full": "Triggers when a @UserEvent is raised.\n\n> *Note:* See [this article](/docs/basics/creating-components#events-userevent)\n> for a more complete explanation of user events.\n\nBy default, `OnUserEvent` will only listen for events that are\ndeclared in one of its ancestor nodes. If you want to listen for\nevents coming from anywhere, set the `Filter` property to `Global`.\n\n`OnUserEvent` also lets you attach a JavaScript handler to the event.\n\n    <OnUserEvent EventName=\"myEvent\" Handler=\"{myHandler}\" />\n\nThe handler function is called with the arguments that were passed\nwith the event as a plain JavaScript object.\n\n## Example\n\nThis example defines a @UserEvent and triggers it when the panel\nis clicked:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <UserEvent Name=\"myEvent\"/>\n        <OnUserEvent EventName=\"myEvent\">\n            <Change panel.Color=\"Red\" DurationBack=\"0.5\" />\n        </OnUserEvent>\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\" />\n        </Clicked>\n    </Panel>\n\nThis example illustrates how you can read the arguments that were\npassed with the event from a JavaScript handler.\n\n    <UserEvent ux:Name=\"myEvent\" />\n\n    <Panel Color=\"#123\">\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\">\n                <UserEventArg Name=\"myArgument\" StringValue=\"Some value\" />\n            </RaiseUserEvent>\n        </Clicked>\n    </Panel>\n\n    <OnUserEvent EventName=\"myEvent\" Handler=\"{eventHandler}\" />\n\n    <JavaScript>\n        function eventHandler(args) {\n            console.log(\"myEvent raised with argument 'myArgument': \" + args.myArgument);\n        }\n\n        module.exports = { eventHandler: eventHandler };\n    </JavaScript>"
      },
      "id": {
        "id": "fuse/triggers/onuserevent",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onuserevent",
        "href": "fuse/triggers/onuserevent"
      },
      "titles": {
        "indexTitle": "OnUserEvent",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnUserEvent"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @WebView begins loading a page",
        "full": "Triggers when a @WebView begins loading a page\n\n## Example\n\nThis example will blink the blue background red when the page begins\nloading:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <NativeViewHost Height=\"50%\">\n            <WebView Url=\"http://interwebs.com\">\n                <PageBeginLoading>\n                    <Change DurationBack=\"0.5\" panel.Color=\"Red\" />\n                </PageBeginLoading>\n            </WebView>\n        </NativeViewHost>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/pagebeginloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pagebeginloading",
        "href": "fuse/triggers/pagebeginloading"
      },
      "titles": {
        "indexTitle": "PageBeginLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PageBeginLoading"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @WebView finishes loading a page",
        "full": "Triggers when a @WebView finishes loading a page\n\n## Example\n\nThis example will blink the blue background green when the page finishes\nloading:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <NativeViewHost Height=\"50%\">\n            <WebView Url=\"http://interwebs.com\">\n                <PageLoaded>\n                    <Change DurationBack=\"0.5\" panel.Color=\"Green\" />\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/pageloaded",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pageloaded",
        "href": "fuse/triggers/pageloaded"
      },
      "titles": {
        "indexTitle": "PageLoaded",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PageLoaded"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @Slider or other compatible control changes its value.",
        "full": "Triggers when a @Slider or other compatible control changes its value.\n\nProgressAnimation can be used together with a slider to animate\nelements as one slides its thumb. ProgressAnimation always goes from\n0 to 1 as one slides the slider from its minimum value to its maximum\nvalue.\n\n## Example\n\nThis example shows a slider, and blurs the slider itself with the\nblur-radius taken from the slider-value:\n\n    <Panel Color=\"Black\">\n        <Slider>\n            <Blur ux:Name=\"blur\" Radius=\"0\"/>\n            <ProgressAnimation>\n                <Change blur.Radius=\"10\"/>\n            </ProgressAnimation>\n        </Slider>\n    </Panel>\n\n## Compatible controls\n\nProgressAnimation works with classes that implement `Fuse.Triggers.IProgress`.\n\n[subclass Fuse.Triggers.IProgress]"
      },
      "id": {
        "id": "fuse/triggers/progressanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/progressanimation",
        "href": "fuse/triggers/progressanimation"
      },
      "titles": {
        "indexTitle": "ProgressAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ProgressAnimation"
      }
    },
    {
      "comment": {
        "brief": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.",
        "full": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.\n\nIt is implemented as a `ScrollingAnimation`, with a set of properties that let you bind different states that should be triggered during different stages of interaction:\n\n* Pulling - Active when the user is actively pulling down beond the top of the content\n* PulledPastThreshold - Active when the user has pulled down enough to activate loading\n* Loading - Active when the \"loading\" has started. Loading starts when the user has pulled past the threshold, and then leaves the threshold area.\n* Rest - Active when the user has pulled down the content, but their last movement was upwards.\nIn addition, you have a callback, `ReloadHandler`, which is called when the `Loading` state activates.\n\n* Note that `PullToReload` inherits from @ScrollingAnimation and therefore can be tweaked further using its properties. Here is an example of how we can tweak it to be pulled from the bottom instead using the `Range` property from `ScrollingAnimation`:\n\n```\n<PullToReload Range=\"SnapMax\">\n    ...\n</PullToReload>\n```\n\nSee the [Pull to reload](/examples/pull-to-reload), for a complete example on how to use it.\n\n# Example\n\nThe following example flashes the app background in different colors as the different states of the `PullToReload` happen:\n\n    <ScrollView>\n        <PullToReload>\n            <Timeline ux:Name=\"redFlash\">\n                <Change color.Color=\"#F00\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"pinkFlash\">\n                <Change color.Color=\"#FFC0DB\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"greenFlash\">\n                <Change color.Color=\"#0F0\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"blueFlash\">\n                <Change color.Color=\"#00F\" Duration=\"1\"/>\n            </Timeline>\n            <State ux:Binding=\"Pulling\">\n                <Cycle Target=\"redFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"PulledPastThreshold\">\n                <Cycle Target=\"pinkFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Loading\">\n                <Cycle Target=\"greenFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Rest\">\n                <Cycle Target=\"blueFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n        </PullToReload>\n        <StackPanel>\n            <Text Margin=\"20\">The quick brown fox</Text>\n            <Text Margin=\"20\">Jumps over the lazy dog</Text>\n        </StackPanel>\n        <SolidColor ux:Name=\"color\" Color=\"#FFF\"/>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/pulltoreload",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pulltoreload",
        "href": "fuse/triggers/pulltoreload"
      },
      "titles": {
        "indexTitle": "PullToReload",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PullToReload"
      }
    },
    {
      "comment": {
        "brief": "A common base for pulse-like triggers (thus that pulse when an event is triggered).",
        "full": "A common base for pulse-like triggers (thus that pulse when an event is triggered).\n\nNOTE: Not all the pulse-like triggers have been migrated to this base class yet."
      },
      "id": {
        "id": "fuse/triggers/pulsetrigger_1",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pulsetrigger_1",
        "href": "fuse/triggers/pulsetrigger_1"
      },
      "titles": {
        "indexTitle": "PulseTrigger<ArgsT>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PulseTrigger<ArgsT>"
      }
    },
    {
      "comment": {
        "brief": "Animates using a value clamped between a minimum and a maximum as progress.",
        "full": "Animates using a value clamped between a minimum and a maximum as progress.\n\nThis is useful when you want to animate something between two arbitrary values.\n\n## Example\nIn this example, an @(RangeAnimation) is used to animate a panel 360 degrees as a @(RangeControl2D) goes from 0 to 100.\n\n    <RangeControl2D Width=\"180\" Height=\"180\" Margin=\"2\" ux:Name=\"rangeControl\">\n        <CircularRangeBehavior/>\n        <Panel ux:Name=\"thumb\" Margin=\"4\">\n            <Rectangle Color=\"#fff\" Alignment=\"Right\" Height=\"18\" Width=\"48\" CornerRadius=\"4\" />\n        </Panel>\n        <RangeAnimation Minimum=\"0\" Maximum=\"100\" Value=\"{ReadProperty rangeControl.ValueX}\">\n            <Rotate Target=\"thumb\" Degrees=\"360\" />\n        </RangeAnimation>\n        <Circle Color=\"#aaa\" />\n    </RangeControl2D>"
      },
      "id": {
        "id": "fuse/triggers/rangeanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/rangeanimation",
        "href": "fuse/triggers/rangeanimation"
      },
      "titles": {
        "indexTitle": "RangeAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.RangeAnimation"
      }
    },
    {
      "comment": {
        "brief": "Animates when the parent element is removed",
        "full": "Animates when the parent element is removed\n\nThis is very commonly used together with lists of items.\n\n#Example\nThe following example contains a list, where every item plays a `RemovingAnimation` as they are removed:\n\n    <JavaScript>\n        var Observable = require('FuseJS/Observable');\n        var list = Observable(\"Dog\", \"Cat\", \"Horse\");\n        function rm(data) {\n            list.remove(data.data);\n        }\n        module.exports = {\n            data: list,\n            rm: rm\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{data}\" >\n            <Panel>\n                <Button Margin=\"10\" Alignment=\"CenterRight\" Text=\"Delete\" Clicked=\"{rm}\"/>\n                <Rectangle Height=\"1\" Alignment=\"Bottom\">\n                    <Stroke Color=\"#DDD\" />\n                </Rectangle>\n                <Text Margin=\"10\" Value=\"data()\" />\n                <RemovingAnimation>\n                    <Move RelativeTo=\"Size\" X=\"-1\" Duration=\"0.4\" Easing=\"CircularOut\" />\n                </RemovingAnimation>\n            </Panel>\n        </Each>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/removinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/removinganimation",
        "href": "fuse/triggers/removinganimation"
      },
      "titles": {
        "indexTitle": "RemovingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.RemovingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the ScrollView is scrolled to within a specified region.",
        "full": "Triggers when the ScrollView is scrolled to within a specified region.\n\n`Scrolled` triggers only once when the ScrollView enters the region. It will not trigger again until the scrolling leaves and comes back. See the `check` function if you need to force a recheck."
      },
      "id": {
        "id": "fuse/triggers/scrolled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/scrolled",
        "href": "fuse/triggers/scrolled"
      },
      "titles": {
        "indexTitle": "Scrolled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Scrolled"
      }
    },
    {
      "comment": {
        "brief": "Animates over a given scroll range.",
        "full": "Animates over a given scroll range.\n\nThis trigger allows you to animate properties based on the absolute position of a @ScrollView.\n\nIn this example, we remove a top ledge as a ScrollView scrolls down:\n\n    <Panel>\n        <Panel Alignment=\"Top\" Height=\"50\" ux:Name=\"ledge\">\n            <Text Alignment=\"Center\" TextAlignment=\"Center\" Color=\"#fff\" Value=\"TopLedge\" />\n            <Rectangle  Fill=\"#000\" />\n        </Panel>\n        <ScrollView>\n            <ScrollingAnimation From=\"0\" To=\"50\">\n                <Change ledge.Opacity=\"0\" />\n            </ScrollingAnimation>\n            <StackPanel>\n                <!-- Block out the top ledge in the scrollview -->\n                <Panel Height=\"50\" />\n                <!-- ... Content ... -->\n            </StackPanel>\n        </ScrollView>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/scrollinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/scrollinganimation",
        "href": "fuse/triggers/scrollinganimation"
      },
      "titles": {
        "indexTitle": "ScrollingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ScrollingAnimation"
      }
    },
    {
      "comment": {
        "brief": "A @Trigger that is managed by a @StateGroup.",
        "full": "A @Trigger that is managed by a @StateGroup.\n\nSee @StateGroup for more information."
      },
      "id": {
        "id": "fuse/triggers/state",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/state",
        "href": "fuse/triggers/state"
      },
      "titles": {
        "indexTitle": "State",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.State"
      }
    },
    {
      "comment": {
        "brief": "Trigger for input action",
        "full": "Trigger for input action\n\nTriggers when the returnkey on the keyboard is clicked.\n\n## Example\n\n    <TextInput PlaceholderText=\"Example\">\n        <TextInputActionTriggered>\n            <DebugAction Message=\"TextInputActionTriggered\" />\n        </TextInputActionTriggered>\n    </TextInput>"
      },
      "id": {
        "id": "fuse/triggers/textinputactiontriggered",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/textinputactiontriggered",
        "href": "fuse/triggers/textinputactiontriggered"
      },
      "titles": {
        "indexTitle": "TextInputActionTriggered",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.TextInputActionTriggered"
      }
    },
    {
      "comment": {
        "brief": "Groups several animations together",
        "full": "Groups several animations together\n\nThis allows for a nice way of grouping several animations together and separating them from the interaction logic.\n\nA `Timeline` can be played by animating its `TargetProgress` property between 0 and 1.\n\n> **Note:** `Timeline` itself is *not* intended for grouping multiple animators to create keyframe animations.\n> To achieve this, you can add @Keyframes to the animators themselves.\n>\n> *Incorrect:*\n>\n> ```\n> <Timeline>\n>     <Change rect.Opacity=\"1\" Delay=\"0.0\" Duration=\"0.5\" />\n>     <Change rect.Opacity=\"0\" Delay=\"0.5\" Duration=\"0.5\" />\n> </Timeline>\n> ```\n>\n> *Correct:*\n>\n> ```\n> <Timeline>\n>     <Change Target=\"rect.Opacity\">\n>         <Keyframe Value=\"1\" Time=\"0.5\" />\n>         <Keyframe Value=\"0\" Time=\"1.0\" />\n>     </Change>\n> </Timeline>\n> ```\n\n## Example\n\nHere is an example of how we can use a timeline to animate several properties on a rectangle (its width and color), and then play between the start and end of this `Timeline` by clicking two buttons.\n\n    <StackPanel>\n        <Rectangle ux:Name=\"rect\" Height=\"40\" Width=\"100%\">\n            <SolidColor ux:Name=\"color\" Color=\"#f00\" />\n        </Rectangle>\n        <Grid ColumnCount=\"2\">\n            <Button Text=\"Red\">\n                <Clicked>\n                    <Set timeline.TargetProgress=\"0\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Green\">\n                <Clicked>\n                    <Set timeline.TargetProgress=\"1\" />\n                </Clicked>\n            </Button>\n        </Grid>\n\n        <Timeline ux:Name=\"timeline\">\n            <Change Target=\"rect.Width\">\n                <Keyframe Value=\"10\" Time=\"0.3\"/>\n                <Keyframe Value=\"100\" Time=\"0.6\"/>\n            </Change>\n            <Change color.Color=\"#0f0\" Duration=\"0.3\" Delay=\"0.3\"/>\n        </Timeline>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/timeline",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/timeline",
        "href": "fuse/triggers/timeline"
      },
      "titles": {
        "indexTitle": "Timeline",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Timeline"
      }
    },
    {
      "comment": {
        "brief": "Controls the animations for page-to-page transitions in a `Navigator`.",
        "full": "Controls the animations for page-to-page transitions in a `Navigator`.\n\nUnlike the `EnteringAnimation` and `ExitingAnimation` triggers, `Transition` allows you to make different animations depending on which page is being navigating to, or away from.\r\n\r\n# Example\r\n\r\n\t<Page ux:Template=\"Main\">\r\n\t\t<Transition To=\"Contacts\">\r\n\t\t\t<Move X=\"-1\" RelativeTo=\"ParentSize\" Duration=\"1\"/>\r\n\t\t</Transition>\r\n\t\t<Transition>\r\n\t\t\t<Move Y=\"1\" RelativeTo=\"ParentSize\" Duration=\"1\"/>\r\n\t\t</Transition>\r\n\t</Page>\r\n\t\r\nThis page has a special transition if navigating to the `Contacts` page. In this case it will slide the page to the left. All other transitions away from this page will slide down.\r\n\r\n# To / From\r\n\r\nEvery navigation change defines a \"To\" and \"From\" page. In `Transition` these are always defined as the the forward ordering of the pages in the navigation. This ensures that when navigating backward (such as using `goBack`) the same transitions will be used, but done in reverse.\r\n\r\nFor example, a `<Transition To=\"Contacts\">` matches a forward transition to the `Contacts` page, as well as a backwards transition from the `Contacts` page to this one.\r\n\r\nSimilarly, a `<Transtion From=\"Main\">` matches a forward transition from the `Main` page, as well as a backwards transition from this page to the `Main` page.\r\n\r\n# Priority\r\n\r\nOnly one `Transition`, the one with the highest priority, will be selected for each page change. The priority ordering is:\r\n\r\n- A `Style` match on the operational style\r\n- `Interaction` match other than `Any`\r\n- `To` page name match\r\n- `From` page name match\r\n- `Direction` of `ToBack`, `FromBack`, `ToFront`, `FromFront`\r\n- `Direction` of `ToActive`, `ToInactive`\r\n- `Direction` of `InFront`, `Behind`\r\n- `Direction` `Any`\r\n\r\nIf no matching `Transition` is found then a default one will be created according to the [Navigator.Transition](api:fuse/controls/navigationcontrol/transition) property. If you don't want a default then specify a final fallback transition without properties `<Transition>`.\r\n\r\n# Play direction\r\n\r\nIf the page is becoming inactive the transition will be played forward. If the page is becoming active the transition will be played backward. This means the transition is always defining the animation towards the inactive state.\r\n\r\nWith certain combinations of properties this may at first seem odd, for example:\r\n\r\n\t<Transition Direction=\"ToActive\">\r\n\t\t<Move X=\"100\" Duration=\"1\"/>\r\n\t</Transition>\r\n\t\r\nThis `Transition` is only selected when the page is becoming the active one. The animation will start at `X=100` and move towards `X=0` over a duration of `1`.\r\n\r\nThe final state of any active page is always with all transitions deactivated.\r\n\r\n\r\n\n## Extended Example\n\nThe [Transition Example](https://github.com/fusetools/fuse-samples/tree/master/Samples/UIStructure/Transition) shows a variety of page transitions using `Transition`."
      },
      "id": {
        "id": "fuse/triggers/transition",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/transition",
        "href": "fuse/triggers/transition"
      },
      "titles": {
        "indexTitle": "Transition",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Transition"
      }
    },
    {
      "comment": {
        "brief": "Triggers are the main tools for interaction response, transitions and animation in Fuse.",
        "full": "Triggers are the main tools for interaction response, transitions and animation in Fuse.\n\nTriggers are objects that can be used in UX markup that detect events, gestures, other user input or\nchanges of state in your app, and performs animations and actions in response.\n\nWhen a trigger is *activated*, it performs a *timeline of actions* based on what objects you put inside\nthe trigger tag.\n\nTriggers can contain the following types of child-nodes in UX Markup:\n\n* @Animators that animate properties, transforms or effects when the trigger is active\n* @Actions that perform actions with permanent effects, or call back to JavaScript when the trigger activates.\n* @Nodes (visuals, behaviors, other triggers) that are added to the parent visual while the trigger is active.\n* @Resources (nodes marked with `ux:Key=\"your_key\"`), which overrides `{Resource your_key}` for the parent scope while the trigger is active.\n\n> See the [remarks section](#section-remarks) at the bottom of this page for more information\n\n## Available triggers in Fuse\n\n[subclass Fuse.Triggers.Trigger]",
        "attributes": {
          "topic": "Triggers and animation"
        }
      },
      "id": {
        "id": "fuse/triggers/trigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/trigger",
        "href": "fuse/triggers/trigger"
      },
      "titles": {
        "indexTitle": "Trigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Trigger"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilebool",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebool",
        "href": "fuse/triggers/whilebool"
      },
      "titles": {
        "indexTitle": "WhileBool",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBool"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active whenever a sibling or parent is marked as busy.",
        "full": "A trigger that is active whenever a sibling or parent is marked as busy.\n\nUX nodes can mark themselves as busy, meaning that they are currently waiting on some background task and are not ready for rendering.\nThis can be anything from making a HTTP request to performing an expensive computation.\nWe can use WhileBusy to react to this, as it will be activated while a sibling or parent node is marked as busy.\n\n> *Note:* You can use the [FuseJS/BusyTask API](/docs/fuse/triggers/busytaskmodule) to mark nodes as busy via JavaScript.\n\n## Example\n\nThe following example displays an @Image from a URL, and a text while it's loading.\n\n    <Image Url=\"SOME_IMAGE_URL\">\n        <WhileBusy>\n            <Text Value=\"Loading...\" />\n        </WhileBusy>\n    </Image>\n\nWhen a node is marked as busy, its ancestors are also considered busy.\nThis lets us react to multiple busy nodes in the same trigger.\nIn the following example we have two @Images loaded via HTTP, and a \"Loading...\" indicator that fades to transparency after both images have downloaded.\n\n    <Panel>\n        <Panel ux:Name=\"loadingPanel\" Opacity=\"0\" Alignment=\"Top\">\n            <Text>Loading...</Text>\n        </Panel>\n        <WhileBusy>\n            <Change loadingPanel.Opacity=\"1\" Duration=\"0.5\" />\n        </WhileBusy>\n        <StackPanel>\n            <Image Url=\"SOME_IMAGE_URL\" />\n            <Image Url=\"SOME_OTHER_IMAGE_URL\" />\n        </StackPanel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whilebusy",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebusy",
        "href": "fuse/triggers/whilebusy"
      },
      "titles": {
        "indexTitle": "WhileBusy",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBusy"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is completed.",
        "full": "Active while the @Video is completed.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilecompleted",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecompleted",
        "href": "fuse/triggers/whilecompleted"
      },
      "titles": {
        "indexTitle": "WhileCompleted",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileCompleted"
      }
    },
    {
      "comment": {
        "brief": "Active while the surrounding context contains text.",
        "full": "Active while the surrounding context contains text.\n\nCan be used, for instance, inside @TextInputs.\n\n## Example\n\nThis example displays a warning text unless the user has entered some text into\na password field:\n\n    <StackPanel>\n        <TextInput IsPassword=\"True\">\n            <WhileContainsText>\n                <Change warningText.Visibility=\"Hidden\" />\n            </WhileContainsText>\n        </TextInput>\n        <Text Color=\"Red\" ux:Name=\"warningText\">You must enter a password!</Text>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/whilecontainstext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecontainstext",
        "href": "fuse/triggers/whilecontainstext"
      },
      "titles": {
        "indexTitle": "WhileContainsText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileContainsText"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `False`.",
        "full": "Active while the `IsEnabled` property of its containing element is `False`."
      },
      "id": {
        "id": "fuse/triggers/whiledisabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiledisabled",
        "href": "fuse/triggers/whiledisabled"
      },
      "titles": {
        "indexTitle": "WhileDisabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileDisabled"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `True`.",
        "full": "Active while the `IsEnabled` property of its containing element is `True`.\n\n# Example\nThis example shows a panel that is rotated 45 degrees. It will always be rotated 45 degrees, as `IsEnabled` is `true` by default.\n\n    <Panel  Width=\"50\" Height=\"50\" Background=\"Red\" >\n        <WhileEnabled>\n            <Rotate Degrees=\"45\" Duration=\"0.5\"/>\n        </WhileEnabled>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whileenabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenabled",
        "href": "fuse/triggers/whileenabled"
      },
      "titles": {
        "indexTitle": "WhileEnabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabled"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whileenableddisabledtrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenableddisabledtrigger",
        "href": "fuse/triggers/whileenableddisabledtrigger"
      },
      "titles": {
        "indexTitle": "WhileEnabledDisabledTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabledDisabledTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while the context has failed.",
        "full": "Active while the context has failed.\n\nThis trigger can be used inside a @Video, an @Image, or an @Each element.\n\n`<WhileFailed>` is equivalent to `<WhileBusy Activity=\"Failed\" IsHandled=\"true\"/>`"
      },
      "id": {
        "id": "fuse/triggers/whilefailed",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefailed",
        "href": "fuse/triggers/whilefailed"
      },
      "titles": {
        "indexTitle": "WhileFailed",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFailed"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `false`.",
        "full": "A trigger that is active while its `Value` property is `false`.\n\n> *Note*\n>\n> This is the exact opposite from @WhileTrue.\n> Head over there for documentation and examples."
      },
      "id": {
        "id": "fuse/triggers/whilefalse",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefalse",
        "href": "fuse/triggers/whilefalse"
      },
      "titles": {
        "indexTitle": "WhileFalse",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFalse"
      }
    },
    {
      "comment": {
        "brief": "Active when the `float` `Value` fulfills some criteria.",
        "full": "Active when the `float` `Value` fulfills some criteria."
      },
      "id": {
        "id": "fuse/triggers/whilefloat",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefloat",
        "href": "fuse/triggers/whilefloat"
      },
      "titles": {
        "indexTitle": "WhileFloat",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFloat"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is in focus.",
        "full": "Active whenever its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocused",
        "href": "fuse/triggers/whilefocused"
      },
      "titles": {
        "indexTitle": "WhileFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocused"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a child of its containing element is in focus.",
        "full": "Active whenever a child of its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocuswithin",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocuswithin",
        "href": "fuse/triggers/whilefocuswithin"
      },
      "titles": {
        "indexTitle": "WhileFocusWithin",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocusWithin"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is interacting with the surrounding element.",
        "full": "Active while the user is interacting with the surrounding element.\n\n`WhileInteracting` is active in a @SwipeGesture while the user is swiping, and in a @ScrollView when the user is scrolling.\n\n## Example\n\nThe following example shows a @Panel whose background color changes when the user is interacting with the @ScrollView surrounding it:\n\n    <ScrollView Alignment=\"VerticalCenter\" ClipToBounds=\"False\">\n        <Panel ux:Name=\"coloredPanel\" Background=\"#f00\" HitTestMode=\"LocalBoundsAndChildren\" MinHeight=\"200\">\n            <Text Alignment=\"Center\" TextColor=\"#fff\">Scroll me!</Text>\n        </Panel>\n\n        <WhileInteracting>\n            <Change coloredPanel.Background=\"#00f\" />\n        </WhileInteracting>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/whileinteracting",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileinteracting",
        "href": "fuse/triggers/whileinteracting"
      },
      "titles": {
        "indexTitle": "WhileInteracting",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileInteracting"
      }
    },
    {
      "comment": {
        "brief": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices.",
        "full": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices."
      },
      "id": {
        "id": "fuse/triggers/whilekeyboardvisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilekeyboardvisible",
        "href": "fuse/triggers/whilekeyboardvisible"
      },
      "titles": {
        "indexTitle": "WhileKeyboardVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileKeyboardVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while a resource in the surrounding context is loading.",
        "full": "Active while a resource in the surrounding context is loading.\n\nThis trigger can be used inside a @Video, @Image, or @Text element.\n\n## Example\n\nThe following example will display some text while an image resource is loading via URL:\n\n    <StackPanel>\n        <Image Url=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/Kitten_and_partial_reflection_in_mirror.jpg\">\n            <WhileLoading>\n                <Change showLoadingText.Value=\"True\" />\n            </WhileLoading>\n        </Image>\n\n        <WhileTrue ux:Name=\"showLoadingText\">\n            <Text>Image is loading...</Text>\n        </WhileTrue>\n    </StackPanel>\n\n`<WhileLoading>` is equivalent to `<WhileBusy Activity=\"Loading\">`."
      },
      "id": {
        "id": "fuse/triggers/whileloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileloading",
        "href": "fuse/triggers/whileloading"
      },
      "titles": {
        "indexTitle": "WhileLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileLoading"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is not in focus.",
        "full": "Active whenever its containing element is not in focus.\n\nThe inverse of @WhileFocused."
      },
      "id": {
        "id": "fuse/triggers/whilenotfocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilenotfocused",
        "href": "fuse/triggers/whilenotfocused"
      },
      "titles": {
        "indexTitle": "WhileNotFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileNotFocused"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its parent @WebView is loading.",
        "full": "A trigger that is active while its parent @WebView is loading.\n\n## Example\n\nThe following example displays a loading indicator while the @WebView is loading a page.\n\n    <NativeViewHost>\n        <Panel ux:Name=\"loadingIndicator\" Opacity=\"0\" Alignment=\"Bottom\" Color=\"#0006\">\n            <Text Alignment=\"Center\" Margin=\"10\" Color=\"#fff\">Loading...</Text>\n        </Panel>\n\n        <WebView Url=\"https://example.com/\">\n            <WhilePageLoading>\n                <Change loadingIndicator.Opacity=\"1\" Duration=\"0.2\" />\n            </WhilePageLoading>\n        </WebView>\n    </NativeViewHost>"
      },
      "id": {
        "id": "fuse/triggers/whilepageloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepageloading",
        "href": "fuse/triggers/whilepageloading"
      },
      "titles": {
        "indexTitle": "WhilePageLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePageLoading"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is paused.",
        "full": "Active while the @Video is paused.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilepaused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepaused",
        "href": "fuse/triggers/whilepaused"
      },
      "titles": {
        "indexTitle": "WhilePaused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePaused"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is playing.",
        "full": "Active while the @Video is playing.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whileplaying",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileplaying",
        "href": "fuse/triggers/whileplaying"
      },
      "titles": {
        "indexTitle": "WhilePlaying",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePlaying"
      }
    },
    {
      "comment": {
        "brief": "Active when a @ScrollView can be scrolled.",
        "full": "Active when a @ScrollView can be scrolled.\n\nUse the `ScrollDirections` property to filter the activation\nbased on which direction you're interested in.\n\n# Example\n\nIn the following example, our background changes color when we reach the bottom of our @(ScrollView):\n\n    <ScrollViewer>\n        <SolidColor ux:Name=\"color\" Color=\"#000\"/>\n        <StackPanel Margin=\"10\">\n            <Each Count=\"10\">\n                <Panel Height=\"200\" Background=\"Red\" Margin=\"2\"/>\n            </Each>\n        </StackPanel>\n        <WhileScrollable ScrollDirections=\"Down\">\n            <Change color.Color=\"#ddd\" Duration=\"0.4\"/>\n        </WhileScrollable>\n    </ScrollViewer>\n\n@example Docs/WhileScrollable.md"
      },
      "id": {
        "id": "fuse/triggers/whilescrollable",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrollable",
        "href": "fuse/triggers/whilescrollable"
      },
      "titles": {
        "indexTitle": "WhileScrollable",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrollable"
      }
    },
    {
      "comment": {
        "brief": "Is active while the @ScrollView is scrolled within a given region.",
        "full": "Is active while the @ScrollView is scrolled within a given region.\n\nThis defines the region the same way as @Scrolled"
      },
      "id": {
        "id": "fuse/triggers/whilescrolled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrolled",
        "href": "fuse/triggers/whilescrolled"
      },
      "titles": {
        "indexTitle": "WhileScrolled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrolled"
      }
    },
    {
      "comment": {
        "brief": "Activate when the condition on the string value is true",
        "full": "Activate when the condition on the string value is true"
      },
      "id": {
        "id": "fuse/triggers/whilestring",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilestring",
        "href": "fuse/triggers/whilestring"
      },
      "titles": {
        "indexTitle": "WhileString",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileString"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whiletrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiletrigger",
        "href": "fuse/triggers/whiletrigger"
      },
      "titles": {
        "indexTitle": "WhileTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrigger"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `true`.",
        "full": "A trigger that is active while its `Value` property is `true`.\n\n## Examples\n\nBy default, the value of a `WhileTrue` is `false`.\n\n    <WhileTrue>\n        <!-- Any actions/animators placed here will never be triggered -->\n    </WhileTrue>\n\nYou can, however, use @Set to change its value.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <Clicked>\n            <Set moveToTheRight.Value=\"true\" />\n        </Clicked>\n\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n    </Panel>\n\nIts value can also be toggled on and off using @Toggle.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n\n        <Clicked>\n            <Toggle Target=\"moveToTheRight\" />\n        </Clicked>\n    </Panel>\n\nIt is also particularly useful to data-bind `Value` to an @Observable.\n\nThe following example consists of a @TextBox, as well as a @Button that fades to full transparency while\nthe user has entered less than 6 characters into the @TextBox.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        var password = Observable(\"\");\n        var isPasswordInvalid = password.map(function(value) {\n            return value.length < 6;\n        });\n\n        module.exports = {\n            password: password,\n            isPasswordInvalid: isPasswordInvalid\n        };\n    </JavaScript>\n\n    <StackPanel Alignment=\"VerticalCenter\" ItemSpacing=\"50\" Margin=\"50\">\n        <TextBox Value=\"{password}\" IsPassword=\"true\" />\n        <Button Text=\"Log in\" ux:Name=\"loginButton\" />\n\n        <WhileTrue Value=\"{isPasswordInvalid}\">\n            <Change loginButton.Opacity=\"0\" Duration=\"0.3\" />\n        </WhileTrue>\n    </StackPanel>\n\n## Instance\n\nThe children of `WhileTrue` are created whether the `Value` is true or false; this is the standard behavior of all triggers. If you need to prevent item creation when the value is false, consider using an `Instance` instead and bind to the `IsEnabled` property."
      },
      "id": {
        "id": "fuse/triggers/whiletrue",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiletrue",
        "href": "fuse/triggers/whiletrue"
      },
      "titles": {
        "indexTitle": "WhileTrue",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrue"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilevalue_1",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevalue_1",
        "href": "fuse/triggers/whilevalue_1"
      },
      "titles": {
        "indexTitle": "WhileValue<T>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileValue<T>"
      }
    },
    {
      "comment": {
        "brief": "Active when the parent element is visible.",
        "full": "Active when the parent element is visible."
      },
      "id": {
        "id": "fuse/triggers/whilevisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisible",
        "href": "fuse/triggers/whilevisible"
      },
      "titles": {
        "indexTitle": "WhileVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while an element is positioned within the visible area of the @ScrollView.",
        "full": "Active while an element is positioned within the visible area of the @ScrollView.\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{images}\">\n                <DockPanel Height=\"100\">\n                    <Image Url=\"{source}\" MemoryPolicy=\"UnloadUnused\" Dock=\"Left\"\n                        Visibility=\"Hidden\" ux:Name=\"theImage\"/>\n                    <Text Value=\"{description}\" TextWrapping=\"Wrap\"/>\n\n                    <WhileVisibleInScrollView>\n                        <Change theImage.Visibility=\"Visible\"/>\n                    </WhileVisibleInScrollView>\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\nThis example will show the images only when they are actually in the visible area. Combined with the `UnloadUnused` memory policy this will allow the memory to be freed when they aren't visible to the user.\n\nIf the panel has a fixed height, as in this example, you could also collapse the text to save the calculation and rendering time.\n\nYou would also use this trigger if you wish to animate something within a ScrollView. There's no point in animating something the user can't actually see; using the trigger can save resources by not animating things that aren't visible.\n\nNote that the element itself need not necessarily be visible, but just have a layout that positions it in the visible area. `Visibility=\"Hidden\"` on a @Visual does not prevent the activiation of this trigger.\n\nThis trigger responds to changes in scroll position. Layout changes on the element will also update the status but layout changes further up the tree may not update the status (we do not have an efficient way to monitor for global positioning changes)."
      },
      "id": {
        "id": "fuse/triggers/whilevisibleinscrollview",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisibleinscrollview",
        "href": "fuse/triggers/whilevisibleinscrollview"
      },
      "titles": {
        "indexTitle": "WhileVisibleInScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisibleInScrollView"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilewindowaspect",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowaspect",
        "href": "fuse/triggers/whilewindowaspect"
      },
      "titles": {
        "indexTitle": "WhileWindowAspect",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowAspect"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport width is larger than its height.",
        "full": "Active when the app's viewport width is larger than its height.\n\n## Example\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in landscape.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowLandscape>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowLandscape>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowlandscape",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowlandscape",
        "href": "fuse/triggers/whilewindowlandscape"
      },
      "titles": {
        "indexTitle": "WhileWindowLandscape",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowLandscape"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport height is larger than or equal to its width.",
        "full": "Active when the app's viewport height is larger than or equal to its width.\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in portrait.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowPortrait>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowPortrait>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowportrait",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowportrait",
        "href": "fuse/triggers/whilewindowportrait"
      },
      "titles": {
        "indexTitle": "WhileWindowPortrait",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowPortrait"
      }
    },
    {
      "comment": {
        "brief": "Active while the size of the app's viewport fulfills some given constraints.",
        "full": "Active while the size of the app's viewport fulfills some given constraints.\n\nConstraints are specified via the @GreaterThan, @LessThan and @EqualTo\nproperties. Each constraint must be provided as a pair of numbers,\nrepresenting the target width and height (in points) to match against.\n\nNote that both the X and Y axis must satisfy the constraints you provide.\n\n## Examples\n\nThe following example changes the color of `myRect` if the size of the\napp's viewport exceeds 400x400 points.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#f00\" />\n    <WhileWindowSize GreaterThan=\"400,400\">\n        <Change myRect.Color=\"#00f\" Duration=\".5\"/>\n    </WhileWindowSize>\n\nIf you want to match on a single axis only, you can provide a value for\nthe other axis that is greater than zero, and that you can safely assume\nwill always match.\n\nFor instance, if you want to check if only the width of the viewport is\ngreater than 400 points, you could do the following:\n\n    <WhileWindowSize GreaterThan=\"400,1\">\n\nThis also works for @LessThan by providing a big value.\n\n    <WhileWindowSize LessThan=\"400,99999\">\n\nYou can also specify multiple constraints on the same `WhileWindowSize`\ntrigger. Note that all constraints that you specify must be satisfied in\norder for the trigger to activate.\n\n    <WhileWindowSize GreaterThan=\"200,300\" LessThan=\"700,1000\">"
      },
      "id": {
        "id": "fuse/triggers/whilewindowsize",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowsize",
        "href": "fuse/triggers/whilewindowsize"
      },
      "titles": {
        "indexTitle": "WhileWindowSize",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowSize"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/windowsizetrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/windowsizetrigger",
        "href": "fuse/triggers/windowsizetrigger"
      },
      "titles": {
        "indexTitle": "WindowSizeTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WindowSizeTrigger"
      }
    }
  ]
}