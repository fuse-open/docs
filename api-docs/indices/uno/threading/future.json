{
  "root": {
    "id": {
      "id": "uno/threading/future",
      "parentId": "uno/threading",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "uno/threading/future",
      "href": "uno/threading/future"
    },
    "titles": {
      "indexTitle": "Future",
      "fullyQualifiedIndexTitle": "Uno.Threading.Future"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "uno/threading/future_1",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/threading/future_1",
        "href": "uno/threading/future_1"
      },
      "titles": {
        "indexTitle": "Future<T>",
        "fullyQualifiedIndexTitle": "Uno.Threading.Future<T>"
      }
    },
    {
      "comment": {
        "brief": "Uno-side Promise based on the [A+ standard](https://promisesaplus.com/).",
        "full": "Uno-side Promise based on the [A+ standard](https://promisesaplus.com/).\n\nThis can be used in multiple ways:\n\n## Statically\n\nYou can use the `Run` function to wrap whatever argument-less function you want as a `Promise`, like this:\n\n    bool doStuff()\n    {\n        //stuff is done\n        success = doOtherStuff();\n        return success;\n    }\n\n    void onSuccess(bool value)\n    {\n        //Success!\n    }\n\n    void onFail(Exception e)\n    {\n        // Oh no!\n    }\n\n    public void DoSomeFancyStuff()\n    {\n        var promise = Promise.Run(doStuff).Then(onSuccess, onFail);\n    }\n\n## Make your own promises\n\nYou can also extend `Promise` and handle it yourself. Simply call `Resolve` or `Reject` once you have a result or a failure. The [Native Facebook login example](https://github.com/fusetools/fuse-samples/blob/feature-NativeFacebookLogin/Samples/NativeFacebookLogin/FacebookLogin/FacebookLoginModule.uno) is a good example of this being done in practice.\n\nNotice that `Resolve` and `Reject` are public, so you can also theoretically both resolve and reject promises from elsewhere.\n\n# Making Promises accessible from JavaScript modules\n\nA Promise can be wrapped in a @(NativePromise) and fed to a @(NativeModule) through `AddMember`. You can read more about creating custom js modules, and how to populate them with functions and promises, [here](articles:native-interop/native-js-modules.md)"
      },
      "id": {
        "id": "uno/threading/promise_1",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/promise_1",
        "href": "uno/threading/promise_1"
      },
      "titles": {
        "indexTitle": "Promise<T>",
        "fullyQualifiedIndexTitle": "Uno.Threading.Promise<T>"
      }
    }
  ]
}