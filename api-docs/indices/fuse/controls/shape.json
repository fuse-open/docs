{
  "root": {
    "id": {
      "id": "fuse/controls/shape",
      "parentId": "fuse/controls",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/shape",
      "href": "fuse/controls/shape"
    },
    "titles": {
      "indexTitle": "Shape",
      "fullyQualifiedIndexTitle": "Fuse.Controls.Shape"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "A bordered circle, generally used for profile images.",
        "full": "A bordered circle, generally used for profile images.\n\n```xml\n<Alive.Bubble>\n    <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n</Alive.Bubble>\n```\n\n![actionButton](../../docs/media/alive/bubbles/single.png)\n\n[Bubbles](api:alive/bubbles) displays a row of partially overlapping Bubbles.\n\n```xml\n<Alive.Bubbles>\n    <Alive.Bubble Color=\"Red\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n    <Alive.Bubble Color=\"Yellow\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n    <Alive.Bubble Color=\"Green\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n</Alive.Bubbles>\n```\n\n![actionButton](../../docs/media/alive/bubbles/multiple.png)\n\nor using `Each` for that\n\n```xml\n<Alive.Bubbles>\n    <Each Items=\"{friends}\">\n        <Alive.Bubble>\n            <Alive.ImageFill Url=\"{profileImageUrl}\" />\n        </Alive.Bubble>\n    </Each>\n</Alive.Bubbles>\n```"
      },
      "id": {
        "id": "alive/bubble",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubble",
        "href": "alive/bubble"
      },
      "titles": {
        "indexTitle": "Bubble",
        "fullyQualifiedIndexTitle": "Alive.Bubble"
      }
    },
    {
      "comment": {
        "brief": "A call-to-action button that can optionally have a glowing outline.",
        "full": "A call-to-action button that can optionally have a glowing outline.\n\n```xml\n<Alive.CallToActionButton Text=\"Buy now!\" />\n<Alive.CallToActionButton Text=\"Look at it glow!\" Glow=\"true\" />\n```\n\n![actionButton](../../docs/media/alive/calltoactionbutton.png)"
      },
      "id": {
        "id": "alive/calltoactionbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/calltoactionbutton",
        "href": "alive/calltoactionbutton"
      },
      "titles": {
        "indexTitle": "CallToActionButton",
        "fullyQualifiedIndexTitle": "Alive.CallToActionButton"
      }
    },
    {
      "comment": {
        "brief": "Cards are generally light. Thus, they have an implicit LightTheme by default.\nYou can disable this behavior by using its base class, [ThemedCard](api:alive/themedcard) instead.",
        "full": "Cards are generally light. Thus, they have an implicit LightTheme by default.\nYou can disable this behavior by using its base class, [ThemedCard](api:alive/themedcard) instead.\n\n```xml\n<Alive.ThemedCard>\n    <Alive.DarkTheme />\n</Alive.ThemedCard>\n```\n\nCards are Rectangles, which means they can have children and/or fills.\n```xml\n<Alive.Card Color=\"Alive.Gray200\" />\n```\n\n[Alive.ImageFill](api:alive/imagefill) can be used to fill a card with an image.\n\n```xml\n<Alive.Card>\n    <Alive.ImageFill File=\"Assets/image.jpg\" />\n</Alive.Card>\n```\n\n[CardMedia](api:alive/cardmedia) can be used to only fill the top of a Card.\nNote: [CardMedia](api:alive/cardmedia) has an implicit [DarkTheme](api:alive/darktheme).\n\n[CardBody](api:alive/cardbody) is a @StackPanel with proper margin and spacing for text content in a Card.\n\n```xml\n<Alive.Card>\n    <StackPanel>\n        <Alive.CardMedia>\n            <Alive.ImageFill File=\"Assets/image.jpg\" />\n        </Alive.CardMedia>\n        <Alive.CardBody>\n            <Alive.Title>Whee, I'm a card!</Alive.Title>\n        </Alive.CardBody>\n    </StackPanel>\n</Alive.Card>\n```"
      },
      "id": {
        "id": "alive/card",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/card",
        "href": "alive/card"
      },
      "titles": {
        "indexTitle": "Card",
        "fullyQualifiedIndexTitle": "Alive.Card"
      }
    },
    {
      "comment": {
        "brief": "A @Rectangle that fills the top of a [Card](api:alive/card).\nGenerally used to display an image that relates to a piece of text content.",
        "full": "A @Rectangle that fills the top of a [Card](api:alive/card).\nGenerally used to display an image that relates to a piece of text content.\n\nSee also [CardBody](api:alive/cardbody)."
      },
      "id": {
        "id": "alive/cardmedia",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardmedia",
        "href": "alive/cardmedia"
      },
      "titles": {
        "indexTitle": "CardMedia",
        "fullyQualifiedIndexTitle": "Alive.CardMedia"
      }
    },
    {
      "comment": {
        "brief": "A horizontal rectangle, generally used to communicate category using color.",
        "full": "A horizontal rectangle, generally used to communicate category using color.\n\n```xml\n<Alive.ColorBadge Color=\"{Resource Alive.Blue}\" />\n```\n\nPossible usage\n\n```xml\n<App>\n    <Alive.FallbackTheme />\n    <ClientPanel>\n        <StackPanel ItemSpacing=\"10\" Alignment=\"Center\">\n            <Text Value=\"Categories list:\" Color=\"White\"/>\n            <Each Count=\"5\">\n                <StackPanel Orientation=\"Horizontal\" ItemSpacing=\"10\" Margin=\"25,0\">\n                    <Alive.ColorBadge />\n                    <Text Value=\"Catigory - {index()}\" Color=\"White\"/>\n                </StackPanel>\n            </Each>\n        </StackPanel>\n    </ClientPanel>\n</App>\n```\n\n![actionButton](../../docs/media/alive/colorbadge.png)\n\n> **Note** Color can be changed only by overriding an AccentColor of the Theme\n\nSee also [Donut](api:alive/donut)."
      },
      "id": {
        "id": "alive/colorbadge",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/colorbadge",
        "href": "alive/colorbadge"
      },
      "titles": {
        "indexTitle": "ColorBadge",
        "fullyQualifiedIndexTitle": "Alive.ColorBadge"
      }
    },
    {
      "comment": {
        "brief": "A @Rectangle with a gradient fading out near the bottom of an element.",
        "full": "A @Rectangle with a gradient fading out near the bottom of an element.\n\nBefore\n```xml\n<Panel Color=\"White\" Size=\"400\">\n    <Image Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n</Panel>\n```\nAfter\n```xml\n<Panel Color=\"White\" Size=\"400\">\n    <Alive.ContentGradient />\n    <Image Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n</Panel>\n```\n\n![actionButton](../../docs/media/alive/contentgradient.png)"
      },
      "id": {
        "id": "alive/contentgradient",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/contentgradient",
        "href": "alive/contentgradient"
      },
      "titles": {
        "indexTitle": "ContentGradient",
        "fullyQualifiedIndexTitle": "Alive.ContentGradient"
      }
    },
    {
      "comment": {
        "brief": "A colored circle, generally used to communicate category.",
        "full": "A colored circle, generally used to communicate category.\n\n```xml\n<Alive.Donut StrokeColor=\"{Resource Alive.Red}\" />\n```\n\nPossible usage\n\n```xml\n<App>\n    <Alive.FallbackTheme />\n    <ClientPanel>\n        <StackPanel ItemSpacing=\"10\" Alignment=\"Center\">\n            <Text Value=\"Categories list:\" Color=\"White\"/>\n            <Each Count=\"5\">\n                <StackPanel Orientation=\"Horizontal\" ItemSpacing=\"10\" Margin=\"25,0\">\n                    <Alive.Donut StrokeColor=\"{Resource Alive.Red}\" />\n                    <Text Value=\"Catigory - {index()}\" Color=\"White\"/>\n                </StackPanel>\n            </Each>\n        </StackPanel>\n    </ClientPanel>\n</App>\n```\n\n![actionButton](../../docs/media/alive/donut.png)\n\nSee also [ColorBadge](api:alive/colorbadge)"
      },
      "id": {
        "id": "alive/donut",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/donut",
        "href": "alive/donut"
      },
      "titles": {
        "indexTitle": "Donut",
        "fullyQualifiedIndexTitle": "Alive.Donut"
      }
    },
    {
      "id": {
        "id": "alive/switch/innerswitch",
        "parentId": "alive/switch",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/switch/innerswitch",
        "href": "alive/switch/innerswitch"
      },
      "titles": {
        "indexTitle": "InnerSwitch",
        "fullyQualifiedIndexTitle": "Alive.InnerSwitch"
      }
    },
    {
      "comment": {
        "brief": "A colored header bar with text, used to display the category of a group of items.",
        "full": "A colored header bar with text, used to display the category of a group of items."
      },
      "id": {
        "id": "alive/listviewheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listviewheader",
        "href": "alive/listviewheader"
      },
      "titles": {
        "indexTitle": "ListViewHeader",
        "fullyQualifiedIndexTitle": "Alive.ListViewHeader"
      }
    },
    {
      "comment": {
        "brief": "A [Card](api:alive/card) that takes its background color from the currently active theme.",
        "full": "A [Card](api:alive/card) that takes its background color from the currently active theme."
      },
      "id": {
        "id": "alive/themedcard",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/themedcard",
        "href": "alive/themedcard"
      },
      "titles": {
        "indexTitle": "ThemedCard",
        "fullyQualifiedIndexTitle": "Alive.ThemedCard"
      }
    },
    {
      "comment": {
        "brief": "Creates tick marks, usually for an axis. This is a @Shape, allowing `Stroke...` properties to be used for drawing the ticks.  The ticks that are drawn will line up with the labels of @PlotAxis provided they are the same element size (either `Width` or `Height` depending on the axis).",
        "full": "Creates tick marks, usually for an axis. This is a @Shape, allowing `Stroke...` properties to be used for drawing the ticks.  The ticks that are drawn will line up with the labels of @PlotAxis provided they are the same element size (either `Width` or `Height` depending on the axis).\n\n# Example\n\nThe following example shows `PlotTicks` being used to draw lines on the x-axis of a bar chart.\n```javascript\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <GridLayout Rows=\"1*,40\" Columns=\"40,1*\"/>\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotData>\n                    <c:PlotBar Row=\"0\" Column=\"1\">\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n                <c:PlotTicks Axis=\"Y\" StrokeWidth=\"1\" StrokeColor=\"#555\" Row=\"0\" Column=\"1\" />\n            </c:Plot>\n        </Panel>\n    </Panel>\n```\n`AxisLine` indicates a line across the entire access should be drawn at this offset. In this example it's the top of the ticks, making this suitable for the bottom of a chart."
      },
      "id": {
        "id": "fuse/charting/plotticks",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotticks",
        "href": "fuse/charting/plotticks"
      },
      "titles": {
        "indexTitle": "PlotTicks",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotTicks"
      }
    },
    {
      "comment": {
        "brief": "Creates a wedge shape for a pie chart.",
        "full": "Creates a wedge shape for a pie chart.\n\nThis sets the `StartAngle` and `EndAngle` of the base `Ellipse` class. You should not override this properties, though other `Ellipse` and `Shape` properties are okay.\n```xml\n    <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n        <c:PlotData>\n            <c:PlotWedge StrokeColor=\"#000\" StrokeWidth=\"2\">\n        </c:PlotData>\n    </Panel>\n```"
      },
      "id": {
        "id": "fuse/charting/plotwedge",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotwedge",
        "href": "fuse/charting/plotwedge"
      },
      "titles": {
        "indexTitle": "PlotWedge",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotWedge"
      }
    },
    {
      "comment": {
        "brief": "Displays an arc.",
        "full": "Displays an arc.\n\nArc is a @Shape that can have @Strokes. An Arc is equivalent to a stroke on the circumference of an @Ellipse (an Arc has no lines to/from the center as a stroke on the @Ellipse would have).\n\nIt is undefined what shape is filled if a `Fill` is used on an Arc. Use only a stroke."
      },
      "id": {
        "id": "fuse/controls/arc",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/arc",
        "href": "fuse/controls/arc"
      },
      "titles": {
        "indexTitle": "Arc",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Arc"
      }
    },
    {
      "comment": {
        "brief": "Displays a circle",
        "full": "Displays a circle\n\nCircle is a @Shape that can have @Fills and @Strokes.\nBy default Circle does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n### StartAngle / EndAngle\n\n`StartAngle` and `EndAngle` can be used to only draw a slice of a @Circle.\nThere are 6 different properties that can be used to control this in different ways.\n\n* `StartAngle` - The angle in radians where the slice begins\n* `StartAngleDegrees` - The angle in degrees where the slice begins\n* `EndAngle` - The angle in radians where the slice ends\n* `EndAngleDegrees` - The angle in degrees where the slice ends\n* `LengthAngle` - An offset in radians from `StartAngle`. This can be used instead of `EndAngle`\n* `LengthAngleDegrees` - An offset in degrees from `StartAngle`. This can be used instead of `EndAngleDegrees`.\n\nNote that using for example both @(StartAngle) and @(StartAngleDegrees) on the same @(Circle) will have an undefined behavior.\n\n## Examples\n\nDisplaying a red @Circle:\n\n```xml\n<Circle Width=\"100\" Height=\"100\" Color=\"#f00\" />\n```\n\nGetting fancy with a @Stroke and @LinearGradient:\n\n```xml\n<Circle Width=\"100\" Height=\"100\" >\n    <LinearGradient>\n        <GradientStop Offset=\"0\" Color=\"#cf0\" />\n        <GradientStop Offset=\"1\" Color=\"#f40\" />\n    </LinearGradient>\n    <Stroke Width=\"1\">\n        <SolidColor Color=\"#000\" />\n    </Stroke>\n</Circle>\n```\n\nDrawing a slice of a circle:\n\n```xml\n<Circle Width=\"150\" Height=\"150\" Color=\"#f00\" StartAngleDegrees=\"135\" LengthAngleDegrees=\"145\" />\n```"
      },
      "id": {
        "id": "fuse/controls/circle",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/circle",
        "href": "fuse/controls/circle"
      },
      "titles": {
        "indexTitle": "Circle",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Circle"
      }
    },
    {
      "comment": {
        "brief": "Draws a curve connecting several points, specified as @CurvePoint.",
        "full": "Draws a curve connecting several points, specified as @CurvePoint.\n\nThe points of the curve are relative to the size of the `Curve`; the values have the range `0..1`.\n\n## Example\n\n    Draws a simple line graph.\n```xml\n    <Panel Alignment=\"Center\" Width=\"300\" Height=\"200\">\n        <Curve StrokeWidth=\"10\" StrokeColor=\"#ABC\">\n            <CurvePoint At=\"0.00,0.0\"/>\n            <CurvePoint At=\"0.25,0.4\"/>\n            <CurvePoint At=\"0.50,0.1\"/>\n            <CurvePoint At=\"0.75,0.9\"/>\n            <CurvePoint At=\"1.00,0.6\"/>\n        </Curve>\n    </Panel>\n```"
      },
      "id": {
        "id": "fuse/controls/curve",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/curve",
        "href": "fuse/controls/curve"
      },
      "titles": {
        "indexTitle": "Curve",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Curve"
      }
    },
    {
      "comment": {
        "brief": "Displays an ellipse",
        "full": "Displays an ellipse\n\nEllipse is a @Shape that can have @Fills and @Strokes.\nBy default Ellipse does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n## Example:\n```xml\n    <Ellipse Width=\"300\" Height=\"100\">\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0cc\" />\n            <GradientStop Offset=\"1\" Color=\"#cc0\" />\n        </LinearGradient>\n        <Stroke Width=\"1\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Ellipse>\n```"
      },
      "id": {
        "id": "fuse/controls/ellipse",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/ellipse",
        "href": "fuse/controls/ellipse"
      },
      "titles": {
        "indexTitle": "Ellipse",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Ellipse"
      }
    },
    {
      "id": {
        "id": "fuse/controls/ellipticalshape",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/ellipticalshape",
        "href": "fuse/controls/ellipticalshape"
      },
      "titles": {
        "indexTitle": "EllipticalShape",
        "fullyQualifiedIndexTitle": "Fuse.Controls.EllipticalShape"
      }
    },
    {
      "id": {
        "id": "fuse/controls/path",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/path",
        "href": "fuse/controls/path"
      },
      "titles": {
        "indexTitle": "Path",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Path"
      }
    },
    {
      "comment": {
        "brief": "Displays a rectangle.",
        "full": "Displays a rectangle.\n\nSetting the rectangle's `Color` property gives it a solid color fill:\n```xml\n    <Rectangle Color=\"Blue\" Width=\"100\" Height=\"100\" />\n```\nRectangles can have an arbitrary number of @Fills and @Strokes. Fills are of\ntype @Brush, and can be specified as tags inside the rectangle.\n\n> Note that by default, a Rectangle has no fills or strokes, making it\n> invisible unless you provide some or specify something.\n\n## Example\n```xml\n    <Grid Alignment=\"Center\" Rows=\"100,100,100\" Columns=\"100\">\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <SolidColor Color=\"#a542db\" />\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n            </LinearGradient>\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n            <SolidColor Color=\"#3579e6\" />\n        </Rectangle>\n    </Grid>\n```"
      },
      "id": {
        "id": "fuse/controls/rectangle",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rectangle",
        "href": "fuse/controls/rectangle"
      },
      "titles": {
        "indexTitle": "Rectangle",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Rectangle"
      }
    },
    {
      "comment": {
        "brief": "Draws a polygon with a number of equal length sides.",
        "full": "Draws a polygon with a number of equal length sides."
      },
      "id": {
        "id": "fuse/controls/regularpolygon",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/regularpolygon",
        "href": "fuse/controls/regularpolygon"
      },
      "titles": {
        "indexTitle": "RegularPolygon",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RegularPolygon"
      }
    },
    {
      "id": {
        "id": "fuse/controls/segmentedshape",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/segmentedshape",
        "href": "fuse/controls/segmentedshape"
      },
      "titles": {
        "indexTitle": "SegmentedShape",
        "fullyQualifiedIndexTitle": "Fuse.Controls.SegmentedShape"
      }
    },
    {
      "comment": {
        "brief": "Displays a star",
        "full": "Displays a star\n\nStar is a @Shape and does not have fills, strokes and a size by default,\nyou must set this for it to be visible.\n\n## Example:\n```xml\n    <Star Width=\"200\" Height=\"200\" Ratio=\"0.4\" >\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0ee\" />\n            <GradientStop Offset=\"1\" Color=\"#e0e\" />\n        </LinearGradient>\n    </Star>\n```"
      },
      "id": {
        "id": "fuse/controls/star",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/star",
        "href": "fuse/controls/star"
      },
      "titles": {
        "indexTitle": "Star",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Star"
      }
    }
  ]
}