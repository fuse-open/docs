{
  "root": {
    "id": {
      "id": "fuse/controls/stackpanel",
      "parentId": "fuse/controls",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/stackpanel",
      "href": "fuse/controls/stackpanel"
    },
    "titles": {
      "indexTitle": "StackPanel",
      "fullyQualifiedIndexTitle": "Fuse.Controls.StackPanel"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "A row of partially overlapping [Bubbles](api:alive/bubble).",
        "full": "A row of partially overlapping [Bubbles](api:alive/bubble).\n\n```xml\n<Alive.Bubbles>\n    <Alive.Bubble Color=\"Red\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n    <Alive.Bubble Color=\"Yellow\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n    <Alive.Bubble Color=\"Green\">\n        <Alive.ImageFill Url=\"https://icons-for-free.com/iconfiles/png/512/profile+profile+page+user+icon-1320186864367220794.png\" />\n    </Alive.Bubble>\n</Alive.Bubbles>\n```\n\n![actionButton](../../docs/media/alive/bubbles/multiple.png)"
      },
      "id": {
        "id": "alive/bubbles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubbles",
        "href": "alive/bubbles"
      },
      "titles": {
        "indexTitle": "Bubbles",
        "fullyQualifiedIndexTitle": "Alive.Bubbles"
      }
    },
    {
      "comment": {
        "brief": "A @StackPanel with the right margins and spacing for text content in a Card.",
        "full": "A @StackPanel with the right margins and spacing for text content in a Card.\n\n```xml\n    <Alive.Card>\n        <Alive.CardBody>\n            <Alive.Title>Lorem ipsum</Alive.Title>\n            <Alive.Body>Lorem ipsum dolor sit amet...</Alive.Body>\n        </Alive.CardBody>\n    </Alive.Card>\n```"
      },
      "id": {
        "id": "alive/cardbody",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardbody",
        "href": "alive/cardbody"
      },
      "titles": {
        "indexTitle": "CardBody",
        "fullyQualifiedIndexTitle": "Alive.CardBody"
      }
    },
    {
      "comment": {
        "brief": "A striped list of items, with optional Adding/Removing/LayoutAnimations.",
        "full": "A striped list of items, with optional Adding/Removing/LayoutAnimations.\n\nListView takes its items directly as a property.\n\n>**Note:** `Items` must be an @Observable.\n>**Note:** The **child** of the ListView MUST HAVE the property `ux:Template=\"Item\"`\n\n```xml\n<JavaScript>\n    var Observable = require(\"FuseJS/Observable\");\n    var tasks = Observable(\n        { task: \"Groceries\" },\n        { task: \"Finish TPS report\" },\n        { task: \"Purchase boat\" }\n    );\n    var isAnimated = Observable(true);\n    var add = function() {\n        tasks.add({ task: `New task ${tasks.length + 1}` });\n    };\n    var remove = function(ctx) {\n        tasks.remove(ctx.data);\n    };\n\n    module.exports = {\n        tasks,\n        add,\n        remove,\n        isAnimated,\n    };\n</JavaScript>\n\n<Alive.ListView Items=\"{tasks}\" IsAnimated=\"False\">\n    <Panel ux:Template=\"Item\" Height=\"50\" Clicked=\"{remove}\">\n        <Alive.Body Value=\"{task}\" Alignment=\"Center\" />\n    </Panel>\n</Alive.ListView>\n<Button Text=\"Add\" Clicked=\"{add}\" Alignment=\"BottomCenter\" Margin=\"30\"/>\n```\n\n![actionButton](../../docs/media/alive/listview.gif)\n\nListView applies @AddingAnimation, @RemovingAnimation and @LayoutAnimation to each element by default.\nThis behavior can be disabled using the `IsAnimated` property.\n\n```xml\n    <Alive.ListView IsAnimated=\"false\" Items=\"{tasks}\">\n```\n\n![actionButton](../../docs/media/alive/listviewnoanima.gif)"
      },
      "id": {
        "id": "alive/listview",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listview",
        "href": "alive/listview"
      },
      "titles": {
        "indexTitle": "ListView",
        "fullyQualifiedIndexTitle": "Alive.ListView"
      }
    },
    {
      "comment": {
        "brief": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.",
        "full": "Presents a header above an element that will stick to the top of its enclosing ScrollView\nwhile in the vertical range of the `StickyHeader`.\n\n**Note:** StickyHeader *must* be placed directly inside the ScrollView's root element.\nThis is because `StickyHeader` calculates its own position relative to its parent.\n\n```xml\n<App >\n    <Rectangle ux:Class=\"Body\" Color=\"#cea\" Size=\"100%, 300\" >\n        <Text TextWrapping=\"Wrap\" ClipToBounds=\"true\">\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\nMaecenas sed diam eget risus varius blandit sit amet non magna.\nDonec id elit non mi porta gravida at eget metus. Fusce dapibus,\ntellus ac cursus commodo\n        </Text>\n    </Rectangle>\n\n    <Alive.FallbackTheme />\n    <ScrollView>\n        <StackPanel>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\" Color=\"#aaa\">\n                    <Alive.Title Margin=\"15\">Header 1</Alive.Title>\n                </Panel>\n                <Body />\n            </Alive.StickyHeader>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\" Color=\"#aba\">\n                    <Alive.Title Margin=\"15\">Header 2</Alive.Title>\n                </Panel>\n                <Body />\n            </Alive.StickyHeader>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\" Color=\"#caa\">\n                    <Alive.Title Margin=\"15\">Header 3</Alive.Title>\n                </Panel>\n                <Body />\n            </Alive.StickyHeader>\n        </StackPanel>\n    </ScrollView>\n</App>\n```\n\n![actionButton](../../docs/media/alive/stickyheader.gif)\n\n[MediaScroller](api:alive/mediascroller) wraps a StackPanel around its children,\nand so any StickyHeader must be a direct child of the `MediaScroller` itself.\n\n```xml\n<Alive.MediaScroller>\n<Panel ux:Binding=\"Media\" />\n\n<Alive.StickyHeader>\n    <Panel ux:Binding=\"Header\" Color=\"#aba\">\n        <Alive.Title Margin=\"15\">Header 1</Alive.Title>\n    </Panel>\n    <Body /> <!-- from examle above  -->\n</Alive.StickyHeader>\n<Alive.StickyHeader>\n    <Panel ux:Binding=\"Header\" Color=\"#aba\">\n        <Alive.Title Margin=\"15\">Header 2</Alive.Title>\n    </Panel>\n    <Body />\n</Alive.StickyHeader>\n<Alive.StickyHeader>\n    <Panel ux:Binding=\"Header\" Color=\"#caa\">\n        <Alive.Title Margin=\"15\">Header 3</Alive.Title>\n    </Panel>\n    <Body />\n</Alive.StickyHeader>\n</Alive.MediaScroller>\n```\n\nSee also @StickyHeaderAnimation"
      },
      "id": {
        "id": "alive/stickyheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheader",
        "href": "alive/stickyheader"
      },
      "titles": {
        "indexTitle": "StickyHeader",
        "fullyQualifiedIndexTitle": "Alive.StickyHeader"
      }
    },
    {
      "comment": {
        "brief": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.",
        "full": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.\n\nThe @ActivatingAnimation animator can be used to animate a `Dot` when its corresponding page is active.\n\n# Example\n\nThe following example shows the use of `PageIndicator` to indicate the current progress in a @PageControl navigation, by scaling the rectangle indicator representing the current page by a `Factor` of 1.3.\n\n```xml\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            module.exports.pages = Observable(\"#FF0000\", \"#00FF00\", \"#0000FF\");\n        </JavaScript>\n        <PageControl ux:Name=\"nav\">\n            <Each Items=\"{pages}\">\n                <Page Color=\"data()\">\n\n                </Page>\n            </Each>\n        </PageControl>\n        <PageIndicator Dock=\"Bottom\" Navigation=\"nav\" Alignment=\"Center\">\n            <Rectangle ux:Template=\"Dot\" Width=\"30\" Height=\"30\" Margin=\"10\" Color=\"#555\">\n                <ActivatingAnimation>\n                    <Scale Factor=\"1.3\" />\n                </ActivatingAnimation>\n            </Rectangle>\n        </PageIndicator>\n    </DockPanel>\n```"
      },
      "id": {
        "id": "fuse/controls/pageindicator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicator",
        "href": "fuse/controls/pageindicator"
      },
      "titles": {
        "indexTitle": "PageIndicator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicator"
      }
    }
  ]
}