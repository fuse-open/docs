{
  "root": {
    "id": {
      "id": "fuse/controls/scrollviewbase",
      "parentId": "fuse/controls",
      "type": "UxClass",
      "modifiers": [
        "public",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/scrollviewbase",
      "href": "fuse/controls/scrollviewbase"
    },
    "titles": {
      "indexTitle": "ScrollViewBase",
      "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewBase"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Used to navigate contents that are larger than the available size.",
        "full": "Used to navigate contents that are larger than the available size.\n\n# Example\n\nThis example demonstrates the use of `ScrollView` by having it contain a `Panel` that would normally be too big to be viewed.\n\n    <ScrollView>\n        <Panel Width=\"2000\" Height=\"2000\" />\n    </ScrollView>\n\nYou may also constrain the directions the ScrollView is allowed to scroll in using the `AllowedScrollDirections` property.\n\n    <ScrollView AllowedScrollDirections=\"Horizontal\">\n        <!-- Contents -->\n    </ScrollView>\n\nBy default, ScrollView tries to take up the same amount of space as its content in the scrollable directions.\nHowever, when placed in a @Panel (or @DockPanel, @Grid, etc.), the size of the ScrollView itself will be limited to the size of its parent.\n\n> **Note**\n>\n> *@StackPanel* does not limit the size of its children, but rather lets them extend to whatever size they want to take up.\n> This is a problem with ScrollView, since it inherits the size of its content by default.\n> If we were to place a ScrollView inside a @StackPanel, the size of the ScrollView would extend beyond the bounds of the screen.\n> What we want instead is that only the ScrollView's *content* should extend to whatever size it needs, while the ScrollView itself is constrained to the bounds of its parent.\n>\n> This means that *a ScrollView inside a @StackPanel probably won't behave as you expect it to*.\n> Alternatives include using a different type of @Panel (e.g. a @DockPanel) as the parent of the ScrollView or specifying its size explicitly.\n\nThe `Alignment` of the child content influences the `MinScroll` and `MaxScroll` values as well as the starting `ScrollPosition`.\nFor example a `Bottom` aligned element will start with the bottom of the content visible (aligned to the bottom of the `ScrollView`) and `MinScroll` will be negative, as the overflow is to the top of the `ScrollView`.\n\n## LayoutMode\n\nBy default a `ScrollView` keeps a consistent `ScrollPosition` when the layout changes. This may result in jumping when content is added/removed.\n\nAn alternate mode `LayoutMode=\"PreserveVisual\"` instead attempts to maintain visual consistency when its children or parent layout is changed. It assumes it's immediate content is a container and looks at that container's children.  For example, a layout like this:\n\n    <ScrollView>\n        <StackPanel>\n            <Panel/>\n            <Panel/>\n        <StackPanel>\n    </ScrollView>\n\nVisuals without `LayoutRole=Standard` are not considered when retaining the visual consistency. The `LayoutMode` property can be used to adjust this behavior."
      },
      "id": {
        "id": "fuse/controls/scrollview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview",
        "href": "fuse/controls/scrollview"
      },
      "titles": {
        "indexTitle": "ScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollView"
      }
    }
  ]
}