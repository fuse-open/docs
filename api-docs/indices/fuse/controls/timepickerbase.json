{
  "root": {
    "id": {
      "id": "fuse/controls/timepickerbase",
      "parentId": "fuse/controls",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/timepickerbase",
      "href": "fuse/controls/timepickerbase"
    },
    "titles": {
      "indexTitle": "TimePickerBase",
      "fullyQualifiedIndexTitle": "Fuse.Controls.TimePickerBase"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Displays a component to select a time.",
        "full": "Displays a component to select a time.\n\nCurrently, the TimePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `TimePicker` can be used to select a specific time value. The type of its `Value` property is `Uno.DateTime`,\nwhich is marshalled automatically to and from the JavaScript `Date` type. This makes interaction between JavaScript\nand the `TimePicker` type seamless via databinding. If you plan to wrap a `TimePicker` in a UX component and use a\nUX property to hook up this value, the `Uno.DateTime` type should be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `TimePicker` will assume\nincoming values are relative to UTC, and truncate the date component to the Unix epoch (1 Jan 1970), effectively\nignoring the date component altogether. Similarly, values read from `TimePicker` properties will only consist of a time\ncomponent at on 1 Jan 1970. This makes values going to/from the `TimePicker` control easy to create and interpret\nconsistently, but also means that if a value with a date component other than the unix epoch is written to TimePicker`'s\n`Value` property, subsequent values read from the property may not match the written value, as the date component will\nhave been truncated.\n\nYou should avoid modifying the `TimePicker` values programmatically while the control has focus, as this is known to\nhave some issues on some Android devices (particularly ones which use the new `clock` appearance prior to Android 7).\n\n## Example\n\nThe following example shows how to set up a `TimePicker` object and set the value from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someTime = Observable(new Date(Date.parse(\"2007-02-14T12:34:56.000Z\")));\n\n            someTime.onValueChanged(module, function(date) {\n                console.log(\"someTime changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someTime: someTime,\n\n                timeToGetCracking: function() {\n                    someTime.value = new Date(Date.parse(\"1970-01-01T13:37:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <TimePicker Value=\"{someTime}\" Is24HourView=\"true\" />\n        </NativeViewHost>\n\n        <Button Text=\"Time to get cracking!\" Clicked=\"{timeToGetCracking}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/timepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker",
        "href": "fuse/controls/timepicker"
      },
      "titles": {
        "indexTitle": "TimePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TimePicker"
      }
    }
  ]
}