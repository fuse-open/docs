{
  "root": {
    "id": {
      "id": "fuse/controls/datepickerbase",
      "parentId": "fuse/controls",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/datepickerbase",
      "href": "fuse/controls/datepickerbase"
    },
    "titles": {
      "indexTitle": "DatePickerBase",
      "fullyQualifiedIndexTitle": "Fuse.Controls.DatePickerBase"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Displays a component to select a date.",
        "full": "Displays a component to select a date.\n\nCurrently, the DatePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `DatePicker` can be used to select a specific date value. The type of its `Value`, `MinValue`, and `MaxValue`\nproperties are each of type `Uno.DateTime`, which is marshalled automatically to and from the JavaScript `Date` type.\nThis makes interaction between JavaScript and the `DatePicker` type seamless via databinding. If you plan to wrap\na `DatePicker` in a UX component and use a UX property to hook up to any of these values, the `Uno.DateTime` type\nshould be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `DatePicker` will assume\nincoming values are relative to UTC, and truncate the time component to midnight, effectively ignoring the time\ncomponent altogether. Similarly, values read from `DatePicker` properties will only consist of a date component at\nmidnight UTC. This makes values going to/from the `DatePicker` control easy to create and interpret consistently, but\nalso means that if a value with a time component other than midnight at UTC is written to one of `DatePicker`'s `Value`\nproperties, subsequent values read from the property may not match the written value, as the time component will have\nbeen truncated.\n\nNote that this control should not be used to deal with historic dates, as calendar/date and timestamp translation is\ninconsistent between different locales due to when and where different calendar systems were adopted. However, the\nbehavior is consistent for all dates since at least 1900 including all representable future dates.\n\n## Example\n\nThe following example shows how to set up a `DatePicker` object with a specific minimum and maximum value, and set the\nvalue from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someDate = Observable(new Date(Date.parse(\"2007-02-14T00:00:00.000Z\")));\n\n            someDate.onValueChanged(module, function(date) {\n                console.log(\"someDate changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someDate: someDate,\n\n                minDate: new Date(Date.parse(\"1950-01-01T00:00:00.000Z\")),\n                maxDate: new Date(Date.parse(\"2050-01-01T00:00:00.000Z\")),\n\n                whoYouGonnaCall: function() {\n                    someDate.value = new Date(Date.parse(\"1984-06-08T00:00:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <DatePicker Value=\"{someDate}\" MinValue=\"{minDate}\" MaxValue=\"{maxDate}\" />\n        </NativeViewHost>\n\n        <Button Text=\"Who you gonna call?\" Clicked=\"{whoYouGonnaCall}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/datepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker",
        "href": "fuse/controls/datepicker"
      },
      "titles": {
        "indexTitle": "DatePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DatePicker"
      }
    }
  ]
}