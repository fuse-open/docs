{
  "root": {
    "id": {
      "id": "fuse/reactive/varargfunction",
      "parentId": "fuse/reactive",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/varargfunction",
      "href": "fuse/reactive/varargfunction"
    },
    "titles": {
      "indexTitle": "VarArgFunction",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.VarArgFunction"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Goto a full path in the router.",
        "full": "Goto a full path in the router.\n\nThe arguments are name-value pairs that specify the path components and their parameter."
      },
      "id": {
        "id": "fuse/navigation/gotoroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/gotoroutecommand",
        "href": "fuse/navigation/gotoroutecommand"
      },
      "titles": {
        "indexTitle": "GotoRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GotoRouteCommand"
      }
    },
    {
      "comment": {
        "brief": "Navigates on the router.",
        "full": "Navigates on the router.\n\nThe arguments must be name-value pairs.  It shares the same arguments as the JAvaScript `router.modify` function and the `RouterModify` action. In short the options are:\n\n    - how : @ModifyRouteHow\n    - path : An array of name-value pairs that specify the path components and their parameter. This syntax differs from the JavaScript interface.\n    - relative : Routing relative to the provided node. By default the path will be treated as global.\n    - transition : @NavigationGotoMode\n    - bookmark : Use a bookmark instead of `path`.\n    - style : Transition style for animation\n\nThe expression provided to `modifyRoute` is evaluated only when needed. It is expected the bindings will resolve quickly (not bound to a remote lookup for example), otherwise the routing operation will be delayed."
      },
      "id": {
        "id": "fuse/navigation/modifyroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/modifyroutecommand",
        "href": "fuse/navigation/modifyroutecommand"
      },
      "titles": {
        "indexTitle": "ModifyRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ModifyRouteCommand"
      }
    },
    {
      "comment": {
        "brief": "Push a full path on the router.",
        "full": "Push a full path on the router."
      },
      "id": {
        "id": "fuse/navigation/pushroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pushroutecommand",
        "href": "fuse/navigation/pushroutecommand"
      },
      "titles": {
        "indexTitle": "PushRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PushRouteCommand"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/routemodificationcommand",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/routemodificationcommand",
        "href": "fuse/navigation/routemodificationcommand"
      },
      "titles": {
        "indexTitle": "RouteModificationCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.RouteModificationCommand"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/indexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/indexfunction",
        "href": "fuse/reactive/indexfunction"
      },
      "titles": {
        "indexTitle": "IndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IndexFunction"
      }
    },
    {
      "comment": {
        "brief": "Common base for functions that work with an item in an instantiator",
        "full": "Common base for functions that work with an item in an instantiator"
      },
      "id": {
        "id": "fuse/reactive/instantiatorfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instantiatorfunction",
        "href": "fuse/reactive/instantiatorfunction"
      },
      "titles": {
        "indexTitle": "InstantiatorFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InstantiatorFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/namedfunctioncall",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namedfunctioncall",
        "href": "fuse/reactive/namedfunctioncall"
      },
      "titles": {
        "indexTitle": "NamedFunctionCall",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NamedFunctionCall"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IObject` from an arbitrary number of NameValuePairs.",
        "full": "Creates an `IObject` from an arbitrary number of NameValuePairs.\n\nThe returned object also implements `IArray` with the original ordering of the NameValuePairs.\n\nIn UX expressions, objects are denoted as lists of NameValuePair: `{name1: value1, name2: value2}`.\n\nA single `NameValuePair` also implements `IObject` (but doesn't need this `Object` operator)."
      },
      "id": {
        "id": "fuse/reactive/object",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/object",
        "href": "fuse/reactive/object"
      },
      "titles": {
        "indexTitle": "Object",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Object"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/offsetindexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/offsetindexfunction",
        "href": "fuse/reactive/offsetindexfunction"
      },
      "titles": {
        "indexTitle": "OffsetIndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.OffsetIndexFunction"
      }
    },
    {
      "comment": {
        "brief": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments.",
        "full": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments."
      },
      "id": {
        "id": "fuse/reactive/simplevarargfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/simplevarargfunction",
        "href": "fuse/reactive/simplevarargfunction"
      },
      "titles": {
        "indexTitle": "SimpleVarArgFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.SimpleVarArgFunction"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)",
        "full": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)"
      },
      "id": {
        "id": "fuse/reactive/vector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vector",
        "href": "fuse/reactive/vector"
      },
      "titles": {
        "indexTitle": "Vector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Vector"
      }
    },
    {
      "comment": {
        "brief": "`true` while the @Selectable is currently selected.",
        "full": "`true` while the @Selectable is currently selected.\n\nThis expression attaches to the first @Selectable node that is an ancestory of the expression node. Optionally,  you may specify an argument to get a different selectable `isSelected( myPanel )`."
      },
      "id": {
        "id": "fuse/selection/isselectedfunction",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/isselectedfunction",
        "href": "fuse/selection/isselectedfunction"
      },
      "titles": {
        "indexTitle": "IsSelectedFunction",
        "fullyQualifiedIndexTitle": "Fuse.Selection.IsSelectedFunction"
      }
    }
  ]
}