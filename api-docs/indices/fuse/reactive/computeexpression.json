{
  "root": {
    "id": {
      "id": "fuse/reactive/computeexpression",
      "parentId": "fuse/reactive",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/computeexpression",
      "href": "fuse/reactive/computeexpression"
    },
    "titles": {
      "indexTitle": "ComputeExpression",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.ComputeExpression"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/mixfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/mixfunction",
        "href": "alive/mixfunction"
      },
      "titles": {
        "indexTitle": "MixFunction",
        "fullyQualifiedIndexTitle": "Alive.MixFunction"
      }
    },
    {
      "id": {
        "id": "alive/transparentizefunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/transparentizefunction",
        "href": "alive/transparentizefunction"
      },
      "titles": {
        "indexTitle": "TransparentizeFunction",
        "fullyQualifiedIndexTitle": "Alive.TransparentizeFunction"
      }
    },
    {
      "id": {
        "id": "alive/withopacityfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/withopacityfunction",
        "href": "alive/withopacityfunction"
      },
      "titles": {
        "indexTitle": "WithOpacityFunction",
        "fullyQualifiedIndexTitle": "Alive.WithOpacityFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/abs",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/abs",
        "href": "fuse/reactive/abs"
      },
      "titles": {
        "indexTitle": "Abs",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Abs"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric cosine of the input",
        "full": "The invserse trigonometric cosine of the input"
      },
      "id": {
        "id": "fuse/reactive/acos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/acos",
        "href": "fuse/reactive/acos"
      },
      "titles": {
        "indexTitle": "Acos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Acos"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/add",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/add",
        "href": "fuse/reactive/add"
      },
      "titles": {
        "indexTitle": "Add",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Add"
      }
    },
    {
      "comment": {
        "brief": "Adjusts the hue of the color.",
        "full": "Adjusts the hue of the color.\n\nThis adds the hue value to the hue in HSL color space. It is wrapped around to remain in the range 0..1."
      },
      "id": {
        "id": "fuse/reactive/adjusthuefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/adjusthuefunction",
        "href": "fuse/reactive/adjusthuefunction"
      },
      "titles": {
        "indexTitle": "AdjustHueFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.AdjustHueFunction"
      }
    },
    {
      "comment": {
        "brief": "Alternate between true/false values for ranges of integers.",
        "full": "Alternate between true/false values for ranges of integers.\n\n    alternate( value, groupSize )\n\nInput values are rounded to the nearest integer.\n\nExample:\n\n    alternate( value, 3 )\n\nThis will yield true for values 0,1,2, false for 3,4,5, true for 6,7,8, false for 9,10,11, etc."
      },
      "id": {
        "id": "fuse/reactive/alternate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/alternate",
        "href": "fuse/reactive/alternate"
      },
      "titles": {
        "indexTitle": "Alternate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Alternate"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric sine of the input",
        "full": "The invserse trigonometric sine of the input"
      },
      "id": {
        "id": "fuse/reactive/asin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/asin",
        "href": "fuse/reactive/asin"
      },
      "titles": {
        "indexTitle": "Asin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Asin"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input",
        "full": "The invserse trigonometric tangent of the input"
      },
      "id": {
        "id": "fuse/reactive/atan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan",
        "href": "fuse/reactive/atan"
      },
      "titles": {
        "indexTitle": "Atan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input components",
        "full": "The invserse trigonometric tangent of the input components\n\n    atan2(y, x)"
      },
      "id": {
        "id": "fuse/reactive/atan2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan2",
        "href": "fuse/reactive/atan2"
      },
      "titles": {
        "indexTitle": "Atan2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan2"
      }
    },
    {
      "comment": {
        "brief": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.",
        "full": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.\n\n    atanVector( v ) == atan2( v.Y, v.X )"
      },
      "id": {
        "id": "fuse/reactive/atanvector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atanvector",
        "href": "fuse/reactive/atanvector"
      },
      "titles": {
        "indexTitle": "AtanVector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.AtanVector"
      }
    },
    {
      "comment": {
        "brief": "Functions for modifying color values.",
        "full": "Functions for modifying color values.\n\nColors in Fuse are represented as RGBA values. A `float3` converts to a `float4` by having a `1` implicitly added as the alpha value. Hex strings can also convert to color values.\n\nMost of the operations are calculated in HSL color space, first by converting the RGB value to HSL, performing the operation, and converting back to RGB.  The alpha value is not modified by RGB <=> HSL conversions.\n\nClamping is, in general, not done on the inputs, intermediaries, or outputs. This means you may end up with RGB values outside of the 0..1 range. This ensures that color information is not prematurely lost when performing multiplate operations.\n\n[subclass Fuse.Reactive.BinaryColorFunction]\n\nTo work directly with HSL values you can use the `hslaToRgba` and `rgbaToHsla` functions."
      },
      "id": {
        "id": "fuse/reactive/binarycolorfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binarycolorfunction",
        "href": "fuse/reactive/binarycolorfunction"
      },
      "titles": {
        "indexTitle": "BinaryColorFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryColorFunction"
      }
    },
    {
      "comment": {
        "brief": "[subclass Fuse.Reactive.BinaryFloatOperator]",
        "full": "[subclass Fuse.Reactive.BinaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/binaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryfloatoperator",
        "href": "fuse/reactive/binaryfloatoperator"
      },
      "titles": {
        "indexTitle": "BinaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take two arguments/operands.",
        "full": "Base class for reactive functions/operators that take two arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/binaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryoperator",
        "href": "fuse/reactive/binaryoperator"
      },
      "titles": {
        "indexTitle": "BinaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/ceil",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ceil",
        "href": "fuse/reactive/ceil"
      },
      "titles": {
        "indexTitle": "Ceil",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Ceil"
      }
    },
    {
      "comment": {
        "brief": "Restricts the range of a value to between two numbers.",
        "full": "Restricts the range of a value to between two numbers.\n\n    clamp( value, min, max)\n\nReturns\n- `min` when `value < min`\n- `max` when `value > max`\n- `value` otherwise\n\nValue may be a 1-4 component value. `min` and `max` must both be a single value."
      },
      "id": {
        "id": "fuse/reactive/clamp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/clamp",
        "href": "fuse/reactive/clamp"
      },
      "titles": {
        "indexTitle": "Clamp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Clamp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/concat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/concat",
        "href": "fuse/reactive/concat"
      },
      "titles": {
        "indexTitle": "Concat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Concat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/conditional",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/conditional",
        "href": "fuse/reactive/conditional"
      },
      "titles": {
        "indexTitle": "Conditional",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Conditional"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric cosine of the input angle (in radians)",
        "full": "The trigonometric cosine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/cos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/cos",
        "href": "fuse/reactive/cos"
      },
      "titles": {
        "indexTitle": "Cos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Cos"
      }
    },
    {
      "comment": {
        "brief": "Reduces the lightness of a color.",
        "full": "Reduces the lightness of a color.\n\nThis subtracts the lightness value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/darkenfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/darkenfunction",
        "href": "fuse/reactive/darkenfunction"
      },
      "titles": {
        "indexTitle": "DarkenFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DarkenFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/degreestoradians",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/degreestoradians",
        "href": "fuse/reactive/degreestoradians"
      },
      "titles": {
        "indexTitle": "DegreesToRadians",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DegreesToRadians"
      }
    },
    {
      "comment": {
        "brief": "Decreases the saturation of a color.",
        "full": "Decreases the saturation of a color.\n\nThis subtracts the saturation value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/desaturatefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/desaturatefunction",
        "href": "fuse/reactive/desaturatefunction"
      },
      "titles": {
        "indexTitle": "DesaturateFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DesaturateFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/divide",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/divide",
        "href": "fuse/reactive/divide"
      },
      "titles": {
        "indexTitle": "Divide",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Divide"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/equal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/equal",
        "href": "fuse/reactive/equal"
      },
      "titles": {
        "indexTitle": "Equal",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Equal"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is even, false otherwise",
        "full": "True if the rounded value is even, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/even",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/even",
        "href": "fuse/reactive/even"
      },
      "titles": {
        "indexTitle": "Even",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Even"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp",
        "href": "fuse/reactive/exp"
      },
      "titles": {
        "indexTitle": "Exp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp2",
        "href": "fuse/reactive/exp2"
      },
      "titles": {
        "indexTitle": "Exp2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/floor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/floor",
        "href": "fuse/reactive/floor"
      },
      "titles": {
        "indexTitle": "Floor",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Floor"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/fract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/fract",
        "href": "fuse/reactive/fract"
      },
      "titles": {
        "indexTitle": "Fract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Fract"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterorequal",
        "href": "fuse/reactive/greaterorequal"
      },
      "titles": {
        "indexTitle": "GreaterOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterthan",
        "href": "fuse/reactive/greaterthan"
      },
      "titles": {
        "indexTitle": "GreaterThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterThan"
      }
    },
    {
      "comment": {
        "brief": "Converts a color from HSLA to RGBA.",
        "full": "Converts a color from HSLA to RGBA.\n\nSee @RgbaToHslaFunction for notes on the format."
      },
      "id": {
        "id": "fuse/reactive/hslatorgbafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/hslatorgbafunction",
        "href": "fuse/reactive/hslatorgbafunction"
      },
      "titles": {
        "indexTitle": "HslaToRgbaFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.HslaToRgbaFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/infixoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/infixoperator",
        "href": "fuse/reactive/infixoperator"
      },
      "titles": {
        "indexTitle": "InfixOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InfixOperator"
      }
    },
    {
      "comment": {
        "brief": "Test if a value is defined the context, returning `true` or `false`.",
        "full": "Test if a value is defined the context, returning `true` or `false`.\n\nThis can be used to check if a value is available yet in the data context, for example `isDefined({a})`.\n\nIf the value exists but is null then `true` will still be returned. Consider using `isNull` if you wish to exclude null as well.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/isdefined",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isdefined",
        "href": "fuse/reactive/isdefined"
      },
      "titles": {
        "indexTitle": "IsDefined",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDefined"
      }
    },
    {
      "comment": {
        "brief": "Returns false if the value exists and is non-null, true otherwise.",
        "full": "Returns false if the value exists and is non-null, true otherwise.\n\nThis is the same condition used in the NullCoalesce operator:\n\n    expr ?? res\n\nIs the same as:\n\n    isNull(expr) ? res : expr"
      },
      "id": {
        "id": "fuse/reactive/isnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isnull",
        "href": "fuse/reactive/isnull"
      },
      "titles": {
        "indexTitle": "IsNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsNull"
      }
    },
    {
      "comment": {
        "brief": "Calculates the linear interpolation between two values.",
        "full": "Calculates the linear interpolation between two values.\n\n    lerp( from, to, step )\n\nWhen step==0 the result is `from`, when step==1 the result is `to`. Partial values are linearly interpolated. Step values <0 and >1 are also supported.\n\nThe input supports a 1-4 component value for `from` and `to`. The result will be same size.\n`step` must always be a single value."
      },
      "id": {
        "id": "fuse/reactive/lerp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lerp",
        "href": "fuse/reactive/lerp"
      },
      "titles": {
        "indexTitle": "Lerp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Lerp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessorequal",
        "href": "fuse/reactive/lessorequal"
      },
      "titles": {
        "indexTitle": "LessOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessthan",
        "href": "fuse/reactive/lessthan"
      },
      "titles": {
        "indexTitle": "LessThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessThan"
      }
    },
    {
      "comment": {
        "brief": "Increases the lightness of a color.",
        "full": "Increases the lightness of a color.\n\nThis adds the lightness value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/lightenfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lightenfunction",
        "href": "fuse/reactive/lightenfunction"
      },
      "titles": {
        "indexTitle": "LightenFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LightenFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log",
        "href": "fuse/reactive/log"
      },
      "titles": {
        "indexTitle": "Log",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log2",
        "href": "fuse/reactive/log2"
      },
      "titles": {
        "indexTitle": "Log2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicaland",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicaland",
        "href": "fuse/reactive/logicaland"
      },
      "titles": {
        "indexTitle": "LogicalAnd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalAnd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalnot",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalnot",
        "href": "fuse/reactive/logicalnot"
      },
      "titles": {
        "indexTitle": "LogicalNot",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalNot"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalor",
        "href": "fuse/reactive/logicalor"
      },
      "titles": {
        "indexTitle": "LogicalOr",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalOr"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/max",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/max",
        "href": "fuse/reactive/max"
      },
      "titles": {
        "indexTitle": "Max",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Max"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/min",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/min",
        "href": "fuse/reactive/min"
      },
      "titles": {
        "indexTitle": "Min",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Min"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/mod",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/mod",
        "href": "fuse/reactive/mod"
      },
      "titles": {
        "indexTitle": "Mod",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Mod"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/multiply",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/multiply",
        "href": "fuse/reactive/multiply"
      },
      "titles": {
        "indexTitle": "Multiply",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Multiply"
      }
    },
    {
      "comment": {
        "brief": "Creates a `Fuse.NameValuePair` from a name and a value.",
        "full": "Creates a `Fuse.NameValuePair` from a name and a value."
      },
      "id": {
        "id": "fuse/reactive/namevaluepair",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namevaluepair",
        "href": "fuse/reactive/namevaluepair"
      },
      "titles": {
        "indexTitle": "NameValuePair",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NameValuePair"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/negate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/negate",
        "href": "fuse/reactive/negate"
      },
      "titles": {
        "indexTitle": "Negate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Negate"
      }
    },
    {
      "comment": {
        "brief": "Returns the value if it isn't null otherwise doesn't evaluate.",
        "full": "Returns the value if it isn't null otherwise doesn't evaluate.\n\nThis is a special use function in cases where you need to deal temporarily with null values that later become non-null. Instead of the null creating errors in an expression chain, this causes the expression to not evaluate at all.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/nonnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nonnull",
        "href": "fuse/reactive/nonnull"
      },
      "titles": {
        "indexTitle": "NonNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NonNull"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/notequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/notequal",
        "href": "fuse/reactive/notequal"
      },
      "titles": {
        "indexTitle": "NotEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NotEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/nullcoalesce",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nullcoalesce",
        "href": "fuse/reactive/nullcoalesce"
      },
      "titles": {
        "indexTitle": "NullCoalesce",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NullCoalesce"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is odd, false otherwise",
        "full": "True if the rounded value is odd, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/odd",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/odd",
        "href": "fuse/reactive/odd"
      },
      "titles": {
        "indexTitle": "Odd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Odd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/pow",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/pow",
        "href": "fuse/reactive/pow"
      },
      "titles": {
        "indexTitle": "Pow",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Pow"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take four arguments/operands.",
        "full": "Base class for reactive functions/operators that take four arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/quaternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/quaternaryoperator",
        "href": "fuse/reactive/quaternaryoperator"
      },
      "titles": {
        "indexTitle": "QuaternaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.QuaternaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/radianstodegrees",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/radianstodegrees",
        "href": "fuse/reactive/radianstodegrees"
      },
      "titles": {
        "indexTitle": "RadiansToDegrees",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.RadiansToDegrees"
      }
    },
    {
      "comment": {
        "brief": "Converts a color from RGBA to HSLA color space.",
        "full": "Converts a color from RGBA to HSLA color space.\n\nThe result is a float4 with this format:\n\n    float4( hue, saturation, lightness, alpha )\n\nValues in HSL are normalized just like in RGB. Hue is 0..1, covering the range 0° to 360°. Saturation and lightness are 0..1. Alpha is 0..1 is copied from the input RGBA value."
      },
      "id": {
        "id": "fuse/reactive/rgbatohslafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/rgbatohslafunction",
        "href": "fuse/reactive/rgbatohslafunction"
      },
      "titles": {
        "indexTitle": "RgbaToHslaFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.RgbaToHslaFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/round",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/round",
        "href": "fuse/reactive/round"
      },
      "titles": {
        "indexTitle": "Round",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Round"
      }
    },
    {
      "comment": {
        "brief": "Increases the saturation of a color.",
        "full": "Increases the saturation of a color.\n\nThis adds the saturation value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/saturatefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/saturatefunction",
        "href": "fuse/reactive/saturatefunction"
      },
      "titles": {
        "indexTitle": "SaturateFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.SaturateFunction"
      }
    },
    {
      "comment": {
        "brief": "Scales the lightness of the color towards white or black.",
        "full": "Scales the lightness of the color towards white or black.\n\nPositive values from 0..1 lerp between the current lightness and `1`.\nNegative values from 0..1 lerp between the current ligthness and `0`.\n\nThe scaling is done in HSL color space."
      },
      "id": {
        "id": "fuse/reactive/scalelightnessfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/scalelightnessfunction",
        "href": "fuse/reactive/scalelightnessfunction"
      },
      "titles": {
        "indexTitle": "ScaleLightnessFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ScaleLightnessFunction"
      }
    },
    {
      "comment": {
        "brief": "Scales the saturation of the color towards full or none.",
        "full": "Scales the saturation of the color towards full or none.\n\nPositive values from 0..1 lerp between the current saturation and `1`.\nNegative values from 0..1 lerp between the current saturation and `0`.\n\nThe scaling is done in HSL color space."
      },
      "id": {
        "id": "fuse/reactive/scalesaturationfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/scalesaturationfunction",
        "href": "fuse/reactive/scalesaturationfunction"
      },
      "titles": {
        "indexTitle": "ScaleSaturationFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ScaleSaturationFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sign",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sign",
        "href": "fuse/reactive/sign"
      },
      "titles": {
        "indexTitle": "Sign",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sign"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric sine of the input angle (in radians)",
        "full": "The trigonometric sine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/sin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sin",
        "href": "fuse/reactive/sin"
      },
      "titles": {
        "indexTitle": "Sin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sin"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sqrt",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sqrt",
        "href": "fuse/reactive/sqrt"
      },
      "titles": {
        "indexTitle": "Sqrt",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sqrt"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/subtract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/subtract",
        "href": "fuse/reactive/subtract"
      },
      "titles": {
        "indexTitle": "Subtract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Subtract"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric tangent of the input angle (in radians)",
        "full": "The trigonometric tangent of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/tan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tan",
        "href": "fuse/reactive/tan"
      },
      "titles": {
        "indexTitle": "Tan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Tan"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take three arguments/operands.",
        "full": "Base class for reactive functions/operators that take three arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/ternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ternaryoperator",
        "href": "fuse/reactive/ternaryoperator"
      },
      "titles": {
        "indexTitle": "TernaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.TernaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Forces a conversion to floating point. This supports any 1-4 component float vector.",
        "full": "Forces a conversion to floating point. This supports any 1-4 component float vector."
      },
      "id": {
        "id": "fuse/reactive/tofloat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tofloat",
        "href": "fuse/reactive/tofloat"
      },
      "titles": {
        "indexTitle": "ToFloat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToFloat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/tolower",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tolower",
        "href": "fuse/reactive/tolower"
      },
      "titles": {
        "indexTitle": "ToLower",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToLower"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a Size or Size2 depending on input size.",
        "full": "Forces conversion to a Size or Size2 depending on input size.\n\nThis is useful when using operators that may not be able to infer the desired types. For example:\n\n    <JavaScript>\n        exports.jsArray = [0.2, 0.4]\n    </JavaScript>\n    <Panel Offset=\"size({jsArray}) * 100%\"/>\n\nThis function follows the conversion rules as though the operand was being converted directly to a `Size` or `Size2` property type. If the input is a `float2`, array, or already a Size2, then it will be converted to a `Size2`, otherwise a `Size` type."
      },
      "id": {
        "id": "fuse/reactive/tosize",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tosize",
        "href": "fuse/reactive/tosize"
      },
      "titles": {
        "indexTitle": "ToSize",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToSize"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a string value.",
        "full": "Forces conversion to a string value."
      },
      "id": {
        "id": "fuse/reactive/tostring",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tostring",
        "href": "fuse/reactive/tostring"
      },
      "titles": {
        "indexTitle": "ToString",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToString"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/toupper",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/toupper",
        "href": "fuse/reactive/toupper"
      },
      "titles": {
        "indexTitle": "ToUpper",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToUpper"
      }
    },
    {
      "comment": {
        "brief": "Rounds to the next whole integer closer to zero",
        "full": "Rounds to the next whole integer closer to zero"
      },
      "id": {
        "id": "fuse/reactive/trunc",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/trunc",
        "href": "fuse/reactive/trunc"
      },
      "titles": {
        "indexTitle": "Trunc",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Trunc"
      }
    },
    {
      "comment": {
        "brief": "Common base for floating point operations",
        "full": "Common base for floating point operations\n\nAll the derived expressions support 1-4 component input values and will return a value of the same size.\n\n[subclass Fuse.Reactive.UnaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/unaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryfloatoperator",
        "href": "fuse/reactive/unaryfloatoperator"
      },
      "titles": {
        "indexTitle": "UnaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Optimized base class for reactive functions/operators that take a single argument/operand.",
        "full": "Optimized base class for reactive functions/operators that take a single argument/operand."
      },
      "id": {
        "id": "fuse/reactive/unaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryoperator",
        "href": "fuse/reactive/unaryoperator"
      },
      "titles": {
        "indexTitle": "UnaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Returns the `W` value of a `float4` value.",
        "full": "Returns the `W` value of a `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorw",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorw",
        "href": "fuse/reactive/vectorw"
      },
      "titles": {
        "indexTitle": "VectorW",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorW"
      }
    },
    {
      "comment": {
        "brief": "Returns the `Z` value of a `float3` or `float4` value.",
        "full": "Returns the `Z` value of a `float3` or `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorz",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorz",
        "href": "fuse/reactive/vectorz"
      },
      "titles": {
        "indexTitle": "VectorZ",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorZ"
      }
    }
  ]
}