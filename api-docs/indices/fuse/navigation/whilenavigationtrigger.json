{
  "root": {
    "id": {
      "id": "fuse/navigation/whilenavigationtrigger",
      "parentId": "fuse/navigation",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/navigation/whilenavigationtrigger",
      "href": "fuse/navigation/whilenavigationtrigger"
    },
    "titles": {
      "indexTitle": "WhileNavigationTrigger",
      "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigationTrigger"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Animates while the page is active.",
        "full": "Animates while the page is active.\n\n## Example\n\nThe following example changes the value of a @Text element to `Active` when the\nfirst page of a @PageControl is active. We set the `Threshold` high to make the\nchange happen later when transitioning to the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Inactive</Text>\n                <WhileActive Threshold=\"0.9\">\n                    <Change text.Value=\"Active\" />\n                </WhileActive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger for a page is calculated as `1 - distance_to_active`. So a page progress of 0 will map to `1` for this trigger, and anything more than `1` away from the active page will be `0`. For example, the `Threshold=\"0.9\"` in the above example means the trigger will become active when the page has been swiped 90% of the way to active, instead of waiting to 100%."
      },
      "id": {
        "id": "fuse/navigation/whileactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileactive",
        "href": "fuse/navigation/whileactive"
      },
      "titles": {
        "indexTitle": "WhileActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileActive"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is inactive.",
        "full": "Animates while the page is inactive.\n\n## Example\n\nThe following example changes the value of a @Text element to `Inactive` when the\nfirst page of a @PageControl is inactive. We set the `Threshold` low to make the\nchange happen earlier when transitioning from the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Active</Text>\n                <WhileInactive Threshold=\"0.1\">\n                    <Change text.Value=\"Inactive\" />\n                </WhileInactive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger is calculated as the page's distance from the active page (or the navigation position for continuous navigation). For example, the active page has a distance of 0, meaning this trigger will not be activated, and a page 1 away from the active has a distance of 1, meaning this trigger will be activated. The `Threshold=0.1` in this example means the trigger activates after the page has been swiped only 10% of the distance away from the active position."
      },
      "id": {
        "id": "fuse/navigation/whileinactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinactive",
        "href": "fuse/navigation/whileinactive"
      },
      "titles": {
        "indexTitle": "WhileInactive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInactive"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes behind the current page. It can only be activated while the page is in front of the active one (in the front)."
      },
      "id": {
        "id": "fuse/navigation/whileinenterstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinenterstate",
        "href": "fuse/navigation/whileinenterstate"
      },
      "titles": {
        "indexTitle": "WhileInEnterState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInEnterState"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes in front of the current page. It can only be activated while the page is behind the active one (in the back)."
      },
      "id": {
        "id": "fuse/navigation/whileinexitstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinexitstate",
        "href": "fuse/navigation/whileinexitstate"
      },
      "titles": {
        "indexTitle": "WhileInExitState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInExitState"
      }
    }
  ]
}