{
  "root": {
    "id": {
      "id": "fuse/animations/openanimator",
      "parentId": "fuse/animations",
      "type": "Class",
      "modifiers": [
        "public",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/animations/openanimator",
      "href": "fuse/animations/openanimator"
    },
    "titles": {
      "indexTitle": "OpenAnimator",
      "fullyQualifiedIndexTitle": "Fuse.Animations.OpenAnimator"
    }
  },
  "descendants": [
    {
      "comment": {
        "brief": "Animates a repeating cycle between a high and low value using a given waveform.",
        "full": "Animates a repeating cycle between a high and low value using a given waveform.\n\nThe cycling of the animation continues even when the `Trigger.Progress` reaches 1. When a trigger is deactivated the cycling will play backwards, possibly beyond reaching Progress=1, until it finds a suitable rest state. This ensure that `Cycle` does not produce any jarring switches when the triggers are activated and deactivated.\n\n## Example\n\nThe below example creates a simple pulsing effect on the panel while it is pressed.\n\n    <Panel Color=\"Blue\" ux:Name=\"panel1\" Width=\"100\" Height=\"100\">\n        <WhilePressed>\n            <Cycle Target=\"panel1.Width\" Low=\"80\" High=\"120\" Frequency=\"0.5\"/>\n        </WhilePressed>\n    </Panel>\n\nBy adjusting the `Waveform` you can creates animations that wrap-around instead of bouncing back and forth.\n\n    <Cycle Target=\"panel.X\" Low=\"-100\" High=\"100\" Waveform=\"Triangle\"/>\n\nThe \"wrap-around\" here is simply the nature of the triangular waveform -- the default waveform is sinusoidal.\n\n## Formula\n\nThe properties are defined to be a simple interface, but it may be easier to understand see how they all relate in an expression. Given a current time offset the value of the `Target` is defined roughly as:\n\n    Target.Value = Lerp( Low, High, Easing( Waveform(Time) ) ) * Base + Offset\n\n`Low` and `High` can only be scalar values. `Cycle` checks whether these values cross zero, or one. If they do, it will start at that value, and return to that value when done (this is the default value for `ProgressOffset`). This allows a smooth return to rest state in animation.\n\nModifying `Base` and `Offset` allows you to use `Cycle` with non-scalar values. Though be aware not all combinations of value can provide for a smooth return to the rest state."
      },
      "id": {
        "id": "fuse/animations/cycle_1",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/cycle_1",
        "href": "fuse/animations/cycle_1"
      },
      "titles": {
        "indexTitle": "Cycle<T>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Cycle<T>"
      }
    },
    {
      "comment": {
        "brief": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.",
        "full": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.\n\n    <Panel>\n    <WhilePressed>\n        <Spin Frequency=\"2\" />\n    </WhilePressed>\n    </Panel>\n\nAs with @(Cycle), you may also specify a `Duration` to control the length of the animation."
      },
      "id": {
        "id": "fuse/animations/spin",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/spin",
        "href": "fuse/animations/spin"
      },
      "titles": {
        "indexTitle": "Spin",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Spin"
      }
    }
  ]
}