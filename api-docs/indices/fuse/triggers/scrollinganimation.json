{
  "root": {
    "id": {
      "id": "fuse/triggers/scrollinganimation",
      "parentId": "fuse/triggers",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/triggers/scrollinganimation",
      "href": "fuse/triggers/scrollinganimation"
    },
    "titles": {
      "indexTitle": "ScrollingAnimation",
      "fullyQualifiedIndexTitle": "Fuse.Triggers.ScrollingAnimation"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/stickinganimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickinganimation",
        "href": "alive/stickinganimation"
      },
      "titles": {
        "indexTitle": "StickingAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Animation that progresses as a [StickyHeader](api:alive/stickyheader) begins sticking,\nwithin to a given distance.",
        "full": "Animation that progresses as a [StickyHeader](api:alive/stickyheader) begins sticking,\nwithin to a given distance.\n\nNot to be confused with [StickyHeaderAnimation](api:alive/stickyheaderanimation).\n\nThe `Distance` property determines the distance from where the header starts sticking that must be scrolled,\nfor the animation to progress from start to finish.\n\n    <ScrollView>\n        <StackPanel>\n            <Alive.StickyHeader>\n                <Panel ux:Binding=\"Header\" Height=\"60\" Color=\"{Resource Alive.AccentColor}\">\n                    <Shadow ux:Name=\"shadow\" Size=\"0\" />\n                </Panel>\n                <Alive.StickingAnimation Distance=\"60\">\n                    <Change shadow.Size=\"1\" />\n                </Alive.StickingAnimation>\n            </Alive.StickyHeader>\n        </StackPanel>\n    </ScrollView>"
      },
      "id": {
        "id": "alive/stickyheaderanimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheaderanimation",
        "href": "alive/stickyheaderanimation"
      },
      "titles": {
        "indexTitle": "StickyHeaderAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickyHeaderAnimation"
      }
    },
    {
      "comment": {
        "brief": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.",
        "full": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.\n\nIt is implemented as a `ScrollingAnimation`, with a set of properties that let you bind different states that should be triggered during different stages of interaction:\n\n* Pulling - Active when the user is actively pulling down beond the top of the content\n* PulledPastThreshold - Active when the user has pulled down enough to activate loading\n* Loading - Active when the \"loading\" has started. Loading starts when the user has pulled past the threshold, and then leaves the threshold area.\n* Rest - Active when the user has pulled down the content, but their last movement was upwards.\nIn addition, you have a callback, `ReloadHandler`, which is called when the `Loading` state activates.\n\n* Note that `PullToReload` inherits from @ScrollingAnimation and therefore can be tweaked further using its properties. Here is an example of how we can tweak it to be pulled from the bottom instead using the `Range` property from `ScrollingAnimation`:\n\n```\n<PullToReload Range=\"SnapMax\">\n    ...\n</PullToReload>\n```\n\nSee the [Pull to reload](/examples/pull-to-reload), for a complete example on how to use it.\n\n# Example\n\nThe following example flashes the app background in different colors as the different states of the `PullToReload` happen:\n\n    <ScrollView>\n        <PullToReload>\n            <Timeline ux:Name=\"redFlash\">\n                <Change color.Color=\"#F00\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"pinkFlash\">\n                <Change color.Color=\"#FFC0DB\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"greenFlash\">\n                <Change color.Color=\"#0F0\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"blueFlash\">\n                <Change color.Color=\"#00F\" Duration=\"1\"/>\n            </Timeline>\n            <State ux:Binding=\"Pulling\">\n                <Cycle Target=\"redFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"PulledPastThreshold\">\n                <Cycle Target=\"pinkFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Loading\">\n                <Cycle Target=\"greenFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Rest\">\n                <Cycle Target=\"blueFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n        </PullToReload>\n        <StackPanel>\n            <Text Margin=\"20\">The quick brown fox</Text>\n            <Text Margin=\"20\">Jumps over the lazy dog</Text>\n        </StackPanel>\n        <SolidColor ux:Name=\"color\" Color=\"#FFF\"/>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/pulltoreload",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pulltoreload",
        "href": "fuse/triggers/pulltoreload"
      },
      "titles": {
        "indexTitle": "PullToReload",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PullToReload"
      }
    }
  ]
}