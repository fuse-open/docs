{
  "entity": {
    "base": {
      "id": {
        "id": "fuse/behavior",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/behavior",
        "href": "fuse/behavior"
      },
      "titles": {
        "indexTitle": "Behavior",
        "fullyQualifiedIndexTitle": "Fuse.Behavior"
      }
    },
    "location": {
      "namespaceTitle": "Fuse.Gestures",
      "namespaceUri": "fuse/gestures",
      "packageName": "Fuse.Gestures",
      "packageVersion": "1.8.0-rc2"
    },
    "inheritance": {
      "root": {
        "uri": "uno/object",
        "title": "object",
        "children": [
          {
            "uri": "uno/ux/propertyobject",
            "title": "Uno.UX.PropertyObject",
            "children": [
              {
                "uri": "fuse/node",
                "title": "Fuse.Node",
                "children": [
                  {
                    "uri": "fuse/behavior",
                    "title": "Fuse.Behavior",
                    "children": [
                      {
                        "uri": "fuse/gestures/swipegesture",
                        "title": "Fuse.Gestures.SwipeGesture",
                        "children": [],
                        "isCurrent": true
                      }
                    ],
                    "isAncestor": true
                  }
                ],
                "isAncestor": true
              }
            ],
            "isAncestor": true
          }
        ],
        "isAncestor": true
      },
      "hasInheritance": true
    },
    "uxProperties": {
      "uxNamespaceTitle": "Fuse.Gestures",
      "uxNamespaceUri": "fuse/gestures",
      "uxName": "SwipeGesture"
    },
    "implementedInterfaces": [
      {
        "id": {
          "id": "uno/ux/ipropertylistener",
          "parentId": "uno/ux",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/ux/ipropertylistener",
          "href": "uno/ux/ipropertylistener"
        },
        "titles": {
          "indexTitle": "IPropertyListener",
          "fullyQualifiedIndexTitle": "Uno.UX.IPropertyListener"
        }
      },
      {
        "id": {
          "id": "uno/collections/ilist_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ilist_1",
          "href": "uno/collections/ilist_1"
        },
        "titles": {
          "indexTitle": "IList<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IList<Fuse.Binding>"
        }
      },
      {
        "comment": {
          "brief": "Interface for objects that can have a script engine representation",
          "full": "Interface for objects that can have a script engine representation"
        },
        "id": {
          "id": "fuse/scripting/iscriptobject",
          "parentId": "fuse/scripting",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/scripting/iscriptobject",
          "href": "fuse/scripting/iscriptobject"
        },
        "titles": {
          "indexTitle": "IScriptObject",
          "fullyQualifiedIndexTitle": "Fuse.Scripting.IScriptObject"
        }
      },
      {
        "id": {
          "id": "fuse/iproperties",
          "parentId": "fuse",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/iproperties",
          "href": "fuse/iproperties"
        },
        "titles": {
          "indexTitle": "IProperties",
          "fullyQualifiedIndexTitle": "Fuse.IProperties"
        }
      },
      {
        "id": {
          "id": "uno/collections/icollection_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/icollection_1",
          "href": "uno/collections/icollection_1"
        },
        "titles": {
          "indexTitle": "ICollection<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.ICollection<Fuse.Binding>"
        }
      },
      {
        "id": {
          "id": "uno/collections/ienumerable_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ienumerable_1",
          "href": "uno/collections/ienumerable_1"
        },
        "titles": {
          "indexTitle": "IEnumerable<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IEnumerable<Fuse.Binding>"
        }
      }
    ],
    "id": {
      "id": "fuse/gestures/swipegesture",
      "parentId": "fuse/gestures",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/gestures/swipegesture",
      "href": "fuse/gestures/swipegesture"
    },
    "titles": {
      "pageTitle": "SwipeGesture Class",
      "navigationTitle": "SwipeGesture Class",
      "fullTitle": "Fuse.Gestures.SwipeGesture",
      "indexTitle": "SwipeGesture",
      "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture"
    },
    "syntax": {
      "uno": "public class SwipeGesture : Fuse.Behavior, Uno.UX.IPropertyListener {}",
      "ux": "<SwipeGesture />"
    },
    "comment": {
      "brief": "Recognizes a swipe (the movement of a pointer in a given direction).",
      "full": "Recognizes a swipe (the movement of a pointer in a given direction).\n\n# Basic usage\r\n\r\nA SwipeGesture must be attached to an @Element, and will begin detecting swipes when the pointer is pressed\r\ndown on that element. Attaching a @SwipeGesture to an @Element is simply adding it as a child:\r\n\r\n\t<Panel>\r\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\r\n\t</Panel>\r\n\r\nThe snippet above will recognize swipe gestures moving from left to right,\r\nover a distance of 200 points.\r\n\r\nHowever, this isn't doing anything useful yet. Let's add a trigger!\r\n\r\n\t<Panel Width=\"100\" Height=\"100\" Background=\"Black\">\r\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\r\n\t\t<SwipingAnimation Source=\"swipe\">\r\n\t\t\t<Move X=\"200\" />\r\n\t\t</SwipingAnimation>\r\n\t</Panel>\r\n\t\r\nWe've now added a @SwipingAnimation, which will map the progress of our swipe gesture onto a series of\r\nanimations. In this case, we are moving the panel over the same distance as the `Length` of our\r\nSwipeGesture, resulting in the panel moving along with the pointer.\r\n\r\n> Note that we've referenced our SwipeGesture via the `Source` property of @SwipingAnimation.\r\n> This is because it is possible to have [multiple swipe gestures](#multiple-swipegestures) on a single element,\r\n> so it must be referenced explicitly. All swipe-related triggers share this property.\r\n\r\nWe also want to respond when the swipe has completed, which is achieved using the\r\n[Swiped](api:fuse/gestures/swiped) trigger. Let's extend our previous example a bit.\r\n\r\n\t<Panel Width=\"100\" Height=\"100\" Background=\"Black\">\r\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\r\n\t\t<SwipingAnimation Source=\"swipe\">\r\n\t\t\t<Move X=\"200\" />\r\n\t\t</SwipingAnimation>\r\n\t\t\r\n\t\t<Swiped>\r\n\t\t\t<DebugAction Message=\"Swiped!\" />\r\n\t\t</Swiped>\r\n\t</Panel>\r\n\r\nFor illustrative purposes, we are using @DebugAction to log a message\r\nto the console when the swipe has completed.\r\n\r\n# Swipe types\r\n\r\nSwipeGesture is designed to handle multiple scenarios,\r\nand can have one of three [types](api:fuse/gestures/swipetype), specified via the `Type` property.\r\n\r\nThe [type](api:fuse/gestures/swipetype) of a SwipeGesture determines its behavior, and below we'll explain each one.\r\n\r\n## [Simple](api:fuse/gestures/swipetype/simple)\r\n\r\n`Simple` is the default @SwipeType, and thus the one we have been using so far in this article.\r\n\r\nWhen using this type, swipes are treated as one-off events, and swipes will complete once the pointer is released.\r\n\r\n## [Auto](api:fuse/gestures/swipetype/auto)\r\n\r\n`Auto` is *almost* identical to `Simple`, however swipes complete once the user has swiped over the entire\r\ndistance of the SwipeGesture, without the user needing to release the pointer.\r\nThis allows multiple SwipeGestures to be triggered in sequence without releasing the pointer.\r\n\r\n<a id=\"swipetype-active-overview\"></a>\r\n\r\n## [Active](api:fuse/gestures/swipetype/active)\r\n\r\n`Type=\"Active\"` makes swipes toggle between an active/inactive state.\r\nSwiping in the @Direction of the SwipeGesture will transition to the *active* state,\r\nwhile swiping in the opposite direction will transition to the *inactive* state.\r\n\r\nWe can alter the state of an Active-type SwipeGesture using\r\n[SetSwipeActive](api:fuse/gestures/setswipeactive) and/or\r\n[ToggleSwipeActive](api:fuse/gestures/toggleswipeactive).\r\n\r\n### Reacting to state transitions\r\n\r\nWhen using the `Active` type, we can optionally configure the [Swiped](api:fuse/gestures/swiped) trigger\r\nto respond to only activation or only deactivation.\r\n\r\n\t<Swiped How=\"ToActive\">\r\n\t<Swiped How=\"ToInactive\">\r\n\r\nIn addition, the @WhileSwipeActive trigger will be active while its source @SwipeGesture is an Active-type\r\nSwipeGesture, and has been swiped to its active state.\r\n\r\n# Edge\r\n\r\nInstead of specifying a `Direction`, we may provide an `Edge`. This will make the SwipeGesture detect swipes\r\noriginating at a given edge of its parent element.\r\n\r\nWe can also customize the size of the edge area using the `HitSize` property.\r\nIt accepts a single number, which represents the maximum distance from the edge (in points) that swipes can\r\nbegin at.\r\n\r\n# Length based on element size\r\n\r\nInstead of specifying a fixed `Length` for the gesture,\r\nwe can supply an @Element to be measured via the `LengthNode` property.\r\n\r\nThis is a powerful feature, as it allows us to create swipe-based controls that work regardless of their size.\r\n\r\nBelow is an example of a size-independent switch control implemented using SwipeGesture.\r\n\r\n\t<Panel Height=\"50\">\r\n\t\t<Circle Width=\"50\" Height=\"50\" Color=\"#000\" Alignment=\"Left\">\r\n\t\t\t<SwipeGesture ux:Name=\"swipe\" LengthNode=\"track\" Direction=\"Right\" Type=\"Active\" />\r\n\t\t\t<SwipingAnimation Source=\"swipe\">\r\n\t\t\t\t<Move X=\"1\" RelativeTo=\"Size\" RelativeNode=\"track\" />\r\n\t\t\t</SwipingAnimation>\r\n\t\t</Circle>\r\n\t\t\r\n\t\t<Rectangle ux:Name=\"track\" Height=\"15\" Color=\"#0003\" Margin=\"25,0\" CornerRadius=\"15\" />\r\n\t</Panel>",
      "remarks": "An element may have multiple swipe gestures, and will behave correctly as long as they point in different directions.",
      "examples": "Take a look at [this sample project](https://github.com/fusetools/fuse-samples/tree/master/Samples/Gestures/Swipe) for an in-depth example.",
      "attributes": {
        "topic": "Swipe Gestures"
      }
    }
  },
  "tableOfContents": {
    "uxProperties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/gestures/swipegesture",
            "parentId": "fuse/gestures",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/gestures/swipegesture",
            "href": "fuse/gestures/swipegesture"
          },
          "titles": {
            "indexTitle": "SwipeGesture",
            "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The direction of movement to detect swipe gestures for.",
              "full": "The direction of movement to detect swipe gestures for.\n\nWhen `Type=\"Active\"`, the opposite direction is used to deactivate the trigger."
            },
            "returns": {
              "href": "fuse/gestures/swipedirection",
              "title": "SwipeDirection",
              "fullyQualifiedTitle": "Fuse.Gestures.SwipeDirection"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/direction",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/direction",
              "href": "fuse/gestures/swipegesture/direction"
            },
            "titles": {
              "indexTitle": "Direction",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.Direction"
            }
          },
          {
            "comment": {
              "brief": "If specified, this makes the swipe gesture activate from the edge of the parent element.",
              "full": "If specified, this makes the swipe gesture activate from the edge of the parent element.\n\nSee [edge swipes](#edge-swipes).\n\n> **Note:** Only one of `Edge` or `Direction` can be specified."
            },
            "returns": {
              "href": "fuse/gestures/edge",
              "title": "Edge",
              "fullyQualifiedTitle": "Fuse.Gestures.Edge"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/edge",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/edge",
              "href": "fuse/gestures/swipegesture/edge"
            },
            "titles": {
              "indexTitle": "Edge",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.Edge"
            }
          },
          {
            "comment": {
              "brief": "For [edge](api:fuse/gestures/swipegesture#edge) SwipeGestures, `HitSize` determines the maximum distance\nfrom the edge (in points) that swipes can begin at.",
              "full": "For [edge](api:fuse/gestures/swipegesture#edge) SwipeGestures, `HitSize` determines the maximum distance\nfrom the edge (in points) that swipes can begin at."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/hitsize",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/hitsize",
              "href": "fuse/gestures/swipegesture/hitsize"
            },
            "titles": {
              "indexTitle": "HitSize",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.HitSize"
            }
          },
          {
            "comment": {
              "brief": "`true` if the SwipeGesture has `Type=\"Active\"` and has been swiped to the active state.",
              "full": "`true` if the SwipeGesture has `Type=\"Active\"` and has been swiped to the active state."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/isactive",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/isactive",
              "href": "fuse/gestures/swipegesture/isactive"
            },
            "titles": {
              "indexTitle": "IsActive",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.IsActive"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/isenabled",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/isenabled",
              "href": "fuse/gestures/swipegesture/isenabled"
            },
            "titles": {
              "indexTitle": "IsEnabled",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.IsEnabled"
            }
          },
          {
            "comment": {
              "brief": "The total distance that must be covered in order for the swipe to complete.",
              "full": "The total distance that must be covered in order for the swipe to complete.\n\nThis is used to determine the progress of the swipe gesture.\n\nNote that since SwipeGesture applies some physics, deceleration also counts when calculating\nprogress."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/length",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/length",
              "href": "fuse/gestures/swipegesture/length"
            },
            "titles": {
              "indexTitle": "Length",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.Length"
            }
          },
          {
            "comment": {
              "brief": "If specified, the SwipeGesture will measure the given element to determine its `Length`.",
              "full": "If specified, the SwipeGesture will measure the given element to determine its `Length`.\n\nSee [length based on element size](api:fuse/gestures/swipegesture#length-based-on-element-size)."
            },
            "returns": {
              "href": "fuse/elements/element",
              "title": "Element",
              "fullyQualifiedTitle": "Fuse.Elements.Element"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/lengthnode",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/lengthnode",
              "href": "fuse/gestures/swipegesture/lengthnode"
            },
            "titles": {
              "indexTitle": "LengthNode",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.LengthNode"
            }
          },
          {
            "comment": {
              "brief": "The relative distance that must be travelled before the gesture automatically completes.",
              "full": "The relative distance that must be travelled before the gesture automatically completes.\n\nThe default when Type != Active is `1`, meaning the user must travel, or swipe with enough velocity, to cover the full distance. When `Type == Active` the default is `0.5`, meaning the panel will automatically open/close when the half-way point is reached.\n\nA separate value for activation and deactivating can be specified. The first value of the `float2` is the activation threshold, and the second value the deactivation threshold."
            },
            "returns": {
              "href": "uno/float2",
              "title": "float2",
              "fullyQualifiedTitle": "float2"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/threshold",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/threshold",
              "href": "fuse/gestures/swipegesture/threshold"
            },
            "titles": {
              "indexTitle": "Threshold",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.Threshold"
            }
          },
          {
            "comment": {
              "brief": "The type of swipe to detect. See @SwipeType.",
              "full": "The type of swipe to detect. See @SwipeType."
            },
            "returns": {
              "href": "fuse/gestures/swipetype",
              "title": "SwipeType",
              "fullyQualifiedTitle": "Fuse.Gestures.SwipeType"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/type",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/type",
              "href": "fuse/gestures/swipegesture/type"
            },
            "titles": {
              "indexTitle": "Type",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.Type"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The list of bindings belonging to this node.",
              "full": "The list of bindings belonging to this node."
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Binding>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Fuse.Binding>"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/gestures/swipegesture/bindings",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/bindings",
              "href": "fuse/node/bindings",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Bindings",
              "fullyQualifiedIndexTitle": "Fuse.Node.Bindings"
            }
          },
          {
            "comment": {
              "brief": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute.",
              "full": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute."
            },
            "returns": {
              "href": "uno/ux/selector",
              "title": "Selector",
              "fullyQualifiedTitle": "Uno.UX.Selector"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/name",
              "parentId": "fuse/gestures/swipegesture",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/name",
              "href": "fuse/node/name",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Name",
              "fullyQualifiedIndexTitle": "Fuse.Node.Name"
            }
          }
        ]
      }
    ],
    "attachedUxProperties": [
      {
        "items": [
          {
            "comment": {
              "brief": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.",
              "full": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.\n\nSee @Resources for more information.\n\nThe `ux:Global` attribute on an UX element creates a single object (singleton) that is globally available.\nUsing this attribute will prevent the object from being inserted by default the object at its defined location\nin the UX tree."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "parameters": [
              {
                "name": "obj",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/resource_globalkey_setglobalkey_4c3ac72d",
              "parentId": "fuse/gestures/swipegesture",
              "type": "AttachedUxProperty",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/resource_globalkey_setglobalkey_4c3ac72d",
              "href": "uno/ux/resource/setglobalkey_4c3ac72d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Resource.GlobalKey",
              "fullyQualifiedIndexTitle": "Resource.GlobalKey"
            }
          }
        ]
      }
    ],
    "constructors": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/gestures/swipegesture",
            "parentId": "fuse/gestures",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/gestures/swipegesture",
            "href": "fuse/gestures/swipegesture"
          },
          "titles": {
            "indexTitle": "SwipeGesture",
            "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture"
          }
        },
        "items": [
          {
            "id": {
              "id": "fuse/gestures/swipegesture/_ctor",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Constructor",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/_ctor",
              "href": "fuse/gestures/swipegesture/_ctor"
            },
            "titles": {
              "indexTitle": "SwipeGesture",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.SwipeGesture"
            }
          }
        ]
      }
    ],
    "properties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item.",
              "full": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/contextparent",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/contextparent",
              "href": "fuse/node/contextparent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ContextParent",
              "fullyQualifiedIndexTitle": "Fuse.Node.ContextParent"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting for this node is completed.\nReturns false if unrooting has started.",
              "full": "Whether rooting for this node is completed.\nReturns false if unrooting has started."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/isrootingcompleted",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/isrootingcompleted",
              "href": "fuse/node/isrootingcompleted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingCompleted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingCompleted"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted.",
              "full": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/isrootingstarted",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/isrootingstarted",
              "href": "fuse/node/isrootingstarted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingStarted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingStarted"
            }
          },
          {
            "comment": {
              "brief": "The parent @Visual of this node. Will return null if the node is not rooted.",
              "full": "The parent @Visual of this node. Will return null if the node is not rooted."
            },
            "returns": {
              "href": "fuse/visual",
              "title": "Visual",
              "fullyQualifiedTitle": "Fuse.Visual"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/parent",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/parent",
              "href": "fuse/node/parent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Parent",
              "fullyQualifiedIndexTitle": "Fuse.Node.Parent"
            }
          },
          {
            "comment": {
              "brief": "A linked list holding data for extrinsic properties.",
              "full": "A linked list holding data for extrinsic properties."
            },
            "returns": {
              "href": "fuse/properties",
              "title": "Properties",
              "fullyQualifiedTitle": "Fuse.Properties"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/properties",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/properties",
              "href": "fuse/node/properties",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Properties",
              "fullyQualifiedIndexTitle": "Fuse.Node.Properties"
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/gestures/swipegesture",
            "parentId": "fuse/gestures",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/gestures/swipegesture",
            "href": "fuse/gestures/swipegesture"
          },
          "titles": {
            "indexTitle": "SwipeGesture",
            "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "value",
                "href": "uno/bool",
                "title": "bool",
                "fullyQualifiedTitle": "bool"
              },
              {
                "name": "origin",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/setisactive_2879d103",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/setisactive_2879d103",
              "href": "fuse/gestures/swipegesture/setisactive_2879d103"
            },
            "titles": {
              "indexTitle": "SetIsActive(bool, IPropertyListener)",
              "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture.SetIsActive(bool, Uno.UX.IPropertyListener)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/add_cd0f711d",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/add_cd0f711d",
              "href": "fuse/node/add_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Add(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Add(Fuse.Binding)"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/findbytype_1",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/findbytype_1",
              "href": "fuse/node/findbytype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindByType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindByType<T>"
            }
          },
          {
            "comment": {
              "brief": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null.",
              "full": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "parameters": [
              {
                "name": "name",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Predicate<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/findnodebyname_66268add",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/findnodebyname_66268add",
              "href": "fuse/node/findnodebyname_66268add",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindNodeByName(Selector, Predicate<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindNodeByName(Uno.UX.Selector, Uno.Predicate<Fuse.Node> (Fuse.Node))"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/getnearestancestoroftype_1",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/getnearestancestoroftype_1",
              "href": "fuse/node/getnearestancestoroftype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetNearestAncestorOfType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.GetNearestAncestorOfType<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "index",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              },
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/insert_4036b6cf",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/insert_4036b6cf",
              "href": "fuse/node/insert_4036b6cf",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Insert(int, Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Insert(int, Fuse.Binding)"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/nextsibling_1",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/nextsibling_1",
              "href": "fuse/node/nextsibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "NextSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.NextSibling<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "newValue",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/ondatachanged_d062e5a9",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/ondatachanged_d062e5a9",
              "href": "fuse/node/ondatachanged_d062e5a9",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnDataChanged(string, object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnDataChanged(string, object)"
            }
          },
          {
            "comment": {
              "brief": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state.",
              "full": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state."
            },
            "id": {
              "id": "fuse/gestures/swipegesture/onrooted",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/onrooted",
              "href": "fuse/node/onrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnRooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnRooted"
            }
          },
          {
            "id": {
              "id": "fuse/gestures/swipegesture/onunrooted",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/onunrooted",
              "href": "fuse/node/onunrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnUnrooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnUnrooted"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/previoussibling_1",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/previoussibling_1",
              "href": "fuse/node/previoussibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "PreviousSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.PreviousSibling<T>"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/remove_cd0f711d",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/remove_cd0f711d",
              "href": "fuse/node/remove_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Remove(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Remove(Fuse.Binding)"
            }
          },
          {
            "id": {
              "id": "fuse/gestures/swipegesture/softdispose",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/softdispose",
              "href": "fuse/node/softdispose",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SoftDispose",
              "fullyQualifiedIndexTitle": "Fuse.Node.SoftDispose"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/subtreetostring",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/subtreetostring",
              "href": "fuse/node/subtreetostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString"
            }
          },
          {
            "parameters": [
              {
                "name": "sb",
                "href": "uno/text/stringbuilder",
                "title": "StringBuilder",
                "fullyQualifiedTitle": "Uno.Text.StringBuilder"
              },
              {
                "name": "indent",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/subtreetostring_efe5f5b8",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/subtreetostring_efe5f5b8",
              "href": "fuse/node/subtreetostring_efe5f5b8",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString(StringBuilder, int)",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString(Uno.Text.StringBuilder, int)"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<object> (object)",
                "fullyQualifiedTitle": "Uno.Predicate<object> (object)"
              },
              {
                "name": "resource",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/trygetresource_5317754b",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/trygetresource_5317754b",
              "href": "fuse/node/trygetresource_5317754b",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "TryGetResource(string, Predicate<object> (object), object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.TryGetResource(string, Uno.Predicate<object> (object), object)"
            }
          },
          {
            "parameters": [
              {
                "name": "action",
                "href": "uno/action_1",
                "title": "Action<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Action<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/visitsubtree_7a20b182",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/visitsubtree_7a20b182",
              "href": "fuse/node/visitsubtree_7a20b182",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "VisitSubtree(Action<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.VisitSubtree(Uno.Action<Fuse.Node> (Fuse.Node))"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/ux/propertyobject",
            "parentId": "uno/ux",
            "type": "Class",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "uno/ux/propertyobject",
            "href": "uno/ux/propertyobject"
          },
          "titles": {
            "indexTitle": "PropertyObject",
            "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/addpropertylistener_496a874a",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/addpropertylistener_496a874a",
              "href": "uno/ux/propertyobject/addpropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "AddPropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.AddPropertyListener(Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/onpropertychanged_16d735f3",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/onpropertychanged_16d735f3",
              "href": "uno/ux/propertyobject/onpropertychanged_16d735f3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "origin",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/onpropertychanged_6422fe92",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/onpropertychanged_6422fe92",
              "href": "uno/ux/propertyobject/onpropertychanged_6422fe92",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector, IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector, Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/removepropertylistener_496a874a",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/removepropertylistener_496a874a",
              "href": "uno/ux/propertyobject/removepropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "RemovePropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.RemovePropertyListener(Uno.UX.IPropertyListener)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/object",
            "parentId": "uno",
            "type": "Class",
            "modifiers": [
              "public",
              "intrinsic"
            ]
          },
          "uri": {
            "idUri": "uno/object",
            "href": "uno/object"
          },
          "titles": {
            "indexTitle": "object",
            "fullyQualifiedIndexTitle": "object"
          }
        },
        "items": [
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "o",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/gestures/swipegesture/equals_a09c80e3",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/equals_a09c80e3",
              "href": "uno/object/equals_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Equals(object)",
              "fullyQualifiedIndexTitle": "Uno.Object.Equals(object)"
            }
          },
          {
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/gethashcode",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/gethashcode",
              "href": "uno/object/gethashcode",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetHashCode",
              "fullyQualifiedIndexTitle": "Uno.Object.GetHashCode"
            }
          },
          {
            "returns": {
              "href": "uno/type",
              "title": "Type",
              "fullyQualifiedTitle": "Uno.Type"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/gettype",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/gettype",
              "href": "uno/object/gettype",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetType",
              "fullyQualifiedIndexTitle": "Uno.Object.GetType"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/gestures/swipegesture/tostring",
              "parentId": "fuse/gestures/swipegesture",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/gestures/swipegesture/tostring",
              "href": "uno/object/tostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ToString",
              "fullyQualifiedIndexTitle": "Uno.Object.ToString"
            }
          }
        ]
      }
    ]
  }
}