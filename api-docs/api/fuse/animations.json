{
  "entity": {
    "id": {
      "id": "fuse/animations",
      "parentId": "fuse",
      "type": "Namespace",
      "modifiers": []
    },
    "uri": {
      "idUri": "fuse/animations",
      "href": "fuse/animations"
    },
    "titles": {
      "pageTitle": "Fuse.Animations Namespace",
      "navigationTitle": "Fuse.Animations Namespace",
      "fullTitle": "Fuse.Animations",
      "indexTitle": "Fuse.Animations",
      "fullyQualifiedIndexTitle": "Fuse.Animations"
    },
    "syntax": {
      "uno": "namespace Animations {}"
    }
  },
  "tableOfContents": {
    "uxClasses": [
      {
        "items": [
          {
            "comment": {
              "brief": "Animates the change in a value.",
              "full": "Animates the change in a value.\n\nThe syntax is `attract( value, config )`\n\nThis requires an @AttractorConfig that defines the style of the animation.\n\n# Example\n\n    <AttractorConfig Unit=\"Points\" Easing=\"SinusoidalInOut\" Duration=\"0.3\" ux:Global=\"asPoints\"/>\n\n    <Panel>\n        <Translation X=\"attract({xOffset}, asPoints)\"/>\n    </Panel>\n\nWhere `xOffset` is a context variable."
            },
            "id": {
              "id": "fuse/animations/attract",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/attract",
              "href": "fuse/animations/attract"
            },
            "titles": {
              "indexTitle": "Attract",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Attract"
            }
          },
          {
            "comment": {
              "brief": "Animates a property to a target value using a physics-like attraction simulation.",
              "full": "Animates a property to a target value using a physics-like attraction simulation.\n\nInstead of animating a property directly, an attractors act as an intermediary between an animator\nand its target. It will continuously animate its target towards its `Value` using a simple form\nof physics simulation. We can combine this behavior with animation by animating the attractor's `Value` property.\n\n   <Panel ux:Name=\"somePanel\">\n       <Translation ux:Name=\"someTranslation\"/>\n       <Attractor ux:Name=\"someAttractor\" Target=\"someTranslation.X\"/>\n       <WhilePressed>\n           <Change someAttractor.Value=\"100\"/>\n       </WhilePressed>\n\n   </Panel>"
            },
            "id": {
              "id": "fuse/animations/attractor_1",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/attractor_1",
              "href": "fuse/animations/attractor_1"
            },
            "titles": {
              "indexTitle": "Attractor<T>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Attractor<T>"
            }
          },
          {
            "comment": {
              "brief": "A configuration for use with the `attract` expression or to an `Attractor` property.",
              "full": "A configuration for use with the `attract` expression or to an `Attractor` property.\n\nA single `AttractorConfig` can be used for multiple `attract` expressions.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/animations/attractorconfig",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/attractorconfig",
              "href": "fuse/animations/attractorconfig"
            },
            "titles": {
              "indexTitle": "AttractorConfig",
              "fullyQualifiedIndexTitle": "Fuse.Animations.AttractorConfig"
            }
          },
          {
            "comment": {
              "brief": "Temporarily changes the value of a property while its containing trigger is active. To permanently change a value, use the @Set animator.",
              "full": "Temporarily changes the value of a property while its containing trigger is active. To permanently change a value, use the @Set animator.\n\n**Tip**: You can specify @(Units) with `Value` as long as the unit matches the original unit of the `Target`.\n\nBecause the task of setting a target property and value is so common, UX has a special syntax for this. Instead of\n\n    <Change Target=\"target.Property\" Value=\"Value\"/>\n\none can do the following:\n\n    <Change target.Property=\"Value\"/>\n\n# Example\n\nAs with other animators, you can also specify a `Duration`:\n\n    <Panel ux:Name=\"panel\" Color=\"#000\">\n        <WhilePressed>\n            <Change panel.Color=\"#fff\" Duration=\"0.5\" />\n        </WhilePressed>\n    </Panel>\n\nIf the value is continuous this will result in a continously interpolated change in value.\nIf the value cannot be continuously animated, the value will change discretely."
            },
            "id": {
              "id": "fuse/animations/change_1",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/change_1",
              "href": "fuse/animations/change_1"
            },
            "titles": {
              "indexTitle": "Change<T>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Change<T>"
            }
          },
          {
            "comment": {
              "brief": "Represents a cubic bezier easing curve.",
              "full": "Represents a cubic bezier easing curve.\n\nA cubic bezier curve is defined by four control points. In an Easing curve, the first control point is fixed at (0,0),\nwhile the last control point is fixed at (1,1) the two remaining control points are configurable.\n\n## Example\n\n    <Rectangle Width=\"100\" Height=\"100\" Color=\"#18f\" CornerRadius=\"10\">\n        <WhilePressed>\n            <Move X=\"100\" Duration=\"0.3\">\n                <CubicBezierEasing ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n            </Move>\n        </WhilePressed>\n    </Rectangle>\n\nThe above `CubicBezierEasing` is equivalent to:\n\n    // In iOS\n    [CAMediaTimingFunction alloc] initWithControlPoints:0.4f:0.0f:1.0f:1.0f]\n\n    // In Android\n    FastOutLinearInInterpolator\n\n    // In CSS\n    cubic-bezier(0.4, 0.0, 1, 1);\n\n    // In After Effects\n    Outgoing Velocity: 40%\n    Incoming Velocity: 0%\n\n## Different `Easing` and `EasingBack`\n\nYou can use `ux:Binding` to specify two different easing curves for `Easing` and `EasingBack`:\n\n    <Move X=\"100\" Duration=\"0.3\">\n        <CubicBezierEasing ux:Binding=\"Easing\" ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n        <CubicBezierEasing ux:Binding=\"EasingBack\" ControlPoints=\"0.3, 0.0, 0.3, 1.0\" />\n    </Move>\n\n## Creating new global easing functions\n\nYou can use `ux:Global to define a new global easing curve:\n\n    <CubicBezierEasing ux:Global=\"MyStandardEasing\" ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n\nAnd then:\n\n    <Move X=\"100\" Duration=\"0.3\" Easing=\"MyStandardEasing\" />"
            },
            "id": {
              "id": "fuse/animations/cubicbeziereasing",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/cubicbeziereasing",
              "href": "fuse/animations/cubicbeziereasing"
            },
            "titles": {
              "indexTitle": "CubicBezierEasing",
              "fullyQualifiedIndexTitle": "Fuse.Animations.CubicBezierEasing"
            }
          },
          {
            "comment": {
              "brief": "Animates a repeating cycle between a high and low value using a given waveform.",
              "full": "Animates a repeating cycle between a high and low value using a given waveform.\n\nThe cycling of the animation continues even when the `Trigger.Progress` reaches 1. When a trigger is deactivated the cycling will play backwards, possibly beyond reaching Progress=1, until it finds a suitable rest state. This ensure that `Cycle` does not produce any jarring switches when the triggers are activated and deactivated.\n\n## Example\n\nThe below example creates a simple pulsing effect on the panel while it is pressed.\n\n    <Panel Color=\"Blue\" ux:Name=\"panel1\" Width=\"100\" Height=\"100\">\n        <WhilePressed>\n            <Cycle Target=\"panel1.Width\" Low=\"80\" High=\"120\" Frequency=\"0.5\"/>\n        </WhilePressed>\n    </Panel>\n\nBy adjusting the `Waveform` you can creates animations that wrap-around instead of bouncing back and forth.\n\n    <Cycle Target=\"panel.X\" Low=\"-100\" High=\"100\" Waveform=\"Triangle\"/>\n\nThe \"wrap-around\" here is simply the nature of the triangular waveform -- the default waveform is sinusoidal.\n\n## Formula\n\nThe properties are defined to be a simple interface, but it may be easier to understand see how they all relate in an expression. Given a current time offset the value of the `Target` is defined roughly as:\n\n    Target.Value = Lerp( Low, High, Easing( Waveform(Time) ) ) * Base + Offset\n\n`Low` and `High` can only be scalar values. `Cycle` checks whether these values cross zero, or one. If they do, it will start at that value, and return to that value when done (this is the default value for `ProgressOffset`). This allows a smooth return to rest state in animation.\n\nModifying `Base` and `Offset` allows you to use `Cycle` with non-scalar values. Though be aware not all combinations of value can provide for a smooth return to the rest state."
            },
            "id": {
              "id": "fuse/animations/cycle_1",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/cycle_1",
              "href": "fuse/animations/cycle_1"
            },
            "titles": {
              "indexTitle": "Cycle<T>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Cycle<T>"
            }
          },
          {
            "comment": {
              "brief": "Allows you to specify several steps for an animation.",
              "full": "Allows you to specify several steps for an animation.\n\n# Examples\n\nThe following @(Move) animator will first animate X to 10 over 0.5 second, then from 10 to 15 over 0.5 second. Finally, it will go from an X of 15 to 5 over 1 second.\n\n    <Move RelativeTo=\"ParentSize\">\n        <Keyframe X=\"10\" Time=\"0.5\"/>\n        <Keyframe X=\"15\" Time=\"1\"/>\n        <Keyframe X=\"5\" Time=\"2\"/>\n    </Move>\n\nHere is an example of using @Keyframes with a @(Change) animator:\n    <Page>\n        <SolidColor ux:Name=\"background\" Color=\"#f00\"/>\n        <ActivatingAnimation>\n            <Change Target=\"background.Color\">\n                <Keyframe Value=\"#0f0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#f00\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#ff0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#0ff\" TimeDelta=\"0.25\"/>\n            </Change>\n        </ActivatingAnimation>\n    </Page>\n\nThis time we use `TimeDelta` instead of time. With `TimeDelta` we can specify time as a relative term instead of absolute. This means that the order of the @Keyframes matter, but it lets us reason about the keyframes in terms of their duration instead of their absolute time on the timeline.\n\nNote: Despite being a `PropertyObject` the properties in this class are not reactive."
            },
            "id": {
              "id": "fuse/animations/keyframe",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/keyframe",
              "href": "fuse/animations/keyframe"
            },
            "titles": {
              "indexTitle": "Keyframe",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Keyframe"
            }
          },
          {
            "comment": {
              "brief": "Animates the translation a visual element.",
              "full": "Animates the translation a visual element.\n\n`Move` does not affect layout, so the element will just get an offset from its actual location.\n\nExample:\n\n    <WhilePressed>\n        <Move X=\"50\" Duration=\"1\" Easing=\"BackOut\" />\n    </WhilePressed>\n\nWhen pressed, this will move the element by 50 points in the X direction over 1 second, with\na back-out easing curve.\n\n## Relative motion\n\nYou may want for an element to move relative to its own size or some other elements size.\nTo achieve this we can use the @RelativeTo property, for instance:\n\n    <Move X=\"0.5\" RelativeTo=\"Size\" />\n\nThe above line moves the element by 50% of its own size to the right."
            },
            "id": {
              "id": "fuse/animations/move",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/move",
              "href": "fuse/animations/move"
            },
            "titles": {
              "indexTitle": "Move",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Move"
            }
          },
          {
            "comment": {
              "brief": "Allows you to artificially extend the timeline",
              "full": "Allows you to artificially extend the timeline\n\nAll animations for a `Trigger` share a common timeline, which ends when the last animation has completed. In some rare cases, you may want to artificially extend the timeline. This can be done using `Nothing`. Logically, it is a blank animation with a set length, forcing the length of the timeline to be at least the duration of the `Nothing`."
            },
            "id": {
              "id": "fuse/animations/nothing",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/nothing",
              "href": "fuse/animations/nothing"
            },
            "titles": {
              "indexTitle": "Nothing",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Nothing"
            }
          },
          {
            "comment": {
              "brief": "Changes the range of an animation.",
              "full": "Changes the range of an animation.\n\nThis allows finer control over animations such as `Timeline` and `..Animation`triggers.\n\n# Example\nIn the following example, a rotation of 90 degrees will be adapted into a rotation of 45 degrees by using a `RangeAdapter` to change the range our `WhilePressed` trigger:\n\n    <Panel Alignment=\"Center\" Width=\"200\" Height=\"200\">\n        <Rectangle Color=\"#2196F3\" CornerRadius=\"5\" />\n        <Timeline ux:Name=\"rotationTimeline\">\n            <Rotate DegreesZ=\"90\" Duration=\"1\"/>\n        </Timeline>\n        <RangeAdapter ux:Name=\"range\" Source=\"rotationTimeline.Progress\" SourceRangeMax=\".5\" SourceRangeMin=\"0\" />\n        <WhilePressed>\n            <Change range.Value=\"1\" Duration=\"1\"/>\n        </WhilePressed>\n    </Panel>"
            },
            "id": {
              "id": "fuse/animations/rangeadapter_1",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/rangeadapter_1",
              "href": "fuse/animations/rangeadapter_1"
            },
            "titles": {
              "indexTitle": "RangeAdapter<T>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.RangeAdapter<T>"
            }
          },
          {
            "comment": {
              "brief": "An @Animator that changes the size of an @Element.",
              "full": "An @Animator that changes the size of an @Element.\n\nThis is typically used as part of a @LayoutAnimation.\n\nThe size is considered a temporary size for the element, not it's true intended size. When the animator is disabled the natural size will be restored.\n\n# Example\n\n    <Panel>\n        <LayoutAnimation>\n            <Resize RelativeTo=\"SizeChange\" Duration=\"1\" Vector=\"1\"/>\n            <Move RelativeTo=\"PositionChange\" Duration=\"1\" Vector=\"1\"/>\n        </LayoutAnimation>\n    </Panel>"
            },
            "id": {
              "id": "fuse/animations/resize",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/resize",
              "href": "fuse/animations/resize"
            },
            "titles": {
              "indexTitle": "Resize",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Resize"
            }
          },
          {
            "comment": {
              "brief": "Rotates the Visual. This does the same transform as @Rotation.",
              "full": "Rotates the Visual. This does the same transform as @Rotation.\n\nThe standard units for angle are radians. Use the `Degrees...` properties to specify in degrees.\n\n# Example\nThis example rotates a panel while the mouse pointer hovers over it\n\n    <Panel>\n        <WhileHovering>\n            <Rotate Degrees=\"90\" Duration=\"0.5\"/>\n        </WhileHovering>\n    </Panel>"
            },
            "id": {
              "id": "fuse/animations/rotate",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/rotate",
              "href": "fuse/animations/rotate"
            },
            "titles": {
              "indexTitle": "Rotate",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Rotate"
            }
          },
          {
            "comment": {
              "brief": "Scales the element. Note that scale doesn't actually change the elements size. This means that the rest of the UI layout wont be affected and the animation is guaranteed to be fast.",
              "full": "Scales the element. Note that scale doesn't actually change the elements size. This means that the rest of the UI layout wont be affected and the animation is guaranteed to be fast.\n\nYou can scale an element uniformly along all axes by using the `Factor` property. Alternatively, you can also scale on a per-axis basis using `Vector` or `X`, `Y`, and `Z`.\n\n**Tip**: You can use `Scale` relative to something using the `RelativeTo` property. The two choices are:\n\n* `SizeChange` - scales relative to the change in size of the element specified by the `RelativeNode` property.\n* `SizeFactor` - scales with a factor relative to another element, specified by `RelativeNode`. A factor of `1` would make it the same size as the `RelativeNode`, while a factor of `0.5` would make it half the size, and so on.\n\n# Example\nThe following example scales a rectangle when it is being pressed\n\n    <Rectangle>\n        <WhilePressed>\n            <Scale Factor=\"2\" Duration=\"0.4\"/>\n        </WhilePressed>\n    </Rectangle>"
            },
            "id": {
              "id": "fuse/animations/scale",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/scale",
              "href": "fuse/animations/scale"
            },
            "titles": {
              "indexTitle": "Scale",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Scale"
            }
          },
          {
            "comment": {
              "brief": "Allows you to animate a skew transform on an element.",
              "full": "Allows you to animate a skew transform on an element.\n\n# Example\nThis example animates a skew on a panel as it is being pressed\n\n    <Panel Background=\"#F00\">\n        <WhilePressed>\n            <Skew DegreesX=\"30\" Duration=\"0.4\"/>\n        </WhilePressed>\n    </Panel>"
            },
            "id": {
              "id": "fuse/animations/skew",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew",
              "href": "fuse/animations/skew"
            },
            "titles": {
              "indexTitle": "Skew",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew"
            }
          },
          {
            "comment": {
              "brief": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.",
              "full": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.\n\n    <Panel>\n    <WhilePressed>\n        <Spin Frequency=\"2\" />\n    </WhilePressed>\n    </Panel>\n\nAs with @(Cycle), you may also specify a `Duration` to control the length of the animation."
            },
            "id": {
              "id": "fuse/animations/spin",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/spin",
              "href": "fuse/animations/spin"
            },
            "titles": {
              "indexTitle": "Spin",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Spin"
            }
          },
          {
            "comment": {
              "brief": "Defines the animation used by a @Trigger.",
              "full": "Defines the animation used by a @Trigger.\n\nA @Trigger has an implicit `TriggerAnimation`; you can add animators directly to the trigger. Using a `TriggerAnimation` is typically only used if a different backwards animation is required that cannot be achieved using the various `...Back` properties of the @Animator."
            },
            "id": {
              "id": "fuse/animations/triggeranimation",
              "parentId": "fuse/animations",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/triggeranimation",
              "href": "fuse/animations/triggeranimation"
            },
            "titles": {
              "indexTitle": "TriggerAnimation",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TriggerAnimation"
            }
          }
        ]
      }
    ],
    "classes": [
      {
        "items": [
          {
            "comment": {
              "brief": "Animators are used to specify which and how @Elements are to be animated when a @Trigger is triggered.\nThere are three pairs of properties which are important for controlling the exact result of an animation.",
              "full": "Animators are used to specify which and how @Elements are to be animated when a @Trigger is triggered.\nThere are three pairs of properties which are important for controlling the exact result of an animation.\n\n## Example\n\nExamples of animator types are @Change and @Move, as used in this example:\n\n    <Panel ux:Name=\"panel1\" Color=\"Blue\">\n        <WhilePressed>\n            <Change panel1.Color=\"#0f0\" Duration=\"1\" />\n            <Move X=\"100\" Delay=\"1\" Duration=\"1\" />\n        </WhilePressed>\n    </Panel>\n\nWhen the @WhilePressed trigger above is activated when a pointer is pressed on the panel,\nthe animators are played according to their `Delays` and other properties.\n\n## Duration/DurationBack\n\nAnimators are used to animate elements and properties in response to triggers being activated. There are many animators to choose from, all with different purposes. Common animators include @Move, @Rotate, @Scale and @Change. While these animators animate forward on activation and backward on deactivation, some animators, such as @Spin and @Cycle create a continuous looping animation while active.\n\n## Delay/DelayBack\n\nSetting the `Delay` property results in the actual animation being delayed by that amount of seconds. `DelayBack` is used to set a different delay on the backward animation. The total duration of the animation becomes the delay + the duration. The following @Change animator has a total duration of 7 seconds. It waits 5 seconds after being activated and then animates its target element over 2 seconds.\n\n```\n<Change Delay=\"5\" Duration=\"2\" someElement.Height=\"100\"/>\n```\n\n## Easing/EasingBack\n\nFuse comes with a standard set of predefined easing curves. Easing curves are used to control how an animation progresses over time. The default easing is set to `Linear`. With linear easing, the animation progresses at the same speed over its entire duration. This usually appears quite unnatural and fake. To gain a more natural feel, we can change the easing to `QuadraticInOut`, like so:\n\n```\n<Change Easing=\"QuadraticInOut\" Duration=\"2\" someElement.Property=\"SomeValue\"/>\n```\n\nThis animator will progress slowly in the beginning, faster in the middle, and then slow again in the end.\n\n## Track animators\n\n@TrackAnimator classes have a @Duration as well as a defined target\nvalue. Animation can be tweaked further using @Easing curves, or custom @Keyframes\n\n[subclass Fuse.Animations.TrackAnimator]\n\n## Open / looping animators\n\n@OpenAnimators classes have infinite duration, and typically loop or repeate forever while\nactive.\n[subclass Fuse.Animations.OpenAnimator]",
              "attributes": {
                "topic": "Animators"
              }
            },
            "id": {
              "id": "fuse/animations/animator",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/animator",
              "href": "fuse/animations/animator"
            },
            "titles": {
              "indexTitle": "Animator",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Animator"
            }
          },
          {
            "comment": {
              "brief": "Represents an easing function, and contains common easing functions.",
              "full": "Represents an easing function, and contains common easing functions.\n\nEasing functions map an otherwise linear motion into a different curve type,\ntypically desired to make animations look more natural or expressive.\nEasing is available as a property on most animators, such as @Change, @Move,\n@Rotate and @Scale."
            },
            "id": {
              "id": "fuse/animations/easing",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/easing",
              "href": "fuse/animations/easing"
            },
            "titles": {
              "indexTitle": "Easing",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Easing"
            }
          },
          {
            "comment": {
              "brief": "Contains single-precision float easing functions as static methdos.",
              "full": "Contains single-precision float easing functions as static methdos.\n\nThis class is kept for use in shaders, primarily, and for backwards compatibility.\n\nFor easings used in CPU-side Fuse, see `Easing`."
            },
            "id": {
              "id": "fuse/animations/easingfunctions",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/easingfunctions",
              "href": "fuse/animations/easingfunctions"
            },
            "titles": {
              "indexTitle": "EasingFunctions",
              "fullyQualifiedIndexTitle": "Fuse.Animations.EasingFunctions"
            }
          },
          {
            "comment": {
              "brief": "Open animators animate repeatedly for as long as the trigger is active.",
              "full": "Open animators animate repeatedly for as long as the trigger is active.\n\nThe `Duration` and `Delay` specify when this animator is \"on\". This is the time when the animator will be actively applying its effect. Outside of this period the animator is \"off\".  When off the animator will continue playing until it reaches a suitable resting value. This prevents the animation from jerking between values.\n\n## Available open animators\n[subclass Fuse.Animation.OpenAnimator]",
              "attributes": {
                "topic": "Open animators"
              }
            },
            "id": {
              "id": "fuse/animations/openanimator",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/openanimator",
              "href": "fuse/animations/openanimator"
            },
            "titles": {
              "indexTitle": "OpenAnimator",
              "fullyQualifiedIndexTitle": "Fuse.Animations.OpenAnimator"
            }
          },
          {
            "comment": {
              "brief": "Track animators animate to a specific target value over a fixed duration.",
              "full": "Track animators animate to a specific target value over a fixed duration.\n\nThe `...Back` parameters implicitly create a backwards timeline. The second timeline has it's own duration, and all properties and then specified in that timeline. This backwards timeline is for all of the animators, not just the ones with a `...Back` property specified. This is important for understanding how the timing works in complex scenarios.\n\nTracks can be a continuous (like a floating point value), discrete (like an enum value), or a spline track. This is specified implicitly based on the properties used. Note that some properties only have effects with certain track types.\n\n[subclass Fuse.Animation.TrackAnimator]",
              "attributes": {
                "topic": "Track animators"
              }
            },
            "id": {
              "id": "fuse/animations/trackanimator",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/trackanimator",
              "href": "fuse/animations/trackanimator"
            },
            "titles": {
              "indexTitle": "TrackAnimator",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator"
            }
          },
          {
            "comment": {
              "brief": "Transform animators animate the translation, rotation or scaling of a visual.",
              "full": "Transform animators animate the translation, rotation or scaling of a visual.\n\nTransform animators do not affect the layout of an @Element, instead it animates relative to\nthe result of layout. This means transform animators are very fast and are appropriate for\nreal-time transitions.\n\n## Available transform animators\n\n[subclass Fuse.Animations.TransformAnimator]",
              "attributes": {
                "topic": "Transform animators"
              }
            },
            "id": {
              "id": "fuse/animations/transformanimator_1",
              "parentId": "fuse/animations",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/transformanimator_1",
              "href": "fuse/animations/transformanimator_1"
            },
            "titles": {
              "indexTitle": "TransformAnimator<TransformType>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator<TransformType>"
            }
          }
        ]
      }
    ],
    "delegates": [
      {
        "items": [
          {
            "comment": {
              "brief": "Represents a single-precision float easing function.",
              "full": "Represents a single-precision float easing function."
            },
            "returns": {
              "href": "fuse/animations/easingfunction",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "parameters": [
              {
                "name": "f",
                "href": "uno/float",
                "title": "float",
                "fullyQualifiedTitle": "float"
              }
            ],
            "id": {
              "id": "fuse/animations/easingfunction",
              "parentId": "fuse/animations",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/easingfunction",
              "href": "fuse/animations/easingfunction"
            },
            "titles": {
              "indexTitle": "EasingFunction (float)",
              "fullyQualifiedIndexTitle": "Fuse.Animations.EasingFunction (float)"
            }
          }
        ]
      }
    ],
    "enums": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/animations/animationvariant",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/animationvariant",
              "href": "fuse/animations/animationvariant"
            },
            "titles": {
              "indexTitle": "AnimationVariant",
              "fullyQualifiedIndexTitle": "Fuse.Animations.AnimationVariant"
            }
          },
          {
            "comment": {
              "brief": "How the state is restored when the animator is played backwards",
              "full": "How the state is restored when the animator is played backwards"
            },
            "id": {
              "id": "fuse/animations/cyclerestore",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/cyclerestore",
              "href": "fuse/animations/cyclerestore"
            },
            "titles": {
              "indexTitle": "CycleRestore",
              "fullyQualifiedIndexTitle": "Fuse.Animations.CycleRestore"
            }
          },
          {
            "comment": {
              "brief": "The shape of the waveform @Cycle uses to cycle between the Low and High value",
              "full": "The shape of the waveform @Cycle uses to cycle between the Low and High value"
            },
            "id": {
              "id": "fuse/animations/cyclewaveform",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/cyclewaveform",
              "href": "fuse/animations/cyclewaveform"
            },
            "titles": {
              "indexTitle": "CycleWaveform",
              "fullyQualifiedIndexTitle": "Fuse.Animations.CycleWaveform"
            }
          },
          {
            "comment": {
              "brief": "Specifies how the spline is interpolated between the keyframes. These options specify how the\nvertex tangents are calculated and which interpolater to use along the curves.",
              "full": "Specifies how the spline is interpolated between the keyframes. These options specify how the\nvertex tangents are calculated and which interpolater to use along the curves."
            },
            "id": {
              "id": "fuse/animations/keyframeinterpolation",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/keyframeinterpolation",
              "href": "fuse/animations/keyframeinterpolation"
            },
            "titles": {
              "indexTitle": "KeyframeInterpolation",
              "fullyQualifiedIndexTitle": "Fuse.Animations.KeyframeInterpolation"
            }
          },
          {
            "comment": {
              "brief": "Specifies how animation values are combined with the target rest value to create new values.",
              "full": "Specifies how animation values are combined with the target rest value to create new values."
            },
            "id": {
              "id": "fuse/animations/mixop",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/mixop",
              "href": "fuse/animations/mixop"
            },
            "titles": {
              "indexTitle": "MixOp",
              "fullyQualifiedIndexTitle": "Fuse.Animations.MixOp"
            }
          },
          {
            "id": {
              "id": "fuse/animations/playmode",
              "parentId": "fuse/animations",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/playmode",
              "href": "fuse/animations/playmode"
            },
            "titles": {
              "indexTitle": "PlayMode",
              "fullyQualifiedIndexTitle": "Fuse.Animations.PlayMode"
            }
          }
        ]
      }
    ],
    "interfaces": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/animations/imixer",
              "parentId": "fuse/animations",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/imixer",
              "href": "fuse/animations/imixer"
            },
            "titles": {
              "indexTitle": "IMixer",
              "fullyQualifiedIndexTitle": "Fuse.Animations.IMixer"
            }
          },
          {
            "id": {
              "id": "fuse/animations/imixerhandle_1",
              "parentId": "fuse/animations",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/imixerhandle_1",
              "href": "fuse/animations/imixerhandle_1"
            },
            "titles": {
              "indexTitle": "IMixerHandle<T>",
              "fullyQualifiedIndexTitle": "Fuse.Animations.IMixerHandle<T>"
            }
          },
          {
            "id": {
              "id": "fuse/animations/iresize",
              "parentId": "fuse/animations",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/iresize",
              "href": "fuse/animations/iresize"
            },
            "titles": {
              "indexTitle": "IResize",
              "fullyQualifiedIndexTitle": "Fuse.Animations.IResize"
            }
          },
          {
            "id": {
              "id": "fuse/animations/iresizemode",
              "parentId": "fuse/animations",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/iresizemode",
              "href": "fuse/animations/iresizemode"
            },
            "titles": {
              "indexTitle": "IResizeMode",
              "fullyQualifiedIndexTitle": "Fuse.Animations.IResizeMode"
            }
          },
          {
            "id": {
              "id": "fuse/animations/itrackprovider",
              "parentId": "fuse/animations",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/itrackprovider",
              "href": "fuse/animations/itrackprovider"
            },
            "titles": {
              "indexTitle": "ITrackProvider",
              "fullyQualifiedIndexTitle": "Fuse.Animations.ITrackProvider"
            }
          }
        ]
      }
    ]
  }
}