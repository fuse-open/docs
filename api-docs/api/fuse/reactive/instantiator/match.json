{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Reactive",
      "namespaceUri": "fuse/reactive",
      "packageName": "Fuse.Reactive.Bindings",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [],
    "returns": {
      "href": "uno/string",
      "title": "string",
      "fullyQualifiedTitle": "string"
    },
    "uxProperties": {},
    "id": {
      "id": "fuse/reactive/instantiator/match",
      "parentId": "fuse/reactive/instantiator",
      "type": "UxProperty",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/instantiator/match",
      "href": "fuse/reactive/instantiator/match"
    },
    "titles": {
      "pageTitle": "Instantiator.Match Property",
      "navigationTitle": "Match Property",
      "fullTitle": "Fuse.Reactive.Instantiator.Match",
      "indexTitle": "Match",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Match"
    },
    "syntax": {
      "uno": "public string Match { get; get; }"
    },
    "comment": {
      "brief": "The template which should be instantiated.",
      "full": "The template which should be instantiated.\n\nUnset by default, meaning all templates will be instantiated (assuming MatchKey, and TemplateKey are also unset).\n\nIf you intend on using a binding, or expression, for this value it is recommend to set `Defaults` as well. This avoids an momentary creation of the defaults while the binding has not yet resolved.\n\n    <Instance Match=\"{type}\" Defaults=\"None\">\n        <Panel ux:Template=\"side\"/>\n        <Panel ux:Template=\"fore\"/>\n    </Instance>\n\n`{type}` may resolve to an async JavaScript variable, meaning it won't produce an immediate value. This will result in `Match` not yet having a value, thus all templates would be instantiated by default. `Defaults=\"None\"` prevents this behaviour."
    }
  },
  "tableOfContents": {}
}