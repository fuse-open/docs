{
  "entity": {
    "base": {
      "id": {
        "id": "fuse/behavior",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/behavior",
        "href": "fuse/behavior"
      },
      "titles": {
        "indexTitle": "Behavior",
        "fullyQualifiedIndexTitle": "Fuse.Behavior"
      }
    },
    "location": {
      "namespaceTitle": "Fuse.Reactive",
      "namespaceUri": "fuse/reactive",
      "packageName": "Fuse.Reactive.Bindings",
      "packageVersion": "1.8.0-rc2"
    },
    "inheritance": {
      "root": {
        "uri": "uno/object",
        "title": "object",
        "children": [
          {
            "uri": "uno/ux/propertyobject",
            "title": "Uno.UX.PropertyObject",
            "children": [
              {
                "uri": "fuse/node",
                "title": "Fuse.Node",
                "children": [
                  {
                    "uri": "fuse/behavior",
                    "title": "Fuse.Behavior",
                    "children": [
                      {
                        "uri": "fuse/reactive/instantiator",
                        "title": "Fuse.Reactive.Instantiator",
                        "children": [],
                        "isCurrent": true
                      }
                    ],
                    "isAncestor": true
                  }
                ],
                "isAncestor": true
              }
            ],
            "isAncestor": true
          }
        ],
        "isAncestor": true
      },
      "hasInheritance": true
    },
    "implementedInterfaces": [
      {
        "comment": {
          "brief": "When implemented by a `Node`, it indicates that the node provides data for its children.\n@hide",
          "full": "When implemented by a `Node`, it indicates that the node provides data for its children.\n@hide"
        },
        "id": {
          "id": "fuse/node/isubtreedataprovider",
          "parentId": "fuse/node",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/node/isubtreedataprovider",
          "href": "fuse/node/isubtreedataprovider"
        },
        "titles": {
          "indexTitle": "ISubtreeDataProvider",
          "fullyQualifiedIndexTitle": "Fuse.ISubtreeDataProvider"
        }
      },
      {
        "id": {
          "id": "uno/collections/ilist_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ilist_1",
          "href": "uno/collections/ilist_1"
        },
        "titles": {
          "indexTitle": "IList<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IList<Fuse.Binding>"
        }
      },
      {
        "comment": {
          "brief": "Interface for objects that can have a script engine representation",
          "full": "Interface for objects that can have a script engine representation"
        },
        "id": {
          "id": "fuse/scripting/iscriptobject",
          "parentId": "fuse/scripting",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/scripting/iscriptobject",
          "href": "fuse/scripting/iscriptobject"
        },
        "titles": {
          "indexTitle": "IScriptObject",
          "fullyQualifiedIndexTitle": "Fuse.Scripting.IScriptObject"
        }
      },
      {
        "id": {
          "id": "fuse/iproperties",
          "parentId": "fuse",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/iproperties",
          "href": "fuse/iproperties"
        },
        "titles": {
          "indexTitle": "IProperties",
          "fullyQualifiedIndexTitle": "Fuse.IProperties"
        }
      },
      {
        "id": {
          "id": "uno/collections/icollection_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/icollection_1",
          "href": "uno/collections/icollection_1"
        },
        "titles": {
          "indexTitle": "ICollection<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.ICollection<Fuse.Binding>"
        }
      },
      {
        "id": {
          "id": "uno/collections/ienumerable_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ienumerable_1",
          "href": "uno/collections/ienumerable_1"
        },
        "titles": {
          "indexTitle": "IEnumerable<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IEnumerable<Fuse.Binding>"
        }
      }
    ],
    "attributes": [
      {
        "parameters": [
          "Template"
        ],
        "id": {
          "id": "uno/ux/uxcontentmodeattribute",
          "parentId": "uno/ux",
          "type": "Class",
          "modifiers": [
            "public"
          ]
        },
        "uri": {
          "idUri": "uno/ux/uxcontentmodeattribute",
          "href": "uno/ux/uxcontentmodeattribute"
        },
        "titles": {
          "indexTitle": "UXContentModeAttribute",
          "fullyQualifiedIndexTitle": "Uno.UX.UXContentModeAttribute"
        }
      }
    ],
    "id": {
      "id": "fuse/reactive/instantiator",
      "parentId": "fuse/reactive",
      "type": "Class",
      "modifiers": [
        "public",
        "partial"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/instantiator",
      "href": "fuse/reactive/instantiator"
    },
    "titles": {
      "pageTitle": "Instantiator Class",
      "navigationTitle": "Instantiator Class",
      "fullTitle": "Fuse.Reactive.Instantiator",
      "indexTitle": "Instantiator",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
    },
    "syntax": {
      "uno": "[Uno.UX.UXContentMode(mode = \"Template\")]\r\npublic partial class Instantiator : Fuse.Behavior, Fuse.ISubtreeDataProvider {}"
    },
    "comment": {
      "brief": "Base class for behaviors that can instantiate templates from a source.",
      "full": "Base class for behaviors that can instantiate templates from a source.\n\nThis class can not be directly instantiated or inherited because its constructors are internal. Use one of the\nprovided derived classes instead: @Each or @Instance."
    }
  },
  "tableOfContents": {
    "uxProperties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/instantiator",
            "parentId": "fuse/reactive",
            "type": "Class",
            "modifiers": [
              "public",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/instantiator",
            "href": "fuse/reactive/instantiator"
          },
          "titles": {
            "indexTitle": "Instantiator",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "Which templates are instantiating when nothing else matches.",
              "full": "Which templates are instantiating when nothing else matches.\n\nIt is recommend to specified `Defaults=\"Default\"` or `Defaults=\"None\"` when using an expression, or binding, for the matching fields. This avoids an issue where the field may be momentarily unset, resulting in all templates being instantiated.\n\nThe default is `Standard`: if none of `Match`, `MatchKey` or `TemplateKey` are specified the default will be created. If there is no explicitly marked default then all templates are instantiated.\n\nA default template is marked wtih `ux:DefaultTemplate=\"true\"`\n\n    <Each Items=\"{items}\" MatchKey=\"{type}\">\n        <FrontCard ux:Template=\"front\"/>\n        <BackCard ux:Template=\"back\"/>\n        <DefaultCard ux:DefaultTemplate=\"true\"/>\n    </Each>"
            },
            "returns": {
              "href": "fuse/reactive/instancedefaults",
              "title": "InstanceDefaults",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceDefaults"
            },
            "id": {
              "id": "fuse/reactive/instantiator/defaults",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/defaults",
              "href": "fuse/reactive/instantiator/defaults"
            },
            "titles": {
              "indexTitle": "Defaults",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Defaults"
            }
          },
          {
            "comment": {
              "brief": "Defers the creation items to avoid processing bottlenecks.",
              "full": "Defers the creation items to avoid processing bottlenecks.\n\nThe default is `Frame`."
            },
            "returns": {
              "href": "fuse/reactive/instancedefer",
              "title": "InstanceDefer",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceDefer"
            },
            "id": {
              "id": "fuse/reactive/instantiator/defer",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/defer",
              "href": "fuse/reactive/instantiator/defer"
            },
            "titles": {
              "indexTitle": "Defer",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Defer"
            }
          },
          {
            "comment": {
              "brief": "For `Defer=\"Deferred\"` specifies the deferrefed priority.",
              "full": "For `Defer=\"Deferred\"` specifies the deferrefed priority."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/reactive/instantiator/deferredpriority",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/deferredpriority",
              "href": "fuse/reactive/instantiator/deferredpriority"
            },
            "titles": {
              "indexTitle": "DeferredPriority",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.DeferredPriority"
            }
          },
          {
            "comment": {
              "brief": "Reuses existing nodes if the new objects match the old ones.",
              "full": "Reuses existing nodes if the new objects match the old ones.\n\nThis field is typically set implicity. It defaults to `None`. Use `IdentityKey` instead if you want to match based on a id field.\n\nIf you need to match on the observable value itself, set this to `Object`, otherwise it works like `IdentityKey`"
            },
            "returns": {
              "href": "fuse/reactive/instanceidentity",
              "title": "InstanceIdentity",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceIdentity"
            },
            "id": {
              "id": "fuse/reactive/instantiator/identity",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/identity",
              "href": "fuse/reactive/instantiator/identity"
            },
            "titles": {
              "indexTitle": "Identity",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Identity"
            }
          },
          {
            "comment": {
              "brief": "If specified will reuse existing items if a new item is created that has the same id.",
              "full": "If specified will reuse existing items if a new item is created that has the same id.\n\nThe `IdentityKey` is a key into the provided objects. If the key is not found the item will not have an id, and will not be matched.\n\nMatched items keep the same Node instances that they had before. This makes it suitable for using in combination with `LayoutAnimation`. It also makes it possible to use `AddingAnimation` and `RemovingAnimation` with `Each`, as the Node lifetime will now follow the logical lifetime.\n\nThis feature works in conjunction with `replaceAt` and `replaceAll` on Observable's.\n\nNOTE: This feature, if using animations, does not yet operate well in combination with `Reuse`. It may result in reuse of unintended items and/or unexpected animations.\nhttps://github.com/fusetools/fuselibs-public/issues/175"
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/identitykey",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/identitykey",
              "href": "fuse/reactive/instantiator/identitykey"
            },
            "titles": {
              "indexTitle": "IdentityKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.IdentityKey"
            }
          },
          {
            "comment": {
              "brief": "The template which should be instantiated.",
              "full": "The template which should be instantiated.\n\nUnset by default, meaning all templates will be instantiated (assuming MatchKey, and TemplateKey are also unset).\n\nIf you intend on using a binding, or expression, for this value it is recommend to set `Defaults` as well. This avoids an momentary creation of the defaults while the binding has not yet resolved.\n\n    <Instance Match=\"{type}\" Defaults=\"None\">\n        <Panel ux:Template=\"side\"/>\n        <Panel ux:Template=\"fore\"/>\n    </Instance>\n\n`{type}` may resolve to an async JavaScript variable, meaning it won't produce an immediate value. This will result in `Match` not yet having a value, thus all templates would be instantiated by default. `Defaults=\"None\"` prevents this behaviour."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/match",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/match",
              "href": "fuse/reactive/instantiator/match"
            },
            "titles": {
              "indexTitle": "Match",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Match"
            }
          },
          {
            "comment": {
              "brief": "Name of the field on each data object which selects templates for the data objects.",
              "full": "Name of the field on each data object which selects templates for the data objects.\n\nIf set, the `Each` will instantiate the template with a name matching the `MatchKey`. If no\nmatch is found then the default template will be used, or no template if there is no default.\nThe default template is the one explicitly marked with `ux:DefaultTemplate=\"true\"`.\n\n## Example\n\nMatchKey can be used together with `ux:Template` to select the correct template based on\na string field in the data source.\n\nInstead of:\n\n    <Each Items=\"{listData}\">\n    <Deferred>\n        <Match Value=\"{type}\">\n            <Case String=\"month\">\n                <Panel ...\nDo:\n\n    <Each Items=\"{listData}\" MatchKey=\"type\">\n        <Deferred ux:Template=\"month\">\n            <Panel ..."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/matchkey",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/matchkey",
              "href": "fuse/reactive/instantiator/matchkey"
            },
            "titles": {
              "indexTitle": "MatchKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.MatchKey"
            }
          },
          {
            "comment": {
              "brief": "Attempts to reuse template instances when items are being removed and created.",
              "full": "Attempts to reuse template instances when items are being removed and created.\n\nThe default is `None`\n\nBe aware that when using this feature several other features may no longer work as expected, such as:\n    - RemovingAnimation: the reused items are not actually removed\n    - AddingAnimation: the resused items are not actually added, just moved\n    - Completed: As a reused item is not added/removed it will not trigger a second time\n\nThis feature will remain experimental until we can figure out which of these issues can be solved, avoided, or just need to be accepted.",
              "attributes": {
                "experimental": true
              }
            },
            "returns": {
              "href": "fuse/reactive/instancereuse",
              "title": "InstanceReuse",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceReuse"
            },
            "id": {
              "id": "fuse/reactive/instantiator/reuse",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/reuse",
              "href": "fuse/reactive/instantiator/reuse"
            },
            "titles": {
              "indexTitle": "Reuse",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Reuse"
            }
          },
          {
            "comment": {
              "brief": "Specifies a template key that is used to look up in the @TemplateSource to find an override of the default\n`Templates` provided in this object.",
              "full": "Specifies a template key that is used to look up in the @TemplateSource to find an override of the default\n`Templates` provided in this object.\n\nThis property, along with the templates in the @TemplateSource, must be set prior to\nrooting to take effect."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/templatekey",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/templatekey",
              "href": "fuse/reactive/instantiator/templatekey"
            },
            "titles": {
              "indexTitle": "TemplateKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.TemplateKey"
            }
          },
          {
            "comment": {
              "brief": "Specifies a list of templates that will be used to reflect the data in `Items`.",
              "full": "Specifies a list of templates that will be used to reflect the data in `Items`.\n\nTypically, this collection is not referred to directly. Rather, it will contain all of the children of the `Each` tag in UX."
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Template>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Uno.UX.Template>"
            },
            "flags": {
              "uxPrimary": true
            },
            "id": {
              "id": "fuse/reactive/instantiator/templates",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/templates",
              "href": "fuse/reactive/instantiator/templates"
            },
            "titles": {
              "indexTitle": "Templates",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Templates"
            }
          },
          {
            "comment": {
              "brief": "Specifies a visual that contains templates that can override the default `Templates` provided in this object.",
              "full": "Specifies a visual that contains templates that can override the default `Templates` provided in this object.\n\nIf specified together with `TemplateKey`, this instantiator will prefer to pick template from the\nspecified `TemplateSource` that matches the `TemplateKey` property. If no match is found, it falls back\nto using the regular list of `Templates`.  Refer to `Defaults`.\n\nThis property is useful if you are creating a component and want to allow certain templates inside the\ncomponent to be overridden by the user.\n\n## Example\n\nThis example uses `Each`, but it applies equally to `Instance` and other subclasses of `Instantiator`.\n\n    <Panel ux:Class=\"MyListControl\">\n        <StackPanel>\n            <Each Count=\"10\" TemplateSource=\"this\" TemplateKey=\"ListItem\">\n                <Text Value=\"This is an item\" />\n            </Each>\n        </StackPanel>\n    </Panel>\n\nIf we instantiate `<MyListControl>` now, it will display the text \"This is an item\" 10 times.\n\nHowever, we can override the template like this:\n\n    <MyListControl>\n        <Rectangle ux:Template=\"ListItem\" Color=\"Red\">\n            <Text>This is a red item</Text>\n        </Rectangle>\n    </MyListControl>\n\nThis will display a red rectangle with the text \"This is a red item\" 10 times, instead of the default\ntemplate defined in the component itself.\n\nThe `TemplateSource` property, along with the templates in the source, as well as the `TemplateKey`, must be set prior to\nrooting to take effect."
            },
            "returns": {
              "href": "fuse/itemplatesource",
              "title": "ITemplateSource",
              "fullyQualifiedTitle": "Fuse.ITemplateSource"
            },
            "id": {
              "id": "fuse/reactive/instantiator/templatesource",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/templatesource",
              "href": "fuse/reactive/instantiator/templatesource"
            },
            "titles": {
              "indexTitle": "TemplateSource",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.TemplateSource"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The list of bindings belonging to this node.",
              "full": "The list of bindings belonging to this node."
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Binding>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Fuse.Binding>"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/reactive/instantiator/bindings",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/bindings",
              "href": "fuse/node/bindings",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Bindings",
              "fullyQualifiedIndexTitle": "Fuse.Node.Bindings"
            }
          },
          {
            "comment": {
              "brief": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute.",
              "full": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute."
            },
            "returns": {
              "href": "uno/ux/selector",
              "title": "Selector",
              "fullyQualifiedTitle": "Uno.UX.Selector"
            },
            "id": {
              "id": "fuse/reactive/instantiator/name",
              "parentId": "fuse/reactive/instantiator",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/name",
              "href": "fuse/node/name",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Name",
              "fullyQualifiedIndexTitle": "Fuse.Node.Name"
            }
          }
        ]
      }
    ],
    "properties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item.",
              "full": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "id": {
              "id": "fuse/reactive/instantiator/contextparent",
              "parentId": "fuse/reactive/instantiator",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/contextparent",
              "href": "fuse/node/contextparent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ContextParent",
              "fullyQualifiedIndexTitle": "Fuse.Node.ContextParent"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting for this node is completed.\nReturns false if unrooting has started.",
              "full": "Whether rooting for this node is completed.\nReturns false if unrooting has started."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/reactive/instantiator/isrootingcompleted",
              "parentId": "fuse/reactive/instantiator",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/isrootingcompleted",
              "href": "fuse/node/isrootingcompleted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingCompleted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingCompleted"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted.",
              "full": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/reactive/instantiator/isrootingstarted",
              "parentId": "fuse/reactive/instantiator",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/isrootingstarted",
              "href": "fuse/node/isrootingstarted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingStarted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingStarted"
            }
          },
          {
            "comment": {
              "brief": "The parent @Visual of this node. Will return null if the node is not rooted.",
              "full": "The parent @Visual of this node. Will return null if the node is not rooted."
            },
            "returns": {
              "href": "fuse/visual",
              "title": "Visual",
              "fullyQualifiedTitle": "Fuse.Visual"
            },
            "id": {
              "id": "fuse/reactive/instantiator/parent",
              "parentId": "fuse/reactive/instantiator",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/parent",
              "href": "fuse/node/parent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Parent",
              "fullyQualifiedIndexTitle": "Fuse.Node.Parent"
            }
          },
          {
            "comment": {
              "brief": "A linked list holding data for extrinsic properties.",
              "full": "A linked list holding data for extrinsic properties."
            },
            "returns": {
              "href": "fuse/properties",
              "title": "Properties",
              "fullyQualifiedTitle": "Fuse.Properties"
            },
            "id": {
              "id": "fuse/reactive/instantiator/properties",
              "parentId": "fuse/reactive/instantiator",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/properties",
              "href": "fuse/node/properties",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Properties",
              "fullyQualifiedIndexTitle": "Fuse.Node.Properties"
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/instantiator",
            "parentId": "fuse/reactive",
            "type": "Class",
            "modifiers": [
              "public",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/instantiator",
            "href": "fuse/reactive/instantiator"
          },
          "titles": {
            "indexTitle": "Instantiator",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "@hide",
              "full": "@hide"
            },
            "returns": {
              "href": "uno/object",
              "title": "object",
              "fullyQualifiedTitle": "object"
            },
            "id": {
              "id": "fuse/reactive/instantiator/getitems",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/getitems",
              "href": "fuse/reactive/instantiator/getitems"
            },
            "titles": {
              "indexTitle": "GetItems",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.GetItems"
            }
          },
          {
            "comment": {
              "brief": "@hide",
              "full": "@hide"
            },
            "parameters": [
              {
                "name": "value",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/setitems_a09c80e3",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/setitems_a09c80e3",
              "href": "fuse/reactive/instantiator/setitems_a09c80e3"
            },
            "titles": {
              "indexTitle": "SetItems(object)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.SetItems(object)"
            }
          },
          {
            "comment": {
              "brief": "Call to set the items during the OnRooted override (post base.OnRooted call)\n@hide",
              "full": "Call to set the items during the OnRooted override (post base.OnRooted call)\n@hide"
            },
            "parameters": [
              {
                "name": "value",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/setitemsderivedrooting_a09c80e3",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/setitemsderivedrooting_a09c80e3",
              "href": "fuse/reactive/instantiator/setitemsderivedrooting_a09c80e3"
            },
            "titles": {
              "indexTitle": "SetItemsDerivedRooting(object)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.SetItemsDerivedRooting(object)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/add_cd0f711d",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/add_cd0f711d",
              "href": "fuse/node/add_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Add(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Add(Fuse.Binding)"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/instantiator/findbytype_1",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/findbytype_1",
              "href": "fuse/node/findbytype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindByType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindByType<T>"
            }
          },
          {
            "comment": {
              "brief": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null.",
              "full": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "parameters": [
              {
                "name": "name",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Predicate<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/findnodebyname_66268add",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/findnodebyname_66268add",
              "href": "fuse/node/findnodebyname_66268add",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindNodeByName(Selector, Predicate<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindNodeByName(Uno.UX.Selector, Uno.Predicate<Fuse.Node> (Fuse.Node))"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/instantiator/getnearestancestoroftype_1",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/getnearestancestoroftype_1",
              "href": "fuse/node/getnearestancestoroftype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetNearestAncestorOfType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.GetNearestAncestorOfType<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "index",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              },
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/insert_4036b6cf",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/insert_4036b6cf",
              "href": "fuse/node/insert_4036b6cf",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Insert(int, Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Insert(int, Fuse.Binding)"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/instantiator/nextsibling_1",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/nextsibling_1",
              "href": "fuse/node/nextsibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "NextSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.NextSibling<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "newValue",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/ondatachanged_d062e5a9",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/ondatachanged_d062e5a9",
              "href": "fuse/node/ondatachanged_d062e5a9",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnDataChanged(string, object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnDataChanged(string, object)"
            }
          },
          {
            "comment": {
              "brief": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state.",
              "full": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state."
            },
            "id": {
              "id": "fuse/reactive/instantiator/onrooted",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/onrooted",
              "href": "fuse/node/onrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnRooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnRooted"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/instantiator/onunrooted",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/onunrooted",
              "href": "fuse/node/onunrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnUnrooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnUnrooted"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/instantiator/previoussibling_1",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/previoussibling_1",
              "href": "fuse/node/previoussibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "PreviousSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.PreviousSibling<T>"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/remove_cd0f711d",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/remove_cd0f711d",
              "href": "fuse/node/remove_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Remove(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Remove(Fuse.Binding)"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/instantiator/softdispose",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/softdispose",
              "href": "fuse/node/softdispose",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SoftDispose",
              "fullyQualifiedIndexTitle": "Fuse.Node.SoftDispose"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/subtreetostring",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/subtreetostring",
              "href": "fuse/node/subtreetostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString"
            }
          },
          {
            "parameters": [
              {
                "name": "sb",
                "href": "uno/text/stringbuilder",
                "title": "StringBuilder",
                "fullyQualifiedTitle": "Uno.Text.StringBuilder"
              },
              {
                "name": "indent",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/subtreetostring_efe5f5b8",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/subtreetostring_efe5f5b8",
              "href": "fuse/node/subtreetostring_efe5f5b8",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString(StringBuilder, int)",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString(Uno.Text.StringBuilder, int)"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<object> (object)",
                "fullyQualifiedTitle": "Uno.Predicate<object> (object)"
              },
              {
                "name": "resource",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/trygetresource_5317754b",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/trygetresource_5317754b",
              "href": "fuse/node/trygetresource_5317754b",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "TryGetResource(string, Predicate<object> (object), object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.TryGetResource(string, Uno.Predicate<object> (object), object)"
            }
          },
          {
            "parameters": [
              {
                "name": "action",
                "href": "uno/action_1",
                "title": "Action<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Action<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/visitsubtree_7a20b182",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/visitsubtree_7a20b182",
              "href": "fuse/node/visitsubtree_7a20b182",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "VisitSubtree(Action<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.VisitSubtree(Uno.Action<Fuse.Node> (Fuse.Node))"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/ux/propertyobject",
            "parentId": "uno/ux",
            "type": "Class",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "uno/ux/propertyobject",
            "href": "uno/ux/propertyobject"
          },
          "titles": {
            "indexTitle": "PropertyObject",
            "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/addpropertylistener_496a874a",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/addpropertylistener_496a874a",
              "href": "uno/ux/propertyobject/addpropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "AddPropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.AddPropertyListener(Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/onpropertychanged_16d735f3",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/onpropertychanged_16d735f3",
              "href": "uno/ux/propertyobject/onpropertychanged_16d735f3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "origin",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/onpropertychanged_6422fe92",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/onpropertychanged_6422fe92",
              "href": "uno/ux/propertyobject/onpropertychanged_6422fe92",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector, IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector, Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/removepropertylistener_496a874a",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/removepropertylistener_496a874a",
              "href": "uno/ux/propertyobject/removepropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "RemovePropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.RemovePropertyListener(Uno.UX.IPropertyListener)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/object",
            "parentId": "uno",
            "type": "Class",
            "modifiers": [
              "public",
              "intrinsic"
            ]
          },
          "uri": {
            "idUri": "uno/object",
            "href": "uno/object"
          },
          "titles": {
            "indexTitle": "object",
            "fullyQualifiedIndexTitle": "object"
          }
        },
        "items": [
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "o",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/instantiator/equals_a09c80e3",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/equals_a09c80e3",
              "href": "uno/object/equals_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Equals(object)",
              "fullyQualifiedIndexTitle": "Uno.Object.Equals(object)"
            }
          },
          {
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/reactive/instantiator/gethashcode",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/gethashcode",
              "href": "uno/object/gethashcode",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetHashCode",
              "fullyQualifiedIndexTitle": "Uno.Object.GetHashCode"
            }
          },
          {
            "returns": {
              "href": "uno/type",
              "title": "Type",
              "fullyQualifiedTitle": "Uno.Type"
            },
            "id": {
              "id": "fuse/reactive/instantiator/gettype",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/gettype",
              "href": "uno/object/gettype",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetType",
              "fullyQualifiedIndexTitle": "Uno.Object.GetType"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/instantiator/tostring",
              "parentId": "fuse/reactive/instantiator",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator/tostring",
              "href": "uno/object/tostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ToString",
              "fullyQualifiedIndexTitle": "Uno.Object.ToString"
            }
          }
        ]
      }
    ]
  }
}