{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Reactive",
      "namespaceUri": "fuse/reactive",
      "packageName": "Fuse.Reactive.Expressions",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [
      {
        "name": "args",
        "href": "fuse/reactive/expression/argument",
        "title": "Argument[]",
        "fullyQualifiedTitle": "Fuse.Reactive.Argument[]"
      },
      {
        "name": "result",
        "href": "uno/object",
        "title": "object",
        "fullyQualifiedTitle": "object"
      }
    ],
    "returns": {
      "href": "uno/bool",
      "title": "bool",
      "fullyQualifiedTitle": "bool"
    },
    "id": {
      "id": "fuse/reactive/computeexpression/trycompute_d5d1ff35",
      "parentId": "fuse/reactive/computeexpression",
      "type": "Method",
      "modifiers": [
        "protected",
        "abstract"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/computeexpression/trycompute_d5d1ff35",
      "href": "fuse/reactive/computeexpression/trycompute_d5d1ff35"
    },
    "titles": {
      "pageTitle": "ComputeExpression.TryCompute Method (Argument[], object)",
      "navigationTitle": "TryCompute Method (Argument[], object)",
      "fullTitle": "Fuse.Reactive.ComputeExpression.TryCompute",
      "indexTitle": "TryCompute(Argument[], object)",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.ComputeExpression.TryCompute(Fuse.Reactive.Argument[], object)"
    },
    "syntax": {
      "uno": "protected abstract bool TryCompute(Fuse.Reactive.Argument[] args, out object result) {}"
    },
    "comment": {
      "brief": "Should calculate the resulting value from the provided arguments.",
      "full": "Should calculate the resulting value from the provided arguments.\n\nThe length of `args` is guaranteed to be same length as the constructor `args` argument."
    }
  },
  "tableOfContents": {}
}