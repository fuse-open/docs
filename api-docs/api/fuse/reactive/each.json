{
  "entity": {
    "base": {
      "id": {
        "id": "fuse/reactive/instantiator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instantiator",
        "href": "fuse/reactive/instantiator"
      },
      "titles": {
        "indexTitle": "Instantiator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
      }
    },
    "location": {
      "namespaceTitle": "Fuse.Reactive",
      "namespaceUri": "fuse/reactive",
      "packageName": "Fuse.Reactive.Bindings",
      "packageVersion": "1.8.0-rc2"
    },
    "inheritance": {
      "root": {
        "uri": "uno/object",
        "title": "object",
        "children": [
          {
            "uri": "uno/ux/propertyobject",
            "title": "Uno.UX.PropertyObject",
            "children": [
              {
                "uri": "fuse/node",
                "title": "Fuse.Node",
                "children": [
                  {
                    "uri": "fuse/behavior",
                    "title": "Fuse.Behavior",
                    "children": [
                      {
                        "uri": "fuse/reactive/instantiator",
                        "title": "Fuse.Reactive.Instantiator",
                        "children": [
                          {
                            "uri": "fuse/reactive/each",
                            "title": "Fuse.Reactive.Each",
                            "children": [],
                            "isCurrent": true
                          }
                        ],
                        "isAncestor": true
                      }
                    ],
                    "isAncestor": true
                  }
                ],
                "isAncestor": true
              }
            ],
            "isAncestor": true
          }
        ],
        "isAncestor": true
      },
      "hasInheritance": true
    },
    "uxProperties": {
      "uxNamespaceTitle": "Fuse.Reactive",
      "uxNamespaceUri": "fuse/reactive",
      "uxName": "Each"
    },
    "implementedInterfaces": [
      {
        "comment": {
          "brief": "When implemented by a `Node`, it indicates that the node provides data for its children.\n@hide",
          "full": "When implemented by a `Node`, it indicates that the node provides data for its children.\n@hide"
        },
        "id": {
          "id": "fuse/node/isubtreedataprovider",
          "parentId": "fuse/node",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/node/isubtreedataprovider",
          "href": "fuse/node/isubtreedataprovider"
        },
        "titles": {
          "indexTitle": "ISubtreeDataProvider",
          "fullyQualifiedIndexTitle": "Fuse.ISubtreeDataProvider"
        }
      },
      {
        "id": {
          "id": "uno/collections/ilist_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ilist_1",
          "href": "uno/collections/ilist_1"
        },
        "titles": {
          "indexTitle": "IList<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IList<Fuse.Binding>"
        }
      },
      {
        "comment": {
          "brief": "Interface for objects that can have a script engine representation",
          "full": "Interface for objects that can have a script engine representation"
        },
        "id": {
          "id": "fuse/scripting/iscriptobject",
          "parentId": "fuse/scripting",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/scripting/iscriptobject",
          "href": "fuse/scripting/iscriptobject"
        },
        "titles": {
          "indexTitle": "IScriptObject",
          "fullyQualifiedIndexTitle": "Fuse.Scripting.IScriptObject"
        }
      },
      {
        "id": {
          "id": "fuse/iproperties",
          "parentId": "fuse",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "fuse/iproperties",
          "href": "fuse/iproperties"
        },
        "titles": {
          "indexTitle": "IProperties",
          "fullyQualifiedIndexTitle": "Fuse.IProperties"
        }
      },
      {
        "id": {
          "id": "uno/collections/icollection_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/icollection_1",
          "href": "uno/collections/icollection_1"
        },
        "titles": {
          "indexTitle": "ICollection<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.ICollection<Fuse.Binding>"
        }
      },
      {
        "id": {
          "id": "uno/collections/ienumerable_1",
          "parentId": "uno/collections",
          "type": "Interface",
          "modifiers": [
            "public",
            "abstract"
          ]
        },
        "uri": {
          "idUri": "uno/collections/ienumerable_1",
          "href": "uno/collections/ienumerable_1"
        },
        "titles": {
          "indexTitle": "IEnumerable<Binding>",
          "fullyQualifiedIndexTitle": "Uno.Collections.IEnumerable<Fuse.Binding>"
        }
      }
    ],
    "id": {
      "id": "fuse/reactive/each",
      "parentId": "fuse/reactive",
      "type": "UxClass",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/reactive/each",
      "href": "fuse/reactive/each"
    },
    "titles": {
      "pageTitle": "Each Class",
      "navigationTitle": "Each Class",
      "fullTitle": "Fuse.Reactive.Each",
      "indexTitle": "Each",
      "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
    },
    "syntax": {
      "uno": "public class Each : Fuse.Reactive.Instantiator {}",
      "ux": "<Each />"
    },
    "comment": {
      "brief": "Displays a collection of objects using the given template(s) for each item.",
      "full": "Displays a collection of objects using the given template(s) for each item.\n\nThe children of an `Each` tag represent a template that will be \"projected\" for each item in the collection\nspecified by the `Items` property. The projected item then becomes the data context for that instance, so\ndata-binding can be specified relative to the item itself rather than having to index the collection explicitly.\n\nNote that each subtree projected by `Each` lives in its own scope.\nThis means that the children of an `Each` cannot be accessed from outside it.\nYou can, however, access nodes declared outside the `Each` from the inside.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            items: [\n                { name: \"Jake\", age: 24 },\n                { name: \"Julie\", age: 25 },\n                { name: \"Jerard\", age: 26 }\n            ]\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <StackPanel>\n                <Text Value=\"{name}\" />\n                <Text Value=\"{age}\" />\n            </StackPanel>\n        </Each>\n    </StackPanel>\n\n# Using `Each` with `ux:Template`\n\nIf you are using `Each` in a custom made component, you can increase the cusomizability of that component by allowing it to take in custom template objects which it can use instead of the default template the `Each` is using. To do this, you need to do two things:\n\n * Give the `TemplateSource` property an element that can recieve templates (in the case of custom made components, that would be your custom component's class)\n * Specify the template name `Each` will be looking for, using the property `TemplateKey`\n\nIf a template isn't specified, the child element of `Each` will be used as a de-facto template.\n\n## Example\nThe following example demonstrates passing custom templates into a class for an `Each` to use:\n\n    <StackPanel ux:Class=\"CoolRepeater\" Background=\"#FAD\">\n        <Each TemplateSource=\"this\" TemplateKey=\"Item\" Count=\"20\">\n            <Text>No template is given</Text>\n        </Each>\n    </StackPanel>\n    <CoolRepeater>\n        <Text ux:Template=\"Item\">Hello, world!</Text>\n    </CoolRepeater>\n\nNotice that if you remove the \"Hello, world!\" text that is our custom template, the `Each` will fall back to using the child as the template.\n\nIf you want the ability to control the template on a per-item basis, the similar `MatchKey`-property can be used:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        module.exports.posts = Observable(\n            {postType: \"text\", body: \"Lorem ipsum\", title: \"Hello, world\"},\n            {postType: \"quote\", quote: \"Stuff\", title: \"A quote\"}\n        );\n    </JavaScript>\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{posts}\" MatchKey=\"postType\">\n                <StackPanel ux:Template=\"text\" Height=\"100\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" />\n                    <Text FontSize=\"15\" Value=\"{body}\" TextWrapping=\"Wrap\" />\n                </StackPanel>\n                <DockPanel ux:Template=\"quote\" Height=\"200\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" Dock=\"Top\" />\n                    <Text FontSize=\"50\" Value=\"”\" Dock=\"Left\" />\n                    <Text FontSize=\"15\" Margin=\"10\" Value=\"{quote}\" />\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\n`MatchKey` works by looking for a property in the data context of each item from `Items`.\nThe value of this property is then used to determine the template to use for the current item.\nIn the above example, we store the template we want to use in the property `postType`, which will appear in the data context of each item being iterated."
    }
  },
  "tableOfContents": {
    "uxProperties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/each",
            "parentId": "fuse/reactive",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/each",
            "href": "fuse/reactive/each"
          },
          "titles": {
            "indexTitle": "Each",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The number of items to create. If `Items` is set, this property is ignored.",
              "full": "The number of items to create. If `Items` is set, this property is ignored."
            },
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/reactive/each/count",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/count",
              "href": "fuse/reactive/each/count"
            },
            "titles": {
              "indexTitle": "Count",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.Count"
            }
          },
          {
            "comment": {
              "brief": "A collection containing the data items used to populate the parent.",
              "full": "A collection containing the data items used to populate the parent.\n\nThis property can not be used together with `Count`.\n\nThe provided object must implement `IArray`. To support dynamic changes to the collection, it can also implement `IObservableArray`.\nFor example, if a `FuseJS/Observable` is provided, this implements `IObservableArray`.\n\nEach item in the collection can in turn be an `IObservable`. If so, the Each will subscribe to these items and use the dynamic value. However,\nthis will not work in combination with the `MatchKey`, `IdentityKey` and `MatchObject` features which require an immediate value.\n\nFor legacy reasons, this property will also accept an `object[]` as the collection. This feature is deprecated."
            },
            "returns": {
              "href": "uno/object",
              "title": "object",
              "fullyQualifiedTitle": "object"
            },
            "id": {
              "id": "fuse/reactive/each/items",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/items",
              "href": "fuse/reactive/each/items"
            },
            "titles": {
              "indexTitle": "Items",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.Items"
            }
          },
          {
            "comment": {
              "brief": "Limits the number of items added by each.",
              "full": "Limits the number of items added by each.\n\nThe default is to not limit the number of items added.\n\nThe first item is the one at `Offset`, and then subsequent items, up to the `Limit` amount, are added."
            },
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/reactive/each/limit",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/limit",
              "href": "fuse/reactive/each/limit"
            },
            "titles": {
              "indexTitle": "Limit",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.Limit"
            }
          },
          {
            "comment": {
              "brief": "The index of the first item added.",
              "full": "The index of the first item added.\n\nThe default is 0.\n\nThis can be used together with `Limit` to create a window of items."
            },
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/reactive/each/offset",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/offset",
              "href": "fuse/reactive/each/offset"
            },
            "titles": {
              "indexTitle": "Offset",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.Offset"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/instantiator",
            "parentId": "fuse/reactive",
            "type": "Class",
            "modifiers": [
              "public",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/instantiator",
            "href": "fuse/reactive/instantiator"
          },
          "titles": {
            "indexTitle": "Instantiator",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "Which templates are instantiating when nothing else matches.",
              "full": "Which templates are instantiating when nothing else matches.\n\nIt is recommend to specified `Defaults=\"Default\"` or `Defaults=\"None\"` when using an expression, or binding, for the matching fields. This avoids an issue where the field may be momentarily unset, resulting in all templates being instantiated.\n\nThe default is `Standard`: if none of `Match`, `MatchKey` or `TemplateKey` are specified the default will be created. If there is no explicitly marked default then all templates are instantiated.\n\nA default template is marked wtih `ux:DefaultTemplate=\"true\"`\n\n    <Each Items=\"{items}\" MatchKey=\"{type}\">\n        <FrontCard ux:Template=\"front\"/>\n        <BackCard ux:Template=\"back\"/>\n        <DefaultCard ux:DefaultTemplate=\"true\"/>\n    </Each>"
            },
            "returns": {
              "href": "fuse/reactive/instancedefaults",
              "title": "InstanceDefaults",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceDefaults"
            },
            "id": {
              "id": "fuse/reactive/each/defaults",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/defaults",
              "href": "fuse/reactive/instantiator/defaults",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Defaults",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Defaults"
            }
          },
          {
            "comment": {
              "brief": "Defers the creation items to avoid processing bottlenecks.",
              "full": "Defers the creation items to avoid processing bottlenecks.\n\nThe default is `Frame`."
            },
            "returns": {
              "href": "fuse/reactive/instancedefer",
              "title": "InstanceDefer",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceDefer"
            },
            "id": {
              "id": "fuse/reactive/each/defer",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/defer",
              "href": "fuse/reactive/instantiator/defer",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Defer",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Defer"
            }
          },
          {
            "comment": {
              "brief": "For `Defer=\"Deferred\"` specifies the deferrefed priority.",
              "full": "For `Defer=\"Deferred\"` specifies the deferrefed priority."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/reactive/each/deferredpriority",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/deferredpriority",
              "href": "fuse/reactive/instantiator/deferredpriority",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "DeferredPriority",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.DeferredPriority"
            }
          },
          {
            "comment": {
              "brief": "Reuses existing nodes if the new objects match the old ones.",
              "full": "Reuses existing nodes if the new objects match the old ones.\n\nThis field is typically set implicity. It defaults to `None`. Use `IdentityKey` instead if you want to match based on a id field.\n\nIf you need to match on the observable value itself, set this to `Object`, otherwise it works like `IdentityKey`"
            },
            "returns": {
              "href": "fuse/reactive/instanceidentity",
              "title": "InstanceIdentity",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceIdentity"
            },
            "id": {
              "id": "fuse/reactive/each/identity",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/identity",
              "href": "fuse/reactive/instantiator/identity",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Identity",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Identity"
            }
          },
          {
            "comment": {
              "brief": "If specified will reuse existing items if a new item is created that has the same id.",
              "full": "If specified will reuse existing items if a new item is created that has the same id.\n\nThe `IdentityKey` is a key into the provided objects. If the key is not found the item will not have an id, and will not be matched.\n\nMatched items keep the same Node instances that they had before. This makes it suitable for using in combination with `LayoutAnimation`. It also makes it possible to use `AddingAnimation` and `RemovingAnimation` with `Each`, as the Node lifetime will now follow the logical lifetime.\n\nThis feature works in conjunction with `replaceAt` and `replaceAll` on Observable's.\n\nNOTE: This feature, if using animations, does not yet operate well in combination with `Reuse`. It may result in reuse of unintended items and/or unexpected animations.\nhttps://github.com/fusetools/fuselibs-public/issues/175"
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/identitykey",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/identitykey",
              "href": "fuse/reactive/instantiator/identitykey",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IdentityKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.IdentityKey"
            }
          },
          {
            "comment": {
              "brief": "The template which should be instantiated.",
              "full": "The template which should be instantiated.\n\nUnset by default, meaning all templates will be instantiated (assuming MatchKey, and TemplateKey are also unset).\n\nIf you intend on using a binding, or expression, for this value it is recommend to set `Defaults` as well. This avoids an momentary creation of the defaults while the binding has not yet resolved.\n\n    <Instance Match=\"{type}\" Defaults=\"None\">\n        <Panel ux:Template=\"side\"/>\n        <Panel ux:Template=\"fore\"/>\n    </Instance>\n\n`{type}` may resolve to an async JavaScript variable, meaning it won't produce an immediate value. This will result in `Match` not yet having a value, thus all templates would be instantiated by default. `Defaults=\"None\"` prevents this behaviour."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/match",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/match",
              "href": "fuse/reactive/instantiator/match",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Match",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Match"
            }
          },
          {
            "comment": {
              "brief": "Name of the field on each data object which selects templates for the data objects.",
              "full": "Name of the field on each data object which selects templates for the data objects.\n\nIf set, the `Each` will instantiate the template with a name matching the `MatchKey`. If no\nmatch is found then the default template will be used, or no template if there is no default.\nThe default template is the one explicitly marked with `ux:DefaultTemplate=\"true\"`.\n\n## Example\n\nMatchKey can be used together with `ux:Template` to select the correct template based on\na string field in the data source.\n\nInstead of:\n\n    <Each Items=\"{listData}\">\n    <Deferred>\n        <Match Value=\"{type}\">\n            <Case String=\"month\">\n                <Panel ...\nDo:\n\n    <Each Items=\"{listData}\" MatchKey=\"type\">\n        <Deferred ux:Template=\"month\">\n            <Panel ..."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/matchkey",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/matchkey",
              "href": "fuse/reactive/instantiator/matchkey",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "MatchKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.MatchKey"
            }
          },
          {
            "comment": {
              "brief": "Attempts to reuse template instances when items are being removed and created.",
              "full": "Attempts to reuse template instances when items are being removed and created.\n\nThe default is `None`\n\nBe aware that when using this feature several other features may no longer work as expected, such as:\n    - RemovingAnimation: the reused items are not actually removed\n    - AddingAnimation: the resused items are not actually added, just moved\n    - Completed: As a reused item is not added/removed it will not trigger a second time\n\nThis feature will remain experimental until we can figure out which of these issues can be solved, avoided, or just need to be accepted.",
              "attributes": {
                "experimental": true
              }
            },
            "returns": {
              "href": "fuse/reactive/instancereuse",
              "title": "InstanceReuse",
              "fullyQualifiedTitle": "Fuse.Reactive.InstanceReuse"
            },
            "id": {
              "id": "fuse/reactive/each/reuse",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/reuse",
              "href": "fuse/reactive/instantiator/reuse",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Reuse",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Reuse"
            }
          },
          {
            "comment": {
              "brief": "Specifies a template key that is used to look up in the @TemplateSource to find an override of the default\n`Templates` provided in this object.",
              "full": "Specifies a template key that is used to look up in the @TemplateSource to find an override of the default\n`Templates` provided in this object.\n\nThis property, along with the templates in the @TemplateSource, must be set prior to\nrooting to take effect."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/templatekey",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/templatekey",
              "href": "fuse/reactive/instantiator/templatekey",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "TemplateKey",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.TemplateKey"
            }
          },
          {
            "comment": {
              "brief": "Specifies a list of templates that will be used to reflect the data in `Items`.",
              "full": "Specifies a list of templates that will be used to reflect the data in `Items`.\n\nTypically, this collection is not referred to directly. Rather, it will contain all of the children of the `Each` tag in UX."
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Template>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Uno.UX.Template>"
            },
            "flags": {
              "uxPrimary": true
            },
            "id": {
              "id": "fuse/reactive/each/templates",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/templates",
              "href": "fuse/reactive/instantiator/templates",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Templates",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.Templates"
            }
          },
          {
            "comment": {
              "brief": "Specifies a visual that contains templates that can override the default `Templates` provided in this object.",
              "full": "Specifies a visual that contains templates that can override the default `Templates` provided in this object.\n\nIf specified together with `TemplateKey`, this instantiator will prefer to pick template from the\nspecified `TemplateSource` that matches the `TemplateKey` property. If no match is found, it falls back\nto using the regular list of `Templates`.  Refer to `Defaults`.\n\nThis property is useful if you are creating a component and want to allow certain templates inside the\ncomponent to be overridden by the user.\n\n## Example\n\nThis example uses `Each`, but it applies equally to `Instance` and other subclasses of `Instantiator`.\n\n    <Panel ux:Class=\"MyListControl\">\n        <StackPanel>\n            <Each Count=\"10\" TemplateSource=\"this\" TemplateKey=\"ListItem\">\n                <Text Value=\"This is an item\" />\n            </Each>\n        </StackPanel>\n    </Panel>\n\nIf we instantiate `<MyListControl>` now, it will display the text \"This is an item\" 10 times.\n\nHowever, we can override the template like this:\n\n    <MyListControl>\n        <Rectangle ux:Template=\"ListItem\" Color=\"Red\">\n            <Text>This is a red item</Text>\n        </Rectangle>\n    </MyListControl>\n\nThis will display a red rectangle with the text \"This is a red item\" 10 times, instead of the default\ntemplate defined in the component itself.\n\nThe `TemplateSource` property, along with the templates in the source, as well as the `TemplateKey`, must be set prior to\nrooting to take effect."
            },
            "returns": {
              "href": "fuse/itemplatesource",
              "title": "ITemplateSource",
              "fullyQualifiedTitle": "Fuse.ITemplateSource"
            },
            "id": {
              "id": "fuse/reactive/each/templatesource",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/templatesource",
              "href": "fuse/reactive/instantiator/templatesource",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "TemplateSource",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.TemplateSource"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The list of bindings belonging to this node.",
              "full": "The list of bindings belonging to this node."
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Binding>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Fuse.Binding>"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/reactive/each/bindings",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/bindings",
              "href": "fuse/node/bindings",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Bindings",
              "fullyQualifiedIndexTitle": "Fuse.Node.Bindings"
            }
          },
          {
            "comment": {
              "brief": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute.",
              "full": "Run-time name of the node.\nThis property is automatically set using the ux:Name attribute."
            },
            "returns": {
              "href": "uno/ux/selector",
              "title": "Selector",
              "fullyQualifiedTitle": "Uno.UX.Selector"
            },
            "id": {
              "id": "fuse/reactive/each/name",
              "parentId": "fuse/reactive/each",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/name",
              "href": "fuse/node/name",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Name",
              "fullyQualifiedIndexTitle": "Fuse.Node.Name"
            }
          }
        ]
      }
    ],
    "attachedUxProperties": [
      {
        "items": [
          {
            "comment": {
              "brief": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.",
              "full": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.\n\nSee @Resources for more information.\n\nThe `ux:Global` attribute on an UX element creates a single object (singleton) that is globally available.\nUsing this attribute will prevent the object from being inserted by default the object at its defined location\nin the UX tree."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "parameters": [
              {
                "name": "obj",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/resource_globalkey_setglobalkey_4c3ac72d",
              "parentId": "fuse/reactive/each",
              "type": "AttachedUxProperty",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/reactive/each/resource_globalkey_setglobalkey_4c3ac72d",
              "href": "uno/ux/resource/setglobalkey_4c3ac72d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Resource.GlobalKey",
              "fullyQualifiedIndexTitle": "Resource.GlobalKey"
            }
          }
        ]
      }
    ],
    "constructors": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/each",
            "parentId": "fuse/reactive",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/each",
            "href": "fuse/reactive/each"
          },
          "titles": {
            "indexTitle": "Each",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
          }
        },
        "items": [
          {
            "id": {
              "id": "fuse/reactive/each/_ctor",
              "parentId": "fuse/reactive/each",
              "type": "Constructor",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/_ctor",
              "href": "fuse/reactive/each/_ctor"
            },
            "titles": {
              "indexTitle": "Each",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.Each"
            }
          }
        ]
      }
    ],
    "properties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item.",
              "full": "The context parent is the semantic parent of this node. It is where non-UI structure should\nbe resolved, like looking for the DataContext, a Navigation, or other semantic item."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "id": {
              "id": "fuse/reactive/each/contextparent",
              "parentId": "fuse/reactive/each",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/contextparent",
              "href": "fuse/node/contextparent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ContextParent",
              "fullyQualifiedIndexTitle": "Fuse.Node.ContextParent"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting for this node is completed.\nReturns false if unrooting has started.",
              "full": "Whether rooting for this node is completed.\nReturns false if unrooting has started."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/reactive/each/isrootingcompleted",
              "parentId": "fuse/reactive/each",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/isrootingcompleted",
              "href": "fuse/node/isrootingcompleted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingCompleted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingCompleted"
            }
          },
          {
            "comment": {
              "brief": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted.",
              "full": "Whether rooting of this node has started.\nNote that even if this property returns true, rooting may not yet be\ncompleted for the node. See also @IsRootingCompleted."
            },
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "id": {
              "id": "fuse/reactive/each/isrootingstarted",
              "parentId": "fuse/reactive/each",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/isrootingstarted",
              "href": "fuse/node/isrootingstarted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "IsRootingStarted",
              "fullyQualifiedIndexTitle": "Fuse.Node.IsRootingStarted"
            }
          },
          {
            "comment": {
              "brief": "The parent @Visual of this node. Will return null if the node is not rooted.",
              "full": "The parent @Visual of this node. Will return null if the node is not rooted."
            },
            "returns": {
              "href": "fuse/visual",
              "title": "Visual",
              "fullyQualifiedTitle": "Fuse.Visual"
            },
            "id": {
              "id": "fuse/reactive/each/parent",
              "parentId": "fuse/reactive/each",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/parent",
              "href": "fuse/node/parent",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Parent",
              "fullyQualifiedIndexTitle": "Fuse.Node.Parent"
            }
          },
          {
            "comment": {
              "brief": "A linked list holding data for extrinsic properties.",
              "full": "A linked list holding data for extrinsic properties."
            },
            "returns": {
              "href": "fuse/properties",
              "title": "Properties",
              "fullyQualifiedTitle": "Fuse.Properties"
            },
            "id": {
              "id": "fuse/reactive/each/properties",
              "parentId": "fuse/reactive/each",
              "type": "Property",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/properties",
              "href": "fuse/node/properties",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Properties",
              "fullyQualifiedIndexTitle": "Fuse.Node.Properties"
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/each",
            "parentId": "fuse/reactive",
            "type": "UxClass",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/each",
            "href": "fuse/reactive/each"
          },
          "titles": {
            "indexTitle": "Each",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
          }
        },
        "items": [
          {
            "returns": {
              "href": "uno/object",
              "title": "object",
              "fullyQualifiedTitle": "object"
            },
            "parameters": [
              {
                "name": "container",
                "href": "fuse/visual",
                "title": "Visual",
                "fullyQualifiedTitle": "Fuse.Visual"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/getitems_d61a1318",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/getitems_d61a1318",
              "href": "fuse/reactive/each/getitems_d61a1318"
            },
            "titles": {
              "indexTitle": "GetItems(Visual)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.GetItems(Fuse.Visual)"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "parameters": [
              {
                "name": "container",
                "href": "fuse/visual",
                "title": "Visual",
                "fullyQualifiedTitle": "Fuse.Visual"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/getmatchkey_d61a1318",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/getmatchkey_d61a1318",
              "href": "fuse/reactive/each/getmatchkey_d61a1318"
            },
            "titles": {
              "indexTitle": "GetMatchKey(Visual)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.GetMatchKey(Fuse.Visual)"
            }
          },
          {
            "comment": {
              "brief": "The item collection that will be used to populate this visual.",
              "full": "The item collection that will be used to populate this visual.\n\nThe item collection can be a script array, @Observable or Uno array.\n\nFor the view to be populated, you also have to:\n* Provide at least one `ux:Template` as a child of this visual\n* Set the @MatchKey property to the name of a field on each data item\n  that will be used to select the corresponding template."
            },
            "parameters": [
              {
                "name": "container",
                "href": "fuse/visual",
                "title": "Visual",
                "fullyQualifiedTitle": "Fuse.Visual"
              },
              {
                "name": "items",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/setitems_8527ec78",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/setitems_8527ec78",
              "href": "fuse/reactive/each/setitems_8527ec78"
            },
            "titles": {
              "indexTitle": "SetItems(Visual, object)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.SetItems(Fuse.Visual, object)"
            }
          },
          {
            "comment": {
              "brief": "Shorthand for setting the `MatchKey` property on the implicit `Each` created when using the `Items` attached property.",
              "full": "Shorthand for setting the `MatchKey` property on the implicit `Each` created when using the `Items` attached property."
            },
            "parameters": [
              {
                "name": "container",
                "href": "fuse/visual",
                "title": "Visual",
                "fullyQualifiedTitle": "Fuse.Visual"
              },
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/setmatchkey_b334f53d",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/setmatchkey_b334f53d",
              "href": "fuse/reactive/each/setmatchkey_b334f53d"
            },
            "titles": {
              "indexTitle": "SetMatchKey(Visual, string)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each.SetMatchKey(Fuse.Visual, string)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/reactive/instantiator",
            "parentId": "fuse/reactive",
            "type": "Class",
            "modifiers": [
              "public",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/reactive/instantiator",
            "href": "fuse/reactive/instantiator"
          },
          "titles": {
            "indexTitle": "Instantiator",
            "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "@hide",
              "full": "@hide"
            },
            "returns": {
              "href": "uno/object",
              "title": "object",
              "fullyQualifiedTitle": "object"
            },
            "id": {
              "id": "fuse/reactive/each/getitems",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/getitems",
              "href": "fuse/reactive/instantiator/getitems",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetItems",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.GetItems"
            }
          },
          {
            "comment": {
              "brief": "@hide",
              "full": "@hide"
            },
            "parameters": [
              {
                "name": "value",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/setitems_a09c80e3",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/setitems_a09c80e3",
              "href": "fuse/reactive/instantiator/setitems_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SetItems(object)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.SetItems(object)"
            }
          },
          {
            "comment": {
              "brief": "Call to set the items during the OnRooted override (post base.OnRooted call)\n@hide",
              "full": "Call to set the items during the OnRooted override (post base.OnRooted call)\n@hide"
            },
            "parameters": [
              {
                "name": "value",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/setitemsderivedrooting_a09c80e3",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/setitemsderivedrooting_a09c80e3",
              "href": "fuse/reactive/instantiator/setitemsderivedrooting_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SetItemsDerivedRooting(object)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator.SetItemsDerivedRooting(object)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/node",
            "parentId": "fuse",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract",
              "partial"
            ]
          },
          "uri": {
            "idUri": "fuse/node",
            "href": "fuse/node"
          },
          "titles": {
            "indexTitle": "Node",
            "fullyQualifiedIndexTitle": "Fuse.Node"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/add_cd0f711d",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/add_cd0f711d",
              "href": "fuse/node/add_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Add(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Add(Fuse.Binding)"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/each/findbytype_1",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/findbytype_1",
              "href": "fuse/node/findbytype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindByType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindByType<T>"
            }
          },
          {
            "comment": {
              "brief": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null.",
              "full": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null."
            },
            "returns": {
              "href": "fuse/node",
              "title": "Node",
              "fullyQualifiedTitle": "Fuse.Node"
            },
            "parameters": [
              {
                "name": "name",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Predicate<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/findnodebyname_66268add",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/findnodebyname_66268add",
              "href": "fuse/node/findnodebyname_66268add",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "FindNodeByName(Selector, Predicate<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.FindNodeByName(Uno.UX.Selector, Uno.Predicate<Fuse.Node> (Fuse.Node))"
            }
          },
          {
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/each/getnearestancestoroftype_1",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/getnearestancestoroftype_1",
              "href": "fuse/node/getnearestancestoroftype_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetNearestAncestorOfType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.GetNearestAncestorOfType<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "index",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              },
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/insert_4036b6cf",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/insert_4036b6cf",
              "href": "fuse/node/insert_4036b6cf",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Insert(int, Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Insert(int, Fuse.Binding)"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/each/nextsibling_1",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/nextsibling_1",
              "href": "fuse/node/nextsibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "NextSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.NextSibling<T>"
            }
          },
          {
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "newValue",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/ondatachanged_d062e5a9",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/ondatachanged_d062e5a9",
              "href": "fuse/node/ondatachanged_d062e5a9",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnDataChanged(string, object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnDataChanged(string, object)"
            }
          },
          {
            "comment": {
              "brief": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state.",
              "full": "If you override `OnRooted` you must call `base.OnRooted()` first in your derived class. No other processing should happen first, otherwise you might end up in an undefined state."
            },
            "id": {
              "id": "fuse/reactive/each/onrooted",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/onrooted",
              "href": "fuse/node/onrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnRooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnRooted"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/each/onunrooted",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/onunrooted",
              "href": "fuse/node/onunrooted",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnUnrooted",
              "fullyQualifiedIndexTitle": "Fuse.Node.OnUnrooted"
            }
          },
          {
            "comment": {
              "brief": "Returns the next sibling node of the given type.",
              "full": "Returns the next sibling node of the given type."
            },
            "returns": {
              "isVirtual": true,
              "title": "T",
              "fullyQualifiedTitle": "Fuse.T"
            },
            "id": {
              "id": "fuse/reactive/each/previoussibling_1",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/previoussibling_1",
              "href": "fuse/node/previoussibling_1",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "PreviousSibling<T>",
              "fullyQualifiedIndexTitle": "Fuse.Node.PreviousSibling<T>"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "item",
                "href": "fuse/binding",
                "title": "Binding",
                "fullyQualifiedTitle": "Fuse.Binding"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/remove_cd0f711d",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/remove_cd0f711d",
              "href": "fuse/node/remove_cd0f711d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Remove(Binding)",
              "fullyQualifiedIndexTitle": "Fuse.Node.Remove(Fuse.Binding)"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/each/softdispose",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/softdispose",
              "href": "fuse/node/softdispose",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SoftDispose",
              "fullyQualifiedIndexTitle": "Fuse.Node.SoftDispose"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/subtreetostring",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/subtreetostring",
              "href": "fuse/node/subtreetostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString"
            }
          },
          {
            "parameters": [
              {
                "name": "sb",
                "href": "uno/text/stringbuilder",
                "title": "StringBuilder",
                "fullyQualifiedTitle": "Uno.Text.StringBuilder"
              },
              {
                "name": "indent",
                "href": "uno/int",
                "title": "int",
                "fullyQualifiedTitle": "int"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/subtreetostring_efe5f5b8",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/subtreetostring_efe5f5b8",
              "href": "fuse/node/subtreetostring_efe5f5b8",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "SubtreeToString(StringBuilder, int)",
              "fullyQualifiedIndexTitle": "Fuse.Node.SubtreeToString(Uno.Text.StringBuilder, int)"
            }
          },
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              },
              {
                "name": "acceptor",
                "href": "uno/predicate_1",
                "title": "Predicate<object> (object)",
                "fullyQualifiedTitle": "Uno.Predicate<object> (object)"
              },
              {
                "name": "resource",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/trygetresource_5317754b",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/trygetresource_5317754b",
              "href": "fuse/node/trygetresource_5317754b",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "TryGetResource(string, Predicate<object> (object), object)",
              "fullyQualifiedIndexTitle": "Fuse.Node.TryGetResource(string, Uno.Predicate<object> (object), object)"
            }
          },
          {
            "parameters": [
              {
                "name": "action",
                "href": "uno/action_1",
                "title": "Action<Node> (Node)",
                "fullyQualifiedTitle": "Uno.Action<Fuse.Node> (Fuse.Node)"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/visitsubtree_7a20b182",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/visitsubtree_7a20b182",
              "href": "fuse/node/visitsubtree_7a20b182",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "VisitSubtree(Action<Node> (Node))",
              "fullyQualifiedIndexTitle": "Fuse.Node.VisitSubtree(Uno.Action<Fuse.Node> (Fuse.Node))"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/ux/propertyobject",
            "parentId": "uno/ux",
            "type": "Class",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "uno/ux/propertyobject",
            "href": "uno/ux/propertyobject"
          },
          "titles": {
            "indexTitle": "PropertyObject",
            "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/addpropertylistener_496a874a",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/addpropertylistener_496a874a",
              "href": "uno/ux/propertyobject/addpropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "AddPropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.AddPropertyListener(Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/onpropertychanged_16d735f3",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/onpropertychanged_16d735f3",
              "href": "uno/ux/propertyobject/onpropertychanged_16d735f3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "origin",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/onpropertychanged_6422fe92",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/onpropertychanged_6422fe92",
              "href": "uno/ux/propertyobject/onpropertychanged_6422fe92",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector, IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector, Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/removepropertylistener_496a874a",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/removepropertylistener_496a874a",
              "href": "uno/ux/propertyobject/removepropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "RemovePropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.RemovePropertyListener(Uno.UX.IPropertyListener)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/object",
            "parentId": "uno",
            "type": "Class",
            "modifiers": [
              "public",
              "intrinsic"
            ]
          },
          "uri": {
            "idUri": "uno/object",
            "href": "uno/object"
          },
          "titles": {
            "indexTitle": "object",
            "fullyQualifiedIndexTitle": "object"
          }
        },
        "items": [
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "o",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/reactive/each/equals_a09c80e3",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/equals_a09c80e3",
              "href": "uno/object/equals_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Equals(object)",
              "fullyQualifiedIndexTitle": "Uno.Object.Equals(object)"
            }
          },
          {
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/reactive/each/gethashcode",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/gethashcode",
              "href": "uno/object/gethashcode",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetHashCode",
              "fullyQualifiedIndexTitle": "Uno.Object.GetHashCode"
            }
          },
          {
            "returns": {
              "href": "uno/type",
              "title": "Type",
              "fullyQualifiedTitle": "Uno.Type"
            },
            "id": {
              "id": "fuse/reactive/each/gettype",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/gettype",
              "href": "uno/object/gettype",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetType",
              "fullyQualifiedIndexTitle": "Uno.Object.GetType"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/reactive/each/tostring",
              "parentId": "fuse/reactive/each",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each/tostring",
              "href": "uno/object/tostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ToString",
              "fullyQualifiedIndexTitle": "Uno.Object.ToString"
            }
          }
        ]
      }
    ]
  }
}