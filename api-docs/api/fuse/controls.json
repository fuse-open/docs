{
  "entity": {
    "id": {
      "id": "fuse/controls",
      "parentId": "fuse",
      "type": "Namespace",
      "modifiers": []
    },
    "uri": {
      "idUri": "fuse/controls",
      "href": "fuse/controls"
    },
    "titles": {
      "pageTitle": "Fuse.Controls Namespace",
      "navigationTitle": "Fuse.Controls Namespace",
      "fullTitle": "Fuse.Controls",
      "indexTitle": "Fuse.Controls",
      "fullyQualifiedIndexTitle": "Fuse.Controls"
    },
    "syntax": {
      "uno": "namespace Controls {}"
    }
  },
  "tableOfContents": {
    "namespaces": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/controls/graphics",
              "parentId": "fuse/controls",
              "type": "Namespace",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/controls/graphics",
              "href": "fuse/controls/graphics"
            },
            "titles": {
              "indexTitle": "Fuse.Controls.Graphics",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Graphics"
            }
          },
          {
            "id": {
              "id": "fuse/controls/ios",
              "parentId": "fuse/controls",
              "type": "Namespace",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/controls/ios",
              "href": "fuse/controls/ios"
            },
            "titles": {
              "indexTitle": "Fuse.Controls.iOS",
              "fullyQualifiedIndexTitle": "Fuse.Controls.iOS"
            }
          },
          {
            "id": {
              "id": "fuse/controls/native",
              "parentId": "fuse/controls",
              "type": "Namespace",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/controls/native",
              "href": "fuse/controls/native"
            },
            "titles": {
              "indexTitle": "Fuse.Controls.Native",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Native"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigationinternal",
              "parentId": "fuse/controls",
              "type": "Namespace",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/controls/navigationinternal",
              "href": "fuse/controls/navigationinternal"
            },
            "titles": {
              "indexTitle": "Fuse.Controls.NavigationInternal",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal"
            }
          }
        ]
      }
    ],
    "uxClasses": [
      {
        "items": [
          {
            "comment": {
              "brief": "Displays an arc.",
              "full": "Displays an arc.\n\nArc is a @Shape that can have @Strokes. An Arc is equivalent to a stroke on the circumference of an @Ellipse (an Arc has no lines to/from the center as a stroke on the @Ellipse would have).\n\nIt is undefined what shape is filled if a `Fill` is used on an Arc. Use only a stroke."
            },
            "id": {
              "id": "fuse/controls/arc",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/arc",
              "href": "fuse/controls/arc"
            },
            "titles": {
              "indexTitle": "Arc",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Arc"
            }
          },
          {
            "comment": {
              "brief": "Displays a backbutton",
              "full": "Displays a backbutton\n\nOnly the semantic control for backbutton. Refer to @Navigation and @GoBack for how\nto use it in navigation.\n\n## Example:\n\n    <BackButton>\n        <Clicked>\n            <GoBack />\n        </Clicked>\n    </BackButton>"
            },
            "id": {
              "id": "fuse/controls/backbutton",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/backbutton",
              "href": "fuse/controls/backbutton"
            },
            "titles": {
              "indexTitle": "BackButton",
              "fullyQualifiedIndexTitle": "Fuse.Controls.BackButton"
            }
          },
          {
            "comment": {
              "brief": "Compensates for space taken up by the keyboard and other OS-specific elements at the bottom of the screen.",
              "full": "Compensates for space taken up by the keyboard and other OS-specific elements at the bottom of the screen.\n\nSimilar to the @StatusBarBackground in that it takes on the same size as certain OS-specific elements.\nThe `BottomBarBackground` will take on the same size as the keyboard (whenever it is visible).\nCertain Android devices have their home button on the screen instead of as a physical button.\nThe `BottomBarBackground` will also take this into account when sizing itself.\n\n## Example\n\nThe following example demonstrates how a `BottomBarBackground` can be docked inside a `DockPanel` to ensure the rest of the app's content (inside by the `Panel`) will be placed above the bottom bar.\n\n    <DockPanel>\n        <BottomBarBackground Dock=\"Bottom\" />\n        <Panel>\n            <Text>This text will be above the bottom bar</Text>\n        </Panel>\n    </DockPanel>\n\nYou also have the option to not take the size of the keyboard into account:\n\n    <BottomBarBackground IncludesKeyboard=\"false\" />"
            },
            "id": {
              "id": "fuse/controls/bottombarbackground",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/bottombarbackground",
              "href": "fuse/controls/bottombarbackground"
            },
            "titles": {
              "indexTitle": "BottomBarBackground",
              "fullyQualifiedIndexTitle": "Fuse.Controls.BottomBarBackground"
            }
          },
          {
            "id": {
              "id": "fuse/controls/bottomframebackground",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/bottomframebackground",
              "href": "fuse/controls/bottomframebackground"
            },
            "titles": {
              "indexTitle": "BottomFrameBackground",
              "fullyQualifiedIndexTitle": "Fuse.Controls.BottomFrameBackground"
            }
          },
          {
            "comment": {
              "brief": "Displays a button",
              "full": "Displays a button\n\nThe default button in Fuse. Its appearance is transparent with blue text.\nTo change the look or to create a semantically specific button, create a Subclass of this Class.\nPlease note that when used inside a @NativeViewHost, this button will have the platform native appearance\nwhich might need additional styling to make it visible. For example, on iOS the default native appearance of a\nbutton is blue text on white.\n\n## Examples\n\nBy default, `Button` is drawn as blue text over a transparent background.\n\n    <Button Text=\"Click me\" />\n\nHowever, Button can also be used to render the *platform native* button control whenever possible.\nThis is done by wrapping the Button in a @NativeViewHost, as shown below.\n\n    <NativeViewHost>\n        <Button Text=\"Native button\" />\n    </NativeViewHost>\n\nHowever, we usually want a button with our own look and feel.\nIn this case, it is recommended to subclass @Panel rather than Button.\nSince you can attach a `Clicked` handler to any element, using a @Panel as the base class offers a\ngreat deal of flexibility, while removing a lot of the unnecessary complexity of the actual Button class.\n\nBelow is an example of creating your own button control with @Panel:\n\n    <Panel ux:Class=\"MyButton\" HitTestMode=\"LocalBounds\" Margin=\"4\" Color=\"#25a\">\n        <string ux:Property=\"Text\" />\n        <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" Margin=\"30,15\" />\n\n        <WhilePressed>\n            <Change this.Color=\"#138\" Duration=\"0.05\" DurationBack=\".2\" />\n        </WhilePressed>\n    </Panel>\n\n    <MyButton Text=\"Click me\" />\n\nHowever, if you want a *platform native button* that falls back to a custom look on non-mobile devices,\nyou have to subclass `Button`.\n\n    <Button ux:Class=\"MyNativeButtonWithFallback\" Margin=\"2\">\n        <Panel ux:Template=\"GraphicsAppearance\" HitTestMode=\"LocalBounds\">\n            <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n            <Rectangle CornerRadius=\"4\" Layer=\"Background\" Color=\"#25a\" />\n        </Panel>\n    </Button>\n\nWhen placed in a @NativeViewHost, the Button will attempt to initialize a *native* button control.\nIf this is not possible (e.g. if it's running on desktop), it will fall back to the template specified\nby `ux:Template=\"GraphicsAppearance\"`.`\n\n    <NativeViewHost>\n        <!-- Will be native if possible -->\n        <MyNativeButtonWithFallback Text=\"Some button\" />\n    </NativeViewHost>\n\nIf we *don't* place the Button inside a @NativeViewHost,\nthe `GraphicsAppearance` template will always be used to draw the button.\n\n    <MyNativeButtonWithFallback />"
            },
            "id": {
              "id": "fuse/controls/button",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/button",
              "href": "fuse/controls/button"
            },
            "titles": {
              "indexTitle": "Button",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Button"
            }
          },
          {
            "comment": {
              "brief": "Baseclass for buttons",
              "full": "Baseclass for buttons\n\nButtonBase is the undecorated baseclass for buttons in fuse. Can be used to make\nux classes for buttons that has text.\n\n## Example:\n\n    <ButtonBase ux:Class=\"GradientButton\" Margin=\"2\">\n        <Text ux:Name=\"Button_Text\" Value=\"{ReadProperty this.Text}\" Color=\"#000\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n        <Rectangle CornerRadius=\"4\" Layer=\"Background\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#0fc\" />\n                <GradientStop Offset=\"1\" Color=\"#0cf\" />\n            </LinearGradient>\n        </Rectangle>\n    </ButtonBase>"
            },
            "id": {
              "id": "fuse/controls/buttonbase",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/buttonbase",
              "href": "fuse/controls/buttonbase"
            },
            "titles": {
              "indexTitle": "ButtonBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ButtonBase"
            }
          },
          {
            "id": {
              "id": "fuse/controls/cameraview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/cameraview",
              "href": "fuse/controls/cameraview"
            },
            "titles": {
              "indexTitle": "CameraView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CameraView"
            }
          },
          {
            "comment": {
              "brief": "Displays a circle",
              "full": "Displays a circle\n\nCircle is a @Shape that can have @Fills and @Strokes.\nBy default Circle does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n### StartAngle / EndAngle\n\n`StartAngle` and `EndAngle` can be used to only draw a slice of a @Circle.\nThere are 6 different properties that can be used to control this in different ways.\n\n* `StartAngle` - The angle in radians where the slice begins\n* `StartAngleDegrees` - The angle in degrees where the slice begins\n* `EndAngle` - The angle in radians where the slice ends\n* `EndAngleDegrees` - The angle in degrees where the slice ends\n* `LengthAngle` - An offset in radians from `StartAngle`. This can be used instead of `EndAngle`\n* `LengthAngleDegrees` - An offset in degrees from `StartAngle`. This can be used instead of `EndAngleDegrees`.\n\nNote that using for example both @(StartAngle) and @(StartAngleDegrees) on the same @(Circle) will have an undefined behavior.\n\n## Examples\n\nDisplaying a red @Circle:\n\n```\n<Circle Width=\"100\" Height=\"100\" Color=\"#f00\" />\n```\n\nGetting fancy with a @Stroke and @LinearGradient:\n\n```\n<Circle Width=\"100\" Height=\"100\" >\n    <LinearGradient>\n        <GradientStop Offset=\"0\" Color=\"#cf0\" />\n        <GradientStop Offset=\"1\" Color=\"#f40\" />\n    </LinearGradient>\n    <Stroke Width=\"1\">\n        <SolidColor Color=\"#000\" />\n    </Stroke>\n</Circle>\n```\n\nDrawing a slice of a circle:\n\n```\n<Circle Width=\"150\" Height=\"150\" Color=\"#f00\" StartAngleDegrees=\"135\" LengthAngleDegrees=\"145\" />\n```"
            },
            "id": {
              "id": "fuse/controls/circle",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/circle",
              "href": "fuse/controls/circle"
            },
            "titles": {
              "indexTitle": "Circle",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Circle"
            }
          },
          {
            "comment": {
              "brief": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.",
              "full": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.\n\nThis is no longer suitable for some devices and you should consider using @SafeEdgePanel instead.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
            },
            "id": {
              "id": "fuse/controls/clientpanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/clientpanel",
              "href": "fuse/controls/clientpanel"
            },
            "titles": {
              "indexTitle": "ClientPanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ClientPanel"
            }
          },
          {
            "comment": {
              "brief": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.",
              "full": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.\n\n## Usage example\n\nWe use the `Subtree` property to identify the inner visual that will receive the children.\n\n    <Container ux:Class=\"MyContainer\" Subtree=\"innerPanel\">\n        <Rectangle ux:Binding=\"Children\" CornerRadius=\"10\" Margin=\"10\">\n            <Stroke Color=\"Red\" Width=\"2\" />\n            <Panel Margin=\"10\" ux:Name=\"innerPanel\" />\n        </Rectangle>\n    </Container>\n\nNote that to add nodes that make up the container itself (e.g. decoration), we need to explicitly mark them\nwith `ux:Binding=\"Children\"`, otherwise these nodes will be added to `innerPanel`.\n\nTo use the container, we can simply do:\n\n    <MyContainer>\n        <Panel Color=\"Blue\" />\n    </MyContainer>\n\nHere, the blue panel will be placed as a child of `innerPanel`, instead of as a direct child of the\ncontainer."
            },
            "id": {
              "id": "fuse/controls/container",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/container",
              "href": "fuse/controls/container"
            },
            "titles": {
              "indexTitle": "Container",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Container"
            }
          },
          {
            "comment": {
              "brief": "Content controls display a single visual child.",
              "full": "Content controls display a single visual child.\n\n## Available content controls\n[subclass Fuse.Controls.ContentControl]",
              "attributes": {
                "topic": "Content controls"
              }
            },
            "id": {
              "id": "fuse/controls/contentcontrol",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/contentcontrol",
              "href": "fuse/controls/contentcontrol"
            },
            "titles": {
              "indexTitle": "ContentControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ContentControl"
            }
          },
          {
            "comment": {
              "brief": "Draws a curve connecting several points, specified as @CurvePoint.",
              "full": "Draws a curve connecting several points, specified as @CurvePoint.\n\nThe points of the curve are relative to the size of the `Curve`; the values have the range `0..1`.\n\n## Example\n\n    Draws a simple line graph.\n\n    <Panel Alignment=\"Center\" Width=\"300\" Height=\"200\">\n        <Curve StrokeWidth=\"10\" StrokeColor=\"#ABC\">\n            <CurvePoint At=\"0.00,0.0\"/>\n            <CurvePoint At=\"0.25,0.4\"/>\n            <CurvePoint At=\"0.50,0.1\"/>\n            <CurvePoint At=\"0.75,0.9\"/>\n            <CurvePoint At=\"1.00,0.6\"/>\n        </Curve>\n    </Panel>"
            },
            "id": {
              "id": "fuse/controls/curve",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/curve",
              "href": "fuse/controls/curve"
            },
            "titles": {
              "indexTitle": "Curve",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Curve"
            }
          },
          {
            "comment": {
              "brief": "Defines a point inside a @Curve",
              "full": "Defines a point inside a @Curve\n\nOnly one of each pair `ControlIn`/`TangentIn` and `ControlOut/TangentOut` can be defined, as they both define the same tangent to a point. These tangent definitions override the default values: if not specfied the `Curve` will assign appropriate defaults depending on the `Style`.\n\nThe `ControlIn/Out` values define a bezier style control point before and after the point.\n\nThe `TangenIn/Out` values define the direction and strenght of the tangent at the point. These are defined according to the Cubic Hermite definition."
            },
            "id": {
              "id": "fuse/controls/curvepoint",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/curvepoint",
              "href": "fuse/controls/curvepoint"
            },
            "titles": {
              "indexTitle": "CurvePoint",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CurvePoint"
            }
          },
          {
            "comment": {
              "brief": "Displays a component to select a date.",
              "full": "Displays a component to select a date.\n\nCurrently, the DatePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `DatePicker` can be used to select a specific date value. The type of its `Value`, `MinValue`, and `MaxValue`\nproperties are each of type `Uno.DateTime`, which is marshalled automatically to and from the JavaScript `Date` type.\nThis makes interaction between JavaScript and the `DatePicker` type seamless via databinding. If you plan to wrap\na `DatePicker` in a UX component and use a UX property to hook up to any of these values, the `Uno.DateTime` type\nshould be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `DatePicker` will assume\nincoming values are relative to UTC, and truncate the time component to midnight, effectively ignoring the time\ncomponent altogether. Similarly, values read from `DatePicker` properties will only consist of a date component at\nmidnight UTC. This makes values going to/from the `DatePicker` control easy to create and interpret consistently, but\nalso means that if a value with a time component other than midnight at UTC is written to one of `DatePicker`'s `Value`\nproperties, subsequent values read from the property may not match the written value, as the time component will have\nbeen truncated.\n\nNote that this control should not be used to deal with historic dates, as calendar/date and timestamp translation is\ninconsistent between different locales due to when and where different calendar systems were adopted. However, the\nbehavior is consistent for all dates since at least 1900 including all representable future dates.\n\n## Example\n\nThe following example shows how to set up a `DatePicker` object with a specific minimum and maximum value, and set the\nvalue from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someDate = Observable(new Date(Date.parse(\"2007-02-14T00:00:00.000Z\")));\n\n            someDate.onValueChanged(module, function(date) {\n                console.log(\"someDate changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someDate: someDate,\n\n                minDate: new Date(Date.parse(\"1950-01-01T00:00:00.000Z\")),\n                maxDate: new Date(Date.parse(\"2050-01-01T00:00:00.000Z\")),\n\n                whoYouGonnaCall: function() {\n                    someDate.value = new Date(Date.parse(\"1984-06-08T00:00:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <DatePicker Value=\"{someDate}\" MinValue=\"{minDate}\" MaxValue=\"{maxDate}\" />\n        </NativeViewHost>\n\n        <Button Text=\"Who you gonna call?\" Clicked=\"{whoYouGonnaCall}\" Margin=\"5\" />\n    </StackPanel>"
            },
            "id": {
              "id": "fuse/controls/datepicker",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/datepicker",
              "href": "fuse/controls/datepicker"
            },
            "titles": {
              "indexTitle": "DatePicker",
              "fullyQualifiedIndexTitle": "Fuse.Controls.DatePicker"
            }
          },
          {
            "comment": {
              "brief": "Lays out its children by docking them to the different sides, one after the other.",
              "full": "Lays out its children by docking them to the different sides, one after the other.\n\nOne can specify which side per element by using the @Dock property like this:\n\n    <DockPanel>\n        <Rectangle Dock=\"Left\"/>\n    </DockPanel>\n\nThe @Dock property can be assigned to be either Left, Right, Top, Bottom or Fill (which is the default).\n\n    <DockPanel>\n        <Rectangle ux:Class=\"MyRectangle\" MinWidth=\"100\" MinHeight=\"200\" />\n        <MyRectangle Color=\"Red\" Dock=\"Left\"/>\n        <MyRectangle Color=\"Green\" Dock=\"Top\"/>\n        <MyRectangle Color=\"Blue\" Dock=\"Right\"/>\n        <MyRectangle Color=\"Yellow\" Dock=\"Bottom\"/>\n        <MyRectangle Color=\"Teal\" />\n    </DockPanel>"
            },
            "id": {
              "id": "fuse/controls/dockpanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/dockpanel",
              "href": "fuse/controls/dockpanel"
            },
            "titles": {
              "indexTitle": "DockPanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.DockPanel"
            }
          },
          {
            "comment": {
              "brief": "A navigation control for panels that slide in from the sides of the display.",
              "full": "A navigation control for panels that slide in from the sides of the display.\n\nAdd an `Edge` property to the children to define on which edge they attach. The user can swipe from that side to reveal the panel.\n\nUse a `GoBack` inside this navigation to dismiss side-panels from UX, or use the `dismiss` method from JavaScript.\n\n## Model\n\nThe EdgeNavigator can be bound to a model with the `Pages` property. For example:\n\n   <EdgeNavigator Pages=\"{pages}\">\n       <Panel Edge=\"Left\" ux:Template=\"left\"/>\n       <Panel Edge=\"Right\" ux:Template=\"right\"/>\n       <Panel ux:Template=\"main\"/>\n   </EdgeNavigator>\n\nThen in your main model state you define `pages`\n\n   export default class MainState {\n       constructor() {\n           this.pages = [ new LeftPage(), new RightPage(), new MainPage() ]\n       }\n   }\n\n   class LeftPage {\n       constructor() {\n           this.$path = \"left\"\n       }\n   }\n\n   class RightPage {\n       constructor() {\n           this.$path = \"right\"\n       }\n   }\n\n   class MainPage {\n       constructor() {\n           this.$path = \"main\"\n       }\n   }"
            },
            "id": {
              "id": "fuse/controls/edgenavigator",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/edgenavigator",
              "href": "fuse/controls/edgenavigator"
            },
            "titles": {
              "indexTitle": "EdgeNavigator",
              "fullyQualifiedIndexTitle": "Fuse.Controls.EdgeNavigator"
            }
          },
          {
            "comment": {
              "brief": "Displays an ellipse",
              "full": "Displays an ellipse\n\nEllipse is a @Shape that can have @Fills and @Strokes.\nBy default Ellipse does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n## Example:\n\n    <Ellipse Width=\"300\" Height=\"100\">\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0cc\" />\n            <GradientStop Offset=\"1\" Color=\"#cc0\" />\n        </LinearGradient>\n        <Stroke Width=\"1\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Ellipse>"
            },
            "id": {
              "id": "fuse/controls/ellipse",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/ellipse",
              "href": "fuse/controls/ellipse"
            },
            "titles": {
              "indexTitle": "Ellipse",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Ellipse"
            }
          },
          {
            "id": {
              "id": "fuse/controls/filevideosource",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/filevideosource",
              "href": "fuse/controls/filevideosource"
            },
            "titles": {
              "indexTitle": "FileVideoSource",
              "fullyQualifiedIndexTitle": "Fuse.Controls.FileVideoSource"
            }
          },
          {
            "comment": {
              "brief": "A native view that hosts graphics-rendered UI controls.",
              "full": "A native view that hosts graphics-rendered UI controls.\n\nGraphicsView is the counterpart to @NativeViewHost and allows you to add Fuse views to a NativeViewHost-scope.\n\n    <App>\n        <NativeViewHost>\n            <StackPanel>\n                <Button Text=\"I'm a Native button!\" />\n                <GraphicsView>\n                    <Button Text=\"I'm a graphics-button!\" />\n                </GraphicsView>\n            </StackPanel>\n        </NativeViewHost>\n    </App>\n\nAs with the NativeViewHost note that depth ordering will behave differently when mixing Native and Fuse views."
            },
            "id": {
              "id": "fuse/controls/graphicsview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/graphicsview",
              "href": "fuse/controls/graphicsview"
            },
            "titles": {
              "indexTitle": "GraphicsView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.GraphicsView"
            }
          },
          {
            "comment": {
              "brief": "Lays out children in a grid formation.",
              "full": "Lays out children in a grid formation.\n\n## RowCount and ColumnCount properties\n\nIf what you need is a certain number of equally sized rows and/or columns,\nyou can use the @RowCount and @ColumnCount properties.\n\n    <Grid RowCount=\"4\" ColumnCount=\"2\"/>\n\nBy default, elements in the grid are placed in the order they appear in UX, from left to right,\ntop to bottom. However, you can explicitly specify per element which grid cell they should be placed\nin using the `Row` and `Column` properties.\n\n    <Grid RowCount=\"1\" ColumnCount=\"2\">\n        <Rectangle Row=\"0\" Column=\"1\" Color=\"Red\"/>\n        <Rectangle Row=\"0\" Column=\"0\" Color=\"Blue\"/>\n    </Grid>\n\nIf you want an element to occupy multiple rows or columns,\nyou can use the `RowSpan` and `ColumnSpan` properties.\n\n    <Grid RowCount=\"2\" ColumnCount=\"2\">\n        <Rectangle ColumnSpan=\"2\" RowSpan=\"2\" Color=\"Red\"/>\n    </Grid>\n\n## Rows and Columns properties\n\nMore fine grained control of how the rows and column sizes are calculated can be achieved with the\n@Rows and @Columns properties. These properties accept a comma separated list of *grid sizes* which\ncan take on a few different forms. The values can either be absolute, relative or automatic.\n\nExample of a Grid with 3 rows of size 10, 10 and 50 points, and 3 columns, the first each occupy 20%\nof the available space and the last one occupies 60%.\n\n    <Grid Rows=\"10,10,50\" Columns=\"1*,1*,3*\"/>\n\nThe proportional column sizes here are calculated by first summing all the values (1+1+3 = 5).\nThen we divide our value by the total (1/5 = 20%, 1/5 = 20%, 3/5 = 60%).\n\nNote that proportional sizes only make sense if the grid is expanding to fill the parent panel, or\nhas a fixed size. If it is shrinking to fit it's contents the proportional rows/columns will have zero\nsize.\n\nThe following Grid has 2 rows where the first row gets the height of the tallest element in that row,\nand the second row takes up any remaining space:\n\n    <Grid Rows=\"auto,1*\" />"
            },
            "id": {
              "id": "fuse/controls/grid",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/grid",
              "href": "fuse/controls/grid"
            },
            "titles": {
              "indexTitle": "Grid",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Grid"
            }
          },
          {
            "comment": {
              "brief": "`<HTML/>` is a semantic utility node used to feed a @WebView component or a @LoadHtml action with raw HTML:",
              "full": "`<HTML/>` is a semantic utility node used to feed a @WebView component or a @LoadHtml action with raw HTML:\n\n```XML\n<NativeViewHost>\n    <WebView>\n        <HTML>\n            <![CDATA[\n                <h1>Boom!</h1>\n            ]]>\n        </HTML>\n    </WebView>\n</NativeViewHost>\n\n<LoadHtml>\n    <HTML>\n        <![CDATA[\n            <h1>Bang!</h1>\n        ]]>\n    </HTML>\n</LoadHtml>\n```"
            },
            "id": {
              "id": "fuse/controls/html",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/html",
              "href": "fuse/controls/html"
            },
            "titles": {
              "indexTitle": "HTML",
              "fullyQualifiedIndexTitle": "Fuse.Controls.HTML"
            }
          },
          {
            "comment": {
              "brief": "Displays an Image",
              "full": "Displays an Image\n\nImage provides several features for working with images in fuse, we will go through them in some short examples.\n\nDisplaying an image from a file or an url:\n\n    <StackPanel>\n        <Image File=\"some_file.png\" />\n        <Image Url=\"some_url\" />\n    </StackPanel>\n\n## Displaying a multi-density image from files:\n\n    <StackPanel>\n        <Image Files=\"logo.png, logo@2x.png, logo@4x.png\" />\n        <Image>\n            <MultiDensityImageSource>\n                <FileImageSource Density=\"1\" File=\"logo.png\" />\n                <FileImageSource Density=\"2\" File=\"logo@2x.png\" />\n                <FileImageSource Density=\"3\" File=\"logo@4x.png\" />\n            </MultiDensityImageSource>\n        </Image>\n    </StackPanel/>\n\n## Displaying a multi-density image from urls:\n\n    <StackPanel>\n        <Image>\n            <MultiDensityImageSource>\n                <HttpImageSource Density=\"1\" Url=\"...\" />\n                <HttpImageSource Density=\"2\" Url=\"...@2x\" />\n                <HttpImageSource Density=\"3\" Url=\"...@4x\" />\n            </MultiDensityImageSource>\n        </Image>\n    </StackPanel>\n\n## Displaying an image from a file specified from JavaScript\nUno cannot automatically bundle images when their path is defined in JavaScript. Because of this, you have to manually bundle those by manually importing them in your unproj file. You can either bundle one file like this:\n\n    \"Includes\": [\n        \"*\",\n        \"image.jpg:Bundle\"\n    ]\n\nOr bundle an entire folder, or all files of a specific type, using wildcards:\n\n    \"Includes\": [\n        \"*.jpg:Bundle\"\n    ]\n\nYou can read more on bundling files with your project [here.](/docs/assets/bundle).\n\nWhen you have bundled your image files, you can refer to them from javascript like this:\n\n    <JavaScript>\n        module.exports = {\n            image: \"image.jpg\"\n        };\n    </JavaScript>\n    <Image File=\"{image}\" />"
            },
            "id": {
              "id": "fuse/controls/image",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/image",
              "href": "fuse/controls/image"
            },
            "titles": {
              "indexTitle": "Image",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Image"
            }
          },
          {
            "comment": {
              "brief": "Layout controls perform layout of the children.",
              "full": "Layout controls perform layout of the children.\n\n## Available layout controls\n[subclass Fuse.Controls.LayoutControl]",
              "attributes": {
                "topic": "Layout controls"
              }
            },
            "id": {
              "id": "fuse/controls/layoutcontrol",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/layoutcontrol",
              "href": "fuse/controls/layoutcontrol"
            },
            "titles": {
              "indexTitle": "LayoutControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.LayoutControl"
            }
          },
          {
            "comment": {
              "brief": "Adds a map marker to a @MapView",
              "full": "Adds a map marker to a @MapView\n\nTo annotate the map, you must decorate it with `MapMarker` nodes. `MapMarker` nodes are simple value objects that contain a `Latitude`, a `Longitude` and a `Label`\n\n```HTML\n<NativeViewHost>\n    <MapView>\n        <MapMarker Label=\"Fuse HQ\" Latitude=\"59.9115573\" Longitude=\"10.73888\" />\n    </MapView>\n</NativeViewHost>\n```\n\nIf you need to generate MapMarkers dynamically from JS, data binding and @(Each) are your friends. While we're scripting we might as well hook into the MapMarker's `Tapped` event to detect when the user has selected a marker.\n\n```HTML\n<JavaScript>\n    var Observable = require(\"FuseJS/Observable\");\n    module.exports = {\n        markers : Observable({latitude:30.282786, longitude:-97.741736, label:\"Austin, Texas\", hometown:true}),\n        onMarkerTapped : function(args) {\n            console.log(\"Marker tapped: \"+args.data.hometown);\n        }\n    }\n</JavaScript>\n\n<NativeViewHost>\n    <MapView>\n        <Each Items={markers}>\n            <MapMarker Latitude=\"{latitude}\" Longitude=\"{longitude}\" Label=\"{label}\" Tapped={onMarkerTapped} />\n        </Each>\n    </MapView>\n</NativeViewHost>\n```"
            },
            "id": {
              "id": "fuse/controls/mapmarker",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mapmarker",
              "href": "fuse/controls/mapmarker"
            },
            "titles": {
              "indexTitle": "MapMarker",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapMarker"
            }
          },
          {
            "comment": {
              "brief": "Displays a native map view.",
              "full": "Displays a native map view.\n\nThe `MapView` allows you to present annotated, interactive world-wide maps to the user using the mapping APIs native to the platform: Google Maps on Android and Apple Maps on iOS.\r\n\r\nThe `MapView` is a native control, and thus needs to be contained in a @NativeViewHost to be displayed. As with other native mobile controls, there currently isn't a `MapView` available for desktop targets.\r\n\r\n*Note:* You need to add a reference to `Fuse.Maps` in the `Packages` section of your `.unoproj`:\r\n\r\n```\r\n\"Packages\": [\r\n\t\"Fuse.Maps\",\r\n\t\"Fuse\",\r\n\t\"FuseJS\"\r\n]\r\n```\r\n\r\nGetting a `MapView` included in your app is straight forward: Simply include the node in your UX as you normally would with a native control:\r\n\r\n```XML\r\n<NativeViewHost>\r\n\t<MapView/>\r\n</NativeViewHost>\r\n```\r\n\r\nTo initialize and manipulate the map camera, use the [Latitude](api:fuse/controls/mapview/latitude), [Longitude](api:fuse/controls/mapview/longitude), [Zoom](api:fuse/controls/mapview/zoom), [Tilt](api:fuse/controls/mapview/tilt) and [Bearing](api:fuse/controls/mapview/bearing) properties, all of which are two-way bindable.\r\n`Zoom` follows Google's \"zoom levels\", which can be read about in detail [here](https://developers.google.com/maps/documentation/static-maps/intro#Zoomlevels).\r\n\r\nThe map can be further customized by setting the rendering style using the [Style](api:fuse/controls/mapview/style) property.\r\nOptions are `Normal`, `Satellite` and `Hybrid`.\r\n\r\nTo annotate the map with labelled markers, see @MapMarker\r\n\r\n## Maps on Android\r\n\r\nGoogle Maps requires a valid Google Maps API key. Follow [Google's documentation](https://developers.google.com/maps/documentation/android-api/signup) to get one set up. Once you have your key it must be added to your project file, as shown below\r\n\r\n```JSON\r\n\"Android\": {\r\n   \"Geo\": {\r\n        \"ApiKey\": \"your_key_here\"\r\n    }\r\n}\r\n```\r\n\r\nThis example displays a map with an average zoom level focused on Fuse's home in Oslo, Norway"
            },
            "id": {
              "id": "fuse/controls/mapview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mapview",
              "href": "fuse/controls/mapview"
            },
            "titles": {
              "indexTitle": "MapView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapView"
            }
          },
          {
            "id": {
              "id": "fuse/controls/multilayout",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/multilayout",
              "href": "fuse/controls/multilayout"
            },
            "titles": {
              "indexTitle": "MultiLayout",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MultiLayout"
            }
          },
          {
            "comment": {
              "brief": "Allows you to move @Elements between different layouts using the `Placeholder` class.",
              "full": "Allows you to move @Elements between different layouts using the `Placeholder` class.\n\nThis allows us to @Move elements between different locations in the visual tree, and also switch between certain layouts on the fly.\n\n**Note:** `MultiLayoutPanel` is a good option for when you want to have different layouts based on on the value of certain data. In the cases where you are mostly interested in using different layouts as a means of creating animations, using the @Element.LayoutMaster property might be a better choice.\n\n# Example\nThis example shows a simple 3-choice Selection which uses a `MultiLayoutPanel` together with `LayoutAnimation` to animate an indicator for the selected option:\n\n    <Panel Alignment=\"Center\" Width=\"200\" Height=\"50\" >\n        <MultiLayoutPanel ux:Name=\"multiLayout\">\n            <Grid ColumnCount=\"3\">\n                <Panel ux:Name=\"offPanel\">\n                    <Placeholder>\n                        <Panel ux:Name=\"pointer\" Color=\"#2196F3\" Width=\"50\" Height=\"2\">\n                            <LayoutAnimation>\n                                <Move X=\"1\" Y=\"1\" RelativeTo=\"LayoutChange\" Duration=\".4\" Easing=\"QuadraticInOut\" />\n                            </LayoutAnimation>\n                        </Panel>\n                    </Placeholder>\n                    <Text TextAlignment=\"Center\">Off</Text>\n                    <Clicked>\n                    <Set multiLayout.LayoutElement=\"offPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"standbyPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">Standby</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"standbyPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"onPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">On</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"onPanel\" />\n                    </Clicked>\n                </Panel>\n            </Grid>\n        </MultiLayoutPanel>\n    </Panel>"
            },
            "id": {
              "id": "fuse/controls/multilayoutpanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/multilayoutpanel",
              "href": "fuse/controls/multilayoutpanel"
            },
            "titles": {
              "indexTitle": "MultiLayoutPanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MultiLayoutPanel"
            }
          },
          {
            "comment": {
              "brief": "Creates a layer of native @Controls on top of a @GraphicsView.\n@Controls in its subtree will be mapped to the native controls provided by the OS.",
              "full": "Creates a layer of native @Controls on top of a @GraphicsView.\n@Controls in its subtree will be mapped to the native controls provided by the OS.\n\nA Fuse @App contains an implicit @GraphicsView at the root level, which ensures that UI components are renderered using high performance OpenGL graphics by default.\n\nTo display native stock controls that are bundled with the platform's OS, you can use a @NativeViewHost.\nSome @Controls are only available as native @Controls (e.g. @WebView or @MapView), while others are available as both native and graphics @Controls (e.g. @ScrollView or @Rectangle).\n\n> **Note**: Native @Controls are *always* rendered in front of graphics controls.\n>\n> The only exception is when @Fuse.Controls.NativeViewHost.RenderToTexture is enabled, which comes with its own set of limitations.\n\n## Examples\n\n@WebView is only available as a native view. Here's how to display one:\n\n    <Panel>\n        <NativeViewHost>\n            <WebView Url=\"http://example.com\" />\n        </NativeViewHost>\n    </Panel>\n\nWe can also layer native @Controls over each other and form heirarchies within the `NativeViewHost`, just like with regular UX markup:\n\n    <Panel>\n        <NativeViewHost>\n            <Panel Alignment=\"Top\" Padding=\"15\" Color=\"#0006\">\n                <Text>This text is layered on top of the WebView</Text>\n            </Panel>\n            <WebView Url=\"http://example.com\" />\n        </NativeViewHost>\n    </Panel>\n\nYou can use the `RenderToTexture` property to render the native view to a texture to enable correct layer-compositing with\nother graphics-based @Visuals. Note that this comes at a performance cost, and *native views are not interactive while being\nrendered to texture*.\n\n    <Text Alignment=\"Center\">This text is layered on top of the NativeViewHost</Text>\n    <NativeViewHost RenderToTexture=\"true\">\n        <Rectangle Color=\"#324\" />\n    </NativeViewHost>\n\nTo make an app consisting solely of native components, place a `<NativeViewHost>` at the root level of your app:\n\n    <App>\n        <NativeViewHost>\n            <!-- entire app goes here -->\n        </NativeViewHost>\n    </App>"
            },
            "id": {
              "id": "fuse/controls/nativeviewhost",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/nativeviewhost",
              "href": "fuse/controls/nativeviewhost"
            },
            "titles": {
              "indexTitle": "NativeViewHost",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NativeViewHost"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigationbar",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationbar",
              "href": "fuse/controls/navigationbar"
            },
            "titles": {
              "indexTitle": "NavigationBar",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationBar"
            }
          },
          {
            "comment": {
              "brief": "General-purpose navigation container with on-demand instantiation and recycling of pages.",
              "full": "General-purpose navigation container with on-demand instantiation and recycling of pages.\n\n> Note: It is recommended that you first read the [Navigation guide](/docs/navigation/navigation) for a full overview of Fuse's navigation system.\r\n\r\n## Pages\r\n\r\n`Navigator` takes a collection of [templates](/docs/basics/creating-components#templates-ux-template) as its children.\r\nThis allows it to instantiate and recycle pages as it needs.\r\n\r\nYou can declare a node as a template by specifying the `ux:Template` attribute. The path of the route is matched to the `ux:Template` value to select a template.\r\n\r\n\t<Page ux:Template=\"matchPath\">\r\n\r\nYou can read more about templates [here](/docs/basics/creating-components#templates-ux-template).\r\n\r\nNon-template pages can also be used. The `Name` of the page will be used to match the path:\r\n\r\n\t<Page Name=\"matchPath\">\r\n\t\r\nThese pages always just have the one instance, will always be reused, and will never be removed. Otherwise they function the same as the template pages.\r\n\r\nHere are some general rules that will you help decide whether you want to use a template or non-template page:\r\n\r\n- If you need transitions between pages with the same path, but different parameter, then use a template.\r\n- If you have pages that impact performance even when inactive, or for other reasons should be removed when unused, then use a template.\r\n- If you have a page that should always exist to preserve state, or is very frequently navigated to, use a non-template.\r\n\r\nNote that templates and non-templates can be mixed within one `Navigator`.\r\n\r\n## Transitions\r\n\r\nNavigator comes with a set of default transitions that match the behavior of\r\n[`push()`](/docs/fuse/navigation/router/push_0f0d575d),\r\n[`goBack()`](/docs/fuse/navigation/router/goback_0f0d575d) and\r\n[`goto()`](/docs/fuse/navigation/router/goto_0f0d575d).\r\n\r\nTo have complete control over page transitions use the @PageView class. It works just like a `Navigator` but has no standard transitions or state changes.\r\n\r\nWhen using custom transitions be sure to add a @ReleasePage action. This instructs the `Navigator` and `PageView` on when it can reuse, discard, or add the page to its cache.\r\n\r\n## Example\r\n\t\r\nThe following example illustrates a basic navigation setup using a @Router and @Navigator.\r\nFor a complete introduction and proper examples of Fuse's navigation system, see the [Navigation guide](/docs/navigation/navigation).\r\n\t\r\n\t<JavaScript>\r\n\t\tmodule.exports = {\r\n\t\t\tgotoFirst: function() { router.goto(\"firstPage\"); },\r\n\t\t\tgotoSecond: function() { router.goto(\"secondPage\"); }\r\n\t\t};\r\n\t</JavaScript>\r\n\r\n\t<Router ux:Name=\"router\" />\r\n\r\n\t<DockPanel>\r\n\t\t<Navigator DefaultPath=\"firstPage\">\r\n\t\t\t<Page ux:Template=\"firstPage\">\r\n\t\t\t\t<Text Alignment=\"Center\">This is the first page.</Text>\r\n\t\t\t</Page>\r\n\t\t\t<Page ux:Template=\"secondPage\">\r\n\t\t\t\t<Text Alignment=\"Center\">This is the second page.</Text>\r\n\t\t\t</Page>\r\n\t\t</Navigator>\r\n\t\t\r\n\t\t<Grid Dock=\"Bottom\" Columns=\"1*,1*\">\r\n\t\t\t<Button Text=\"First page\" Padding=\"20\" Clicked=\"{gotoFirst}\" />\r\n\t\t\t<Button Text=\"Second page\" Padding=\"20\" Clicked=\"{gotoSecond}\" />\r\n\t\t</Grid>\r\n\t</DockPanel>\r\n\t\r\n## Navigation Order\r\n\r\nThe `Navigator` uses discrete page progress changes while navigating. The active page will have progress `0`. If a page is pushed it will start at `1` and be switched immediately to `0`. The previously active page will become `-1`. A \"back\" operation will reverse the transition.\r\n\r\nOnly progresses `-1`, `0`, and `1` are used. Further distance is not calculated, nor are partial values possible.\r\n\r\nSee [Navigation Order](articles:navigation/navigationorder.md)"
            },
            "id": {
              "id": "fuse/controls/navigator",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigator",
              "href": "fuse/controls/navigator"
            },
            "titles": {
              "indexTitle": "Navigator",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Navigator"
            }
          },
          {
            "comment": {
              "brief": "Allows navigation through swipe gestures.",
              "full": "Allows navigation through swipe gestures.\n\nWe can control the behavior of a `NavigatorSwipe` using the `How` parameter, which controls what happens when the specified direction is swiped. `PushBookmark` and `GotoBookmark` both\nnavigate to the bookmark specified by the `Bookmark` property in their own way(same behavior as @(Router) ). `Back` navigates backwards, but should be used with caution,\nas it does not check if there is anything to go back to, meaning it can generate errors.\n\nIn the following example, we demonstrate `NavigatorSwipe` being used on both a `Navigator`, and navigated pages. Some navigation rules are set up:\n\n * Swiping up while on the blue panel will go to a bookmark pointing to the indigo page.\n * Swiping up while on the indigo page will navigate you to the red page.\n * Swiping down on any page will go back to the previous page.\n\n    <Panel>\n        <Router ux:Name=\"router\" />\n\n        <JavaScript>\n            router.bookmark({\n                name: \"indigo\",\n                path: [ \"indigoPanel\", { } ]\n            });\n            router.bookmark({\n                name: \"red\",\n                path: [ \"redPanel\", { } ]\n            });\n        </JavaScript>\n\n        <DockPanel ux:Class=\"NamedPanel\">\n            <string ux:Property=\"Title\" />\n            <Text Value=\"{Property Title}\" FontSize=\"30\" Alignment=\"TopCenter\" Margin=\"20\" />\n        </DockPanel>\n        <Navigator DefaultPath=\"bluePanel\">\n            <NamedPanel Title=\"Blue panel\" ux:Template=\"bluePanel\" Color=\"#2196F3\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"indigo\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NamedPanel Title=\"Red panel\" ux:Template=\"redPanel\" Color=\"#F44336\" />\n            <NamedPanel Title=\"Indigo panel\" ux:Template=\"indigoPanel\" Color=\"#3F51B5\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"red\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NavigatorSwipe How=\"Back\" Direction=\"Down\"/>\n        </Navigator>\n    </Panel>"
            },
            "id": {
              "id": "fuse/controls/navigatorswipe",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigatorswipe",
              "href": "fuse/controls/navigatorswipe"
            },
            "titles": {
              "indexTitle": "NavigatorSwipe",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorSwipe"
            }
          },
          {
            "comment": {
              "brief": "Deprecated, for backwards compatibility",
              "full": "Deprecated, for backwards compatibility"
            },
            "id": {
              "id": "fuse/controls/number",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/number",
              "href": "fuse/controls/number"
            },
            "titles": {
              "indexTitle": "Number",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Number"
            }
          },
          {
            "comment": {
              "brief": "Represents a page that participates in navigation.",
              "full": "Represents a page that participates in navigation.\n\nYou generally want to use this as the base class when implementing your page views, although any @Visual can be used.\n\nSee the [navigation guide](/docs/navigation/navigation) for an introductory guide to implementing navigation in your app.\n\n## Example\n\nThe following example illustrates subclassing @Page and using it in a @PageControl.\n\n    <Page ux:Class=\"MyPage\">\n        <Text Alignment=\"Center\">This is a page!</Text>\n    </Page>\n\n    <PageControl>\n        <MyPage />\n        <MyPage />\n    </PageControl>\n\n## Remarks\n\n@Page exposes a local @Uno.UX.Resource \"Title\", which can be set using the @Title property."
            },
            "id": {
              "id": "fuse/controls/page",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/page",
              "href": "fuse/controls/page"
            },
            "titles": {
              "indexTitle": "Page",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Page"
            }
          },
          {
            "comment": {
              "brief": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.",
              "full": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.\n\n# Examples\n\nThe following example illustrates the default behavior of `PageControl`, which is to slide the pages in response to swipe gestures:\n\n    <PageControl>\n        <Panel Background=\"Red\"/>\n        <Panel Background=\"Blue\"/>\n    </PageControl>\n\n`PageControl` is a router outlet, meaning that it can be controlled by a @Router.\nYou can disable this behavior by setting the @IsRouterOutlet property to `false`.\n\n    <JavaScript>\n        module.exports = {\n            gotoPage1: function() { router.goto(\"page1\"); },\n            gotoPage2: function() { router.goto(\"page2\"); },\n            gotoPage3: function() { router.goto(\"page3\"); }\n        };\n    </JavaScript>\n\n    <Router ux:Name=\"router\" />\n\n    <PageControl>\n        <Panel ux:Name=\"page1\" Color=\"#e74c3c\" Clicked=\"{gotoPage2}\" />\n        <Panel ux:Name=\"page2\" Color=\"#2ecc71\" Clicked=\"{gotoPage3}\" />\n        <Panel ux:Name=\"page3\" Color=\"#3498db\" Clicked=\"{gotoPage1}\" />\n    </PageControl>\n\nBy using data binding, you can set the currently active page by `Name` using the `Active` property.\nIn the following example, We have three pages and a button that returns the user to the first page.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            var currentPage = Observable(\"page1\");\n            function clickHandler() {\n                currentPage.value = \"page1\";\n            }\n            module.exports = {\n                clickHandler: clickHandler,\n                currentPage: currentPage\n            };\n        </JavaScript>\n        <PageControl Active=\"{currentPage}\">\n            <Panel Name=\"page1\" Background=\"Red\"/>\n            <Panel Name=\"page2\" Background=\"Green\"/>\n            <Panel Name=\"page3\" Background=\"Blue\"/>\n        </PageControl>\n        <Button Text=\"Home\" Clicked=\"{clickHandler}\" Dock=\"Bottom\"/>\n    </DockPanel>\n\nTake a look at the [Slides](/examples/page-control) example to see how this can be used in practice.\n\n## Navigation Order\n\nThe pages of a `PageControl` are ordered front to back, with the first child being in the front. Going forward means going towards the first child and going backwards means going towards the last child.\n\n`PageControl` uses continous navigation between pages (not discrete changes).\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
            },
            "id": {
              "id": "fuse/controls/pagecontrol",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pagecontrol",
              "href": "fuse/controls/pagecontrol"
            },
            "titles": {
              "indexTitle": "PageControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PageControl"
            }
          },
          {
            "comment": {
              "brief": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.",
              "full": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.\n\nThe @ActivatingAnimation animator can be used to animate a `Dot` when its corresponding page is active.\n\n# Example\n\nThe following example shows the use of `PageIndicator` to indicate the current progress in a @PageControl navigation, by scaling the rectangle indicator representing the current page by a `Factor` of 1.3.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            module.exports.pages = Observable(\"#FF0000\", \"#00FF00\", \"#0000FF\");\n        </JavaScript>\n        <PageControl ux:Name=\"nav\">\n            <Each Items=\"{pages}\">\n                <Page Color=\"data()\">\n\n                </Page>\n            </Each>\n        </PageControl>\n        <PageIndicator Dock=\"Bottom\" Navigation=\"nav\" Alignment=\"Center\">\n            <Rectangle ux:Template=\"Dot\" Width=\"30\" Height=\"30\" Margin=\"10\" Color=\"#555\">\n                <ActivatingAnimation>\n                    <Scale Factor=\"1.3\" />\n                </ActivatingAnimation>\n            </Rectangle>\n        </PageIndicator>\n    </DockPanel>"
            },
            "id": {
              "id": "fuse/controls/pageindicator",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pageindicator",
              "href": "fuse/controls/pageindicator"
            },
            "titles": {
              "indexTitle": "PageIndicator",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicator"
            }
          },
          {
            "id": {
              "id": "fuse/controls/pageindicatordot",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pageindicatordot",
              "href": "fuse/controls/pageindicatordot"
            },
            "titles": {
              "indexTitle": "PageIndicatorDot",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicatorDot"
            }
          },
          {
            "comment": {
              "brief": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.",
              "full": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.\n\n`<PageView />` is equivalent to the following:\n\n    <Navigator Transition=\"None\" GotoState=\"Unchanged\" />"
            },
            "id": {
              "id": "fuse/controls/pageview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pageview",
              "href": "fuse/controls/pageview"
            },
            "titles": {
              "indexTitle": "PageView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PageView"
            }
          },
          {
            "comment": {
              "brief": "Performs the default layout on the children, where all children get all available space.",
              "full": "Performs the default layout on the children, where all children get all available space.\n\nChildren of a Panel will by default fill its entire space. If a panel contains several children, it simply layers them on top of each other. Combining this behavior with @Alignment, @Margin and @Padding can be quite useful in many situations.\n\nPanels are assumed to be containers for other elements. Setting the `Color` property will therefore\nset the @Background property to a @SolidColor fill.\n\n**Note:** the element order in a Panel is the same as the layer order in popular graphics packages such as Photoshop; the layer that appears first in the UX-file will be layered on top of elements appearing later in the file.\n\n# Example\n\nThis example demonstrates a simple `Panel` with a couple of overlapping children, and many of the properties often used with `Panel` set:\n\n    <Panel Margin=\"10\" Padding=\"2,4,6,8\" Color=\"#444\">\n        <Text>This child will be drawn over the other child</Text>\n        <Rectangle Color=\"#eee\" />\n    </Panel>"
            },
            "id": {
              "id": "fuse/controls/panel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/panel",
              "href": "fuse/controls/panel"
            },
            "titles": {
              "indexTitle": "Panel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Panel"
            }
          },
          {
            "id": {
              "id": "fuse/controls/path",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/path",
              "href": "fuse/controls/path"
            },
            "titles": {
              "indexTitle": "Path",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Path"
            }
          },
          {
            "comment": {
              "brief": "The point at a normalized distance (0..1) along a path.",
              "full": "The point at a normalized distance (0..1) along a path.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/controls/pathpointatdistance",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathpointatdistance",
              "href": "fuse/controls/pathpointatdistance"
            },
            "titles": {
              "indexTitle": "PathPointAtDistance",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtDistance"
            }
          },
          {
            "comment": {
              "brief": "The point at a normalized time (0..1) along a path.",
              "full": "The point at a normalized time (0..1) along a path.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/controls/pathpointattime",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathpointattime",
              "href": "fuse/controls/pathpointattime"
            },
            "titles": {
              "indexTitle": "PathPointAtTime",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtTime"
            }
          },
          {
            "comment": {
              "brief": "The tangent angle at a normalized distance (0..1) along a path.",
              "full": "The tangent angle at a normalized distance (0..1) along a path.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/controls/pathtangentangleatdistance",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathtangentangleatdistance",
              "href": "fuse/controls/pathtangentangleatdistance"
            },
            "titles": {
              "indexTitle": "PathTangentAngleAtDistance",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtDistance"
            }
          },
          {
            "comment": {
              "brief": "The tangent angle (radians) at a normalized time (0..1) along a path.",
              "full": "The tangent angle (radians) at a normalized time (0..1) along a path.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/controls/pathtangentangleattime",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathtangentangleattime",
              "href": "fuse/controls/pathtangentangleattime"
            },
            "titles": {
              "indexTitle": "PathTangentAngleAtTime",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtTime"
            }
          },
          {
            "id": {
              "id": "fuse/controls/photocaptured",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photocaptured",
              "href": "fuse/controls/photocaptured"
            },
            "titles": {
              "indexTitle": "PhotoCaptured",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoCaptured"
            }
          },
          {
            "id": {
              "id": "fuse/controls/placeholder",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/placeholder",
              "href": "fuse/controls/placeholder"
            },
            "titles": {
              "indexTitle": "Placeholder",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Placeholder"
            }
          },
          {
            "comment": {
              "brief": "Baseclass for controls that contains a range value",
              "full": "Baseclass for controls that contains a range value\n\nThis is the baseclass for @Controls that hold a range value. For example @Slider.\n\nRangeControl is what you want to use if your component will hold a range value,\nRangeControl support for example @ProgressAnimation which makes it nice to use in\nanimation.\n\n## Example\n\n    <StackPanel>\n\n        <RangeControl ux:Class=\"CustomSlider\" Padding=\"16,2,16,2\" Margin=\"2\" >\n            <LinearRangeBehavior />\n            <Panel>\n                <Circle Anchor=\"50%,50%\" ux:Name=\"thumb\" Alignment=\"Left\" Color=\"#ffffffee\" Width=\"28\" Height=\"28\" />\n            </Panel>\n            <Rectangle Layer=\"Background\" Color=\"#aaaaaacc\" CornerRadius=\"45\" />\n            <ProgressAnimation>\n                <Move Target=\"thumb\" X=\"1\" RelativeTo=\"ParentSize\" />\n            </ProgressAnimation>\n        </RangeControl>\n\n        <CustomSlider />\n\n    </StackPanel>\n\n## Available RangeControl classes\n\n[subclass Fuse.Controls.RangeControl]"
            },
            "id": {
              "id": "fuse/controls/rangecontrol",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/rangecontrol",
              "href": "fuse/controls/rangecontrol"
            },
            "titles": {
              "indexTitle": "RangeControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl"
            }
          },
          {
            "id": {
              "id": "fuse/controls/rangecontrol2d",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/rangecontrol2d",
              "href": "fuse/controls/rangecontrol2d"
            },
            "titles": {
              "indexTitle": "RangeControl2D",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl2D"
            }
          },
          {
            "comment": {
              "brief": "Displays a rectangle.",
              "full": "Displays a rectangle.\n\nSetting the rectangle's `Color` property gives it a solid color fill:\n\n    <Rectangle Color=\"Blue\" Width=\"100\" Height=\"100\" />\n\nRectangles can have an arbitrary number of @Fills and @Strokes. Fills are of\ntype @Brush, and can be specified as tags inside the rectangle.\n\n> Note that by default, a Rectangle has no fills or strokes, making it\n> invisible unless you provide some or specify something.\n\n## Example\n\n    <Grid Alignment=\"Center\" Rows=\"100,100,100\" Columns=\"100\">\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <SolidColor Color=\"#a542db\" />\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n            </LinearGradient>\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n            <SolidColor Color=\"#3579e6\" />\n        </Rectangle>\n    </Grid>"
            },
            "id": {
              "id": "fuse/controls/rectangle",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/rectangle",
              "href": "fuse/controls/rectangle"
            },
            "titles": {
              "indexTitle": "Rectangle",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Rectangle"
            }
          },
          {
            "comment": {
              "brief": "Draws a polygon with a number of equal length sides.",
              "full": "Draws a polygon with a number of equal length sides."
            },
            "id": {
              "id": "fuse/controls/regularpolygon",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/regularpolygon",
              "href": "fuse/controls/regularpolygon"
            },
            "titles": {
              "indexTitle": "RegularPolygon",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RegularPolygon"
            }
          },
          {
            "comment": {
              "attributes": {
                "deprecated": true
              }
            },
            "id": {
              "id": "fuse/controls/rightframebackground",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/rightframebackground",
              "href": "fuse/controls/rightframebackground"
            },
            "titles": {
              "indexTitle": "RightFrameBackground",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RightFrameBackground"
            }
          },
          {
            "comment": {
              "brief": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.",
              "full": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
            },
            "id": {
              "id": "fuse/controls/safeedgepanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/safeedgepanel",
              "href": "fuse/controls/safeedgepanel"
            },
            "titles": {
              "indexTitle": "SafeEdgePanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.SafeEdgePanel"
            }
          },
          {
            "comment": {
              "brief": "Used to navigate contents that are larger than the available size.",
              "full": "Used to navigate contents that are larger than the available size.\n\n# Example\n\nThis example demonstrates the use of `ScrollView` by having it contain a `Panel` that would normally be too big to be viewed.\n\n    <ScrollView>\n        <Panel Width=\"2000\" Height=\"2000\" />\n    </ScrollView>\n\nYou may also constrain the directions the ScrollView is allowed to scroll in using the `AllowedScrollDirections` property.\n\n    <ScrollView AllowedScrollDirections=\"Horizontal\">\n        <!-- Contents -->\n    </ScrollView>\n\nBy default, ScrollView tries to take up the same amount of space as its content in the scrollable directions.\nHowever, when placed in a @Panel (or @DockPanel, @Grid, etc.), the size of the ScrollView itself will be limited to the size of its parent.\n\n> **Note**\n>\n> *@StackPanel* does not limit the size of its children, but rather lets them extend to whatever size they want to take up.\n> This is a problem with ScrollView, since it inherits the size of its content by default.\n> If we were to place a ScrollView inside a @StackPanel, the size of the ScrollView would extend beyond the bounds of the screen.\n> What we want instead is that only the ScrollView's *content* should extend to whatever size it needs, while the ScrollView itself is constrained to the bounds of its parent.\n>\n> This means that *a ScrollView inside a @StackPanel probably won't behave as you expect it to*.\n> Alternatives include using a different type of @Panel (e.g. a @DockPanel) as the parent of the ScrollView or specifying its size explicitly.\n\nThe `Alignment` of the child content influences the `MinScroll` and `MaxScroll` values as well as the starting `ScrollPosition`.\nFor example a `Bottom` aligned element will start with the bottom of the content visible (aligned to the bottom of the `ScrollView`) and `MinScroll` will be negative, as the overflow is to the top of the `ScrollView`.\n\n## LayoutMode\n\nBy default a `ScrollView` keeps a consistent `ScrollPosition` when the layout changes. This may result in jumping when content is added/removed.\n\nAn alternate mode `LayoutMode=\"PreserveVisual\"` instead attempts to maintain visual consistency when its children or parent layout is changed. It assumes it's immediate content is a container and looks at that container's children.  For example, a layout like this:\n\n    <ScrollView>\n        <StackPanel>\n            <Panel/>\n            <Panel/>\n        <StackPanel>\n    </ScrollView>\n\nVisuals without `LayoutRole=Standard` are not considered when retaining the visual consistency. The `LayoutMode` property can be used to adjust this behavior."
            },
            "id": {
              "id": "fuse/controls/scrollview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollview",
              "href": "fuse/controls/scrollview"
            },
            "titles": {
              "indexTitle": "ScrollView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollView"
            }
          },
          {
            "comment": {
              "brief": "A `ScrollView` is a control that allows scrolling over the content.\nIt only accepts a single child, from which the size of the scrollable area is calculated.\nThat child can be a single element or a UX tree of controls.",
              "full": "A `ScrollView` is a control that allows scrolling over the content.\nIt only accepts a single child, from which the size of the scrollable area is calculated.\nThat child can be a single element or a UX tree of controls.\n\nBy default, ScrollView tries to take up the same amount of space as its content in the scrollable direction.\nHowever, when placed in a @Panel (or @DockPanel, @Grid, etc.), the size of the ScrollView itself will be limited to the size of its parent.\n\n> *Note*\n>\n> @StackPanel does not limit the size of its children, but rather lets them extend to whatever size they want to take up.\n> This is a problem with ScrollView, since it by default inherits the size of its content.\n> If we were to place a ScrollView inside a StackPanel, the size of the ScrollView could extend beyond the bounds of the screen.\n> What we want instead is that only the ScrollView's *content* should extend to whatever size it needs, while the ScrollView itself is contained within the bounds of the screen.\n>\n> This means that **a ScrollView inside a @StackPanel probably won't behave as you expect it to**.\n> We recommend using a different type of @Panel (e.g. a @DockPanel) as the parent of the ScrollView or setting the ScrollView's height explicitly.\n\nThe `Alignment` of the child content influences the `MinScroll` and `MaxScroll` values as well as the starting `ScrollPosition`.\nFor example a `Bottom` aligned element will start with the bottom of the content visible (aligned to the bottom of the `ScrollView`) and `MinScroll` will be negative, as the overflow is to the top of the `ScrollView`.\n\n## LayoutMode\n\nBy default a `ScrollView` keeps a consistent `ScrollPosition` when the layout changes. This may result in jumping when content is added/removed.\n\nAn alternate mode `LayoutMode=\"PreserveVisual\"` instead attempts to maintain visual consistency when its children or parent layout is changed. It assumes it's immediate content is a container and looks at that container's children.  For example, a layout like this:\n\n    <ScrollView>\n        <StackPanel>\n            <Panel/>\n            <Panel/>\n        <StackPanel>\n    </ScrollView>\n\nVisuals without `LayoutRole=Standard` are not considered when retaining the visual consistency. The `LayoutMode` property can be used to adjust this behavior."
            },
            "id": {
              "id": "fuse/controls/scrollviewbase",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollviewbase",
              "href": "fuse/controls/scrollviewbase"
            },
            "titles": {
              "indexTitle": "ScrollViewBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewBase"
            }
          },
          {
            "comment": {
              "brief": "Paging and loading manager for a list of items. Allows a large, or infinite list, to be displayed in a `ScrollView`.",
              "full": "Paging and loading manager for a list of items. Allows a large, or infinite list, to be displayed in a `ScrollView`.\n\nThis controls the `Offset` and `Limit` properties of an `Each` inside a `ScrollView`. It limits the number of items displayed to improve performance.\n\nThe setup that works now is with a `StackPanel` (Horizontal or Vertical)\n\n    <ScrollView LayoutMode=\"PreserveVisual\">\n        <StackPanel>\n            <Each Items=\"{items}\" Reuse=\"Frame\" ux:Name=\"theEach\">\n                <Panel Color=\"#AAA\">\n                    <Text Value=\"{title}\"/>\n                </Panel>\n            </Each>\n        </StackPanel>\n\n        <ScrollViewPager Each=\"theEach\" ReachedEnd=\"{loadMore}\"/>\n    </ScrollView>\n\nIt's required to use `LayoutMode=\"PreserveVisual\"`, otherwise the scrolling will not function correctly. `Reuse=\"Frame\"` is optional but recommended: it improves performance by reusing objects.\n\n`ReachedEnd` is called when the true end of the list is reached and more data is required. It's actually called somewhat before the end is reached, thus allowing the loading process to start before the user reaches the end. There is also a `RechedStart` to allow loading when scrolling the opposite direction.  Neither of these callbacks are mandatory; `ScrollViewPager` is also helpful for displaying large static lists.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/controls/scrollviewpager",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollviewpager",
              "href": "fuse/controls/scrollviewpager"
            },
            "titles": {
              "indexTitle": "ScrollViewPager",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewPager"
            }
          },
          {
            "id": {
              "id": "fuse/controls/scrollviewpagerargs",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollviewpagerargs",
              "href": "fuse/controls/scrollviewpagerargs"
            },
            "titles": {
              "indexTitle": "ScrollViewPagerArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewPagerArgs"
            }
          },
          {
            "comment": {
              "brief": "Draws a shadow behind an element.",
              "full": "Draws a shadow behind an element.\n\n## Example\n\nThis example shows a rounded rectangle with a shadow that animates in size when pressed:\n\n    <Rectangle Width=\"100\" Height=\"100\" Color=\"Red\" CornerRadius=\"5\">\n        <Shadow ux:Name=\"RectangleShadow\" Size=\"10\" />\n        <Clicked>\n            <Change DurationBack=\"0.2\" RectangleShadow.Size=\"20\" />\n        </Clicked>\n    </Rectangle>"
            },
            "id": {
              "id": "fuse/controls/shadow",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/shadow",
              "href": "fuse/controls/shadow"
            },
            "titles": {
              "indexTitle": "Shadow",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Shadow"
            }
          },
          {
            "comment": {
              "brief": "Displays a slider",
              "full": "Displays a slider\n\nSlider is a @RangeControl with a simple slider look. This @Control\nwill get the platform native look on mobile export targets when\nused in a @NativeViewHost.\n\n## Example:\n\n    <StackPanel>\n        <Slider Value=\"50\" Minimum=\"0\" Maximum=\"100\" />\n        <NativeViewHost>\n            <Slider Value=\"0.25\" Minimum=\"0\" Maximum=\"1\" />\n        </NativeViewHost>\n    </StackPanel>"
            },
            "id": {
              "id": "fuse/controls/slider",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/slider",
              "href": "fuse/controls/slider"
            },
            "titles": {
              "indexTitle": "Slider",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Slider"
            }
          },
          {
            "comment": {
              "brief": "Stacks children vertically (default) or horizontally.",
              "full": "Stacks children vertically (default) or horizontally.\n\nThe default layout is a vertical stack, but one can use the Orientation property to specify that the stack should be laid out horizontally.\n\n    <StackPanel Orientation=\"Horizontal\">\n        ... elements ...\n    </StackPanel>\n\nYou can use the @ItemSpacing property to make some space between elements. It differs from setting Margin on each child, in that it only\nadjusts the space directly between the elements, not the space around each of them.\n\n## Example\n\nThe following example shows three Panels in a StackPanel, spaced using the ItemSpacing property:\n\n    <StackPanel ItemSpacing=\"20\">\n        <Panel Height=\"100\" Background=\"Red\"/>\n        <Panel Height=\"100\" Background=\"Green\"/>\n        <Panel Height=\"100\" Background=\"Blue\"/>\n    </StackPanel>"
            },
            "id": {
              "id": "fuse/controls/stackpanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/stackpanel",
              "href": "fuse/controls/stackpanel"
            },
            "titles": {
              "indexTitle": "StackPanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.StackPanel"
            }
          },
          {
            "comment": {
              "brief": "Displays a star",
              "full": "Displays a star\n\nStar is a @Shape and does not have fills, strokes and a size by default,\nyou must set this for it to be visible.\n\n## Example:\n\n    <Star Width=\"200\" Height=\"200\" Ratio=\"0.4\" >\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0ee\" />\n            <GradientStop Offset=\"1\" Color=\"#e0e\" />\n        </LinearGradient>\n    </Star>"
            },
            "id": {
              "id": "fuse/controls/star",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/star",
              "href": "fuse/controls/star"
            },
            "titles": {
              "indexTitle": "Star",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Star"
            }
          },
          {
            "comment": {
              "brief": "Compensates for space taken up by the status bar.",
              "full": "Compensates for space taken up by the status bar.\n\n`StatusBarBackground` will always have the same size as the status bar across all platforms and devices.\n\n## Example\n\nThe following example demonstrates how a `StatusBarBackground` can be docked inside a `DockPanel` to ensure the rest of the app's content (inside by the `Panel`) will be placed below the status bar.\n\n    <DockPanel>\n        <StatusBarBackground Dock=\"Top\"/>\n        <Panel>\n            <Text>This text will be below the status bar</Text>\n        </Panel>\n    </DockPanel>\n\nSee also @BottomBarBackground."
            },
            "id": {
              "id": "fuse/controls/statusbarbackground",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/statusbarbackground",
              "href": "fuse/controls/statusbarbackground"
            },
            "titles": {
              "indexTitle": "StatusBarBackground",
              "fullyQualifiedIndexTitle": "Fuse.Controls.StatusBarBackground"
            }
          },
          {
            "comment": {
              "brief": "Displays a switch",
              "full": "Displays a switch\n\nA switch implemented with @ToggleControl. The platform\nnative switch will be displayed if used in NativeViewHost.\n\n## Example\n\n    <StackPanel>\n        <Switch ux:Name=\"_sw\">\n            <WhileTrue Value=\"{ReadProperty _sw.Value}\">\n                <DebugAction Message=\"Switch.Value = true\" />\n            </WhileTrue>\n        </Switch>\n        <NativeViewHost>\n            <Switch />\n        </NativeViewHost>\n    </StackPanel>"
            },
            "id": {
              "id": "fuse/controls/switch",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/switch",
              "href": "fuse/controls/switch"
            },
            "titles": {
              "indexTitle": "Switch",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Switch"
            }
          },
          {
            "comment": {
              "brief": "Displays a block of text.",
              "full": "Displays a block of text.\n\nThe `Text` UI-control renders read-only text.\r\n\r\nYou can import a @Font from ttf files containing TrueType fonts. Because a font is typically referred to throughout an application, it is best to simply create a global resource for it using `ux:Global`. This way of importing the font ensures that the font is available throughout the whole project, and is only loaded once.\r\n\r\n> **Note**\r\n>\r\n> When running desktop preview, neither fallback fonts, colored glyphs, nor Unicode characters outside the basic multilingual plane are supported.\r\n>\r\n> Because of this, **certain text features (e.g. emoji) are not supported when running local preview.**\r\n> Do not be surprised if desktop rendering doesn't match device rendering 100%. This is an issue that is being worked on.\r\n\n# Examples \r\n\r\n## Text properties\r\n\r\n```\r\n<Text Color=\"#999\">Left</Text>\r\n<Text TextAlignment=\"Center\">Center</Text>\r\n<Text FontSize=\"24\" TextAlignment=\"Right\">Right</Text>\r\n<Text LineSpacing=\"10\">\r\nMultiple\r\nLines\r\n</Text>\r\n```\r\n\r\nIn this example, the first text element will be left aligned as this is the default, and have its color set to a medium light grey. The second text will be center aligned. The third will be right aligned and have a larger font. The fourth will span two lines with 10 points of space inbetween.\r\n\r\n## Custom text-components\r\n\r\n\t<App>\r\n\t\t<Font File=\"Roboto-Medium.ttf\" ux:Global=\"Medium\" />\r\n\t\t<Font File=\"Roboto-Light.ttf\" ux:Global=\"Light\" />\r\n\r\n\t\t<Text ux:Class=\"Light\" Font=\"Light\" />\r\n\t\t<Text ux:Class=\"Medium\" Font=\"Medium\" TextWrapping=\"Wrap\" />\r\n\t\t<Text ux:Class=\"Warning\" \r\n\t\t\tFont=\"Medium\" \r\n\t\t\tFontSize=\"42\"\r\n\t\t\tTextAlignment=\"Center\"\r\n\t\t\tColor=\"#f00\" />\r\n\t\t\t\r\n\t\t<StackPanel>\r\n\t\t\t<Light>Just some text</Light>\r\n\t\t\t<Warning>The robots are coming!</Warning>\r\n\t\t\t<Medium>This is just some medium text, but it will happily wrap when the edges of the screen is reached.</Medium>\r\n\t\t</StackPanel>\r\n\t</App>\r\n\r\nIn this example we load two fonts and create three different semantic classes, `Light`, `Medium` and `Warning`, combining some of the available `Text` properties. In this example, the fonts are located in the same directory as the relevant UX file. \r\n\n# Remarks\r\n\r\n`Text` is the primary control for displaying read-only text in apps."
            },
            "id": {
              "id": "fuse/controls/text",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/text",
              "href": "fuse/controls/text"
            },
            "titles": {
              "indexTitle": "Text",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Text"
            }
          },
          {
            "comment": {
              "brief": "Deprecated, for backwards compatibility",
              "full": "Deprecated, for backwards compatibility"
            },
            "id": {
              "id": "fuse/controls/textblock",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textblock",
              "href": "fuse/controls/textblock"
            },
            "titles": {
              "indexTitle": "TextBlock",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextBlock"
            }
          },
          {
            "comment": {
              "brief": "A @TextInput with a default look and feel.",
              "full": "A @TextInput with a default look and feel.\n\nIf you want to customize its appearance, you probably want to subclass @TextInput instead.\n\n## Example\n\n    <TextBox PlaceholderText=\"Search...\" />"
            },
            "id": {
              "id": "fuse/controls/textbox",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textbox",
              "href": "fuse/controls/textbox"
            },
            "titles": {
              "indexTitle": "TextBox",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextBox"
            }
          },
          {
            "comment": {
              "brief": "Single-line text input control.",
              "full": "Single-line text input control.\n\n`TextInput` is what you typically use or subclass when making input fields that only require a single line, like usernames, passwords, numbers, email, search fields, etc.\nIt has no appearance by default, which means it will be invisible until you give it a look or a text value.\n\n> If you want a text input control with a default appearance, see @TextBox.\n> If you want to accept multiple lines of text, use @TextView.\n\n## Examples\n\nThis example shows a basic TextInput with some style and a button to clear its contents.\n\n    <Panel>\n        <Button Alignment=\"CenterRight\" Text=\"Clear\" Margin=\"5\">\n            <Clicked>\n                <Set text.Value=\"\" />\n            </Clicked>\n        </Button>\n        <TextInput ux:Name=\"text\" PlaceholderText=\"Text field\" PlaceholderColor=\"#ccc\" Height=\"50\" Padding=\"5\" >\n            <Rectangle Layer=\"Background\">\n                <Stroke Width=\"2\" Brush=\"#BBB\" />\n            </Rectangle>\n        </TextInput>\n    </Panel>\n\nThe following example illustrates how you can subclass TextInput to achieve a consistent look throughout your app.\n\n    <!-- Subclassing TextInput -->\n    <TextInput ux:Class=\"MyTextInput\" FontSize=\"20\" PlaceholderColor=\"#ccc\" Padding=\"5\">\n        <Rectangle Layer=\"Background\" CornerRadius=\"3\">\n            <Stroke Width=\"1\" Color=\"#ccc\" />\n            <SolidColor Color=\"White\" />\n        </Rectangle>\n    </TextInput>\n\n    <!-- Example usage -->\n    <StackPanel Margin=\"10\" ItemSpacing=\"10\">\n        <MyTextInput PlaceholderText=\"Username\" />\n        <MyTextInput PlaceholderText=\"Password\" IsPassword=\"true\" />\n        <MyTextInput PlaceholderText=\"Repeat password\" IsPassword=\"true\" />\n        <MyTextInput />\n    </StackPanel>\n\nThis example shows how you can configure the layout and behavior of the on-screen keyboard when the TextInput is in focus using the @InputHint, @AutoCorrectHint, @AutoCapitalizationHint and @ActionStyle properties.\n\n    <TextInput PlaceholderText=\"Search...\" ActionStyle=\"Search\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"Email\" InputHint=\"Email\" ActionStyle=\"Send\" AutoCorrectHint=\"Disabled\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"http://\" InputHint=\"URL\" ActionStyle=\"Go\" AutoCorrectHint=\"Disabled\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"+47 123 456 789\" InputHint=\"Phone\" />\n    <TextInput PlaceholderText=\"1234\" InputHint=\"Number\" />\n    <TextInput PlaceholderText=\"1.234\" InputHint=\"Decimal\" />\n    <TextInput PlaceholderText=\"1\" InputHint=\"Integer\" />\n\nA common use-case is to have the TextInput raise an event when the user presses the return/search key on their virtual/physical keyboard.\nThe following example demonstrates using `ActionTriggered` to get an event when this happens:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var searchStr = Observable(\"Please enter a query...\");\n            var entryStr = Observable(\"\");\n\n            function onSearch(args) {\n                searchStr.value = \"You entered: \" + entryStr.value;\n            }\n\n            module.exports = {\n                searchStr: searchStr,\n                onSearch: onSearch,\n                entryStr: entryStr\n            };\n        </JavaScript>\n        <Text FontSize=\"20\">Search</Text>\n        <TextInput Value=\"{entryStr}\" PlaceholderText=\"Enter your query....\" ActionTriggered=\"{onSearch}\" />\n        <Text FontSize=\"20\" Value=\"{searchStr}\" />\n    </StackPanel>\n\nIn some cases, it might be undesirable for the virtual keyboard to disappear when a certain other ux element is pressed.\nThis can be done by passing a parent container to the `Focus.Delegate` property, causing the focus state to be delegated to the delegate target:\n\n    <DockPanel ux:Name=\"dockpanel\" IsFocusable=\"true\" Color=\"#fff\">\n        <TextInput Focus.Delegate=\"dockpanel\" />\n        <Panel Dock=\"Right\">\n            <Text Value=\"SEND\" Alignment=\"Center\" Margin=\"4,0\" Color=\"#fff\" />\n            <Rectangle CornerRadius=\"4\" Color=\"#000\" />\n        </Panel>\n    </DockPanel>"
            },
            "id": {
              "id": "fuse/controls/textinput",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinput",
              "href": "fuse/controls/textinput"
            },
            "titles": {
              "indexTitle": "TextInput",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInput"
            }
          },
          {
            "comment": {
              "brief": "Multi-line text editor.",
              "full": "Multi-line text editor.\n\nTextView provides features for editing and viewing large amounts of text.\n\n## Example\n\n    <TextView ux:Class=\"TextViewer\" TextWrapping=\"Wrap\" Padding=\"4\" Margin=\"4\" TextColor=\"#000\" CaretColor=\"#000\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        <Rectangle Layer=\"Background\" CornerRadius=\"4\">\n            <Stroke Color=\"#000\" />\n        </Rectangle>\n\n    </TextView>"
            },
            "id": {
              "id": "fuse/controls/textview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textview",
              "href": "fuse/controls/textview"
            },
            "titles": {
              "indexTitle": "TextView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextView"
            }
          },
          {
            "comment": {
              "brief": "Displays a component to select a time.",
              "full": "Displays a component to select a time.\n\nCurrently, the TimePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `TimePicker` can be used to select a specific time value. The type of its `Value` property is `Uno.DateTime`,\nwhich is marshalled automatically to and from the JavaScript `Date` type. This makes interaction between JavaScript\nand the `TimePicker` type seamless via databinding. If you plan to wrap a `TimePicker` in a UX component and use a\nUX property to hook up this value, the `Uno.DateTime` type should be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `TimePicker` will assume\nincoming values are relative to UTC, and truncate the date component to the Unix epoch (1 Jan 1970), effectively\nignoring the date component altogether. Similarly, values read from `TimePicker` properties will only consist of a time\ncomponent at on 1 Jan 1970. This makes values going to/from the `TimePicker` control easy to create and interpret\nconsistently, but also means that if a value with a date component other than the unix epoch is written to TimePicker`'s\n`Value` property, subsequent values read from the property may not match the written value, as the date component will\nhave been truncated.\n\nYou should avoid modifying the `TimePicker` values programmatically while the control has focus, as this is known to\nhave some issues on some Android devices (particularly ones which use the new `clock` appearance prior to Android 7).\n\n## Example\n\nThe following example shows how to set up a `TimePicker` object and set the value from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someTime = Observable(new Date(Date.parse(\"2007-02-14T12:34:56.000Z\")));\n\n            someTime.onValueChanged(module, function(date) {\n                console.log(\"someTime changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someTime: someTime,\n\n                timeToGetCracking: function() {\n                    someTime.value = new Date(Date.parse(\"1970-01-01T13:37:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <TimePicker Value=\"{someTime}\" Is24HourView=\"true\" />\n        </NativeViewHost>\n\n        <Button Text=\"Time to get cracking!\" Clicked=\"{timeToGetCracking}\" Margin=\"5\" />\n    </StackPanel>"
            },
            "id": {
              "id": "fuse/controls/timepicker",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/timepicker",
              "href": "fuse/controls/timepicker"
            },
            "titles": {
              "indexTitle": "TimePicker",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TimePicker"
            }
          },
          {
            "comment": {
              "brief": "Panel that contains a toggleable value",
              "full": "Panel that contains a toggleable value\n\nPanel type that is suitable for making toggleable semantic controls,\nlike Switch, CheckBox, ToggleButton etc.\n\n## Example\n\n    <ToggleControl ux:Class=\"CheckBox\" BoxSizing=\"FillAspect\" Aspect=\"1\" Margin=\"2\" HitTestMode=\"LocalBounds\" Width=\"48\" Height=\"48\">\n        <Rectangle Color=\"#999\" Margin=\"4\" ux:Name=\"_toggledBox\" Opacity=\"0\" />\n        <WhileTrue Value=\"{ReadProperty this.Value}\">\n            <Change _toggledBox.Opacity=\"1\" Duration=\"0.15\" Easing=\"CubicOut\" EasingBack=\"CubicIn\" />\n        </WhileTrue>\n        <Rectangle Layer=\"Background\">\n            <Stroke Color=\"#000\" />\n        </Rectangle>\n        <Clicked>\n            <Toggle Target=\"this\" />\n        </Clicked>\n    </ToggleControl>"
            },
            "id": {
              "id": "fuse/controls/togglecontrol",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/togglecontrol",
              "href": "fuse/controls/togglecontrol"
            },
            "titles": {
              "indexTitle": "ToggleControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ToggleControl"
            }
          },
          {
            "id": {
              "id": "fuse/controls/topframebackground",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/topframebackground",
              "href": "fuse/controls/topframebackground"
            },
            "titles": {
              "indexTitle": "TopFrameBackground",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TopFrameBackground"
            }
          },
          {
            "id": {
              "id": "fuse/controls/urlvideosource",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/urlvideosource",
              "href": "fuse/controls/urlvideosource"
            },
            "titles": {
              "indexTitle": "UrlVideoSource",
              "fullyQualifiedIndexTitle": "Fuse.Controls.UrlVideoSource"
            }
          },
          {
            "comment": {
              "brief": "Displays a video.",
              "full": "Displays a video.\n\n`Video` allows playback of video from file or stream through its properties `File` and `Url` respectively.\nIt is similar to Image; they share the properties `StretchMode`, `StretchDirection` and `ContentAlignment` and they work in the same way for both classes.\n\n## Useful properties\n\nVideo comes with a set of properties that can be used to configure it or control it, in addition to the properties shared with Image:\n\n- `Volume`: range from 0.0 to 1.0, default is 1.0\n- `Duration`: the duration of the video in seconds\n- `Position`: the current position of the video in seconds\n- `IsLooping`: a bool specifying if the video should loop or not, default is false\n\n## Useful triggers that can be used with `Video`\n\n    <Video>\n        <WhilePlaying />    <!-- Active while the video is playing -->\n        <WhilePaused />     <!-- Active while the video is paused -->\n        <WhileCompleted />  <!-- Active while the video is done playing -->\n        <WhileLoading />    <!-- Active while the video is loading -->\n        <WhileFailed />     <!-- Active if the video failed to load or an error occured -->\n    </Video>\n\n## Useful actions that can be used to control `Video`\n\nFuse comes with a set of actions that can be used to control video playback. They all have a common `Target` property that specifies which `Video` element they control.\n\n    <Pause />                   <!-- Pauses playback, leaving the current position as-is -->\n    <Stop />                    <!-- Stops playback and returns to the beginning of the video -->\n    <Resume />                  <!-- Resumes playback from the current position -->\n\n## Supported formats\n\n`Video` is implemented by using the videodecoder provided by the export target and therefore supports whatever the platform supports. Be aware that Windows, OS X, Android and iOS might not share support for some formats\n\n- [Android supported formats](https://developer.android.com/guide/appendix/media-formats.html)\n- [iOS and OS X supported formats (found under 'public.movie')](https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html)\n- [Windows supported formats](https://msdn.microsoft.com/en-us/library/cc189080%28v=vs.95%29.aspx?f=255&MSPPError=-2147217396)\n\n## Playing from the local file system\n\nVideos can also be played from the local file system of the device the app is running on. This can be done by prepending `file://` to the absolute path of the video:\n\n    <Video File=\"file:///data/data/com.fuse.app/video.mp4\" />\n\nNotice the three slashes at the start. This is due to unix file system paths always beginning with a `/`\n\n## Example\n\nThe following example shows how to play a video, display its playback progress using @ProgressAnimation, and pause/resume the video using the @Pause and @Resume animators.\n\n    <DockPanel>\n        <Video ux:Name=\"video\" Dock=\"Fill\" File=\"fuse_video.mp4\" IsLooping=\"true\" StretchMode=\"UniformToFill\">\n            <ProgressAnimation>\n                <Change progressBar.Width=\"100\" />\n            </ProgressAnimation>\n        </Video>\n        <Rectangle ux:Name=\"progressBar\" Dock=\"Bottom\" Fill=\"#f00\" Width=\"0%\" Height=\"10\" />\n        <Grid Dock=\"Bottom\" ColumnCount=\"2\" RowCount=\"1\">\n            <Button Text=\"Play\">\n                <Clicked>\n                    <Resume Target=\"video\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Pause\">\n                <Clicked>\n                    <Pause Target=\"video\" />\n                </Clicked>\n            </Button>\n        </Grid>\n    </DockPanel>"
            },
            "id": {
              "id": "fuse/controls/video",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/video",
              "href": "fuse/controls/video"
            },
            "titles": {
              "indexTitle": "Video",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Video"
            }
          },
          {
            "comment": {
              "brief": "Forces the content (by scaling) to fit inside the available space.",
              "full": "Forces the content (by scaling) to fit inside the available space.\n\n    <Viewbox>\n        <Rectangle Color=\"#808\" Width=\"200\" Height=\"100\" />\n    </Viewbox>\n\nThis will maintain its aspect ratio of 2:1 while stretching the Rectangle to be the size of the Viewbox.\n\nYou can set which directions you want the content to scale by setting the StretchDirection-property:\n\n* `Both` - Allow both up- and downscaling\n* `UpOnly` - Only upscale contents\n* `DownOnly` - Only downscale contents\n\nNote that any other setting than `DownOnly` might create pixel artifacts, as the Viewbox performs a bitmap stretch of its contents.\n\nYou can also set the `StretchMode` for the contents, which defaults to `Uniform`."
            },
            "id": {
              "id": "fuse/controls/viewbox",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/viewbox",
              "href": "fuse/controls/viewbox"
            },
            "titles": {
              "indexTitle": "Viewbox",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Viewbox"
            }
          },
          {
            "comment": {
              "brief": "Displays web content natively on android and iOS.",
              "full": "Displays web content natively on android and iOS.\n\nAs the WebView is native only, it needs to be contained in a @NativeViewHost.\n\nThe WebView can be used to present web content either over the http protocol or by loading HTML as a string, and hooks into some useful triggers for building a customized browsing experience, such as @PageBeginLoading, @WhilePageLoading and @PageLoaded.\nNavigation triggers like @GoBack and @GoForward are complemented with WebView-specific ones, like @Reload, @LoadUrl and @LoadHtml. It can also be used to drive a @ProgressAnimation.\n\nThe @EvaluateJS trigger is noteworthy, since it allows arbitrary JavaScript to be run in the WebView's context and the resulting data be fed back into Fuse:\n\n```XML\n<App Background=\"#333\">\n    <JavaScript>\n            module.exports = {\n                onPageLoaded : function(res) {\n                    console.log(\"WebView arrived at \"+ JSON.parse(res.json).url);\n            }\n        };\n    </JavaScript>\n    <DockPanel>\n        <StatusBarBackground Dock=\"Top\"/>\n        <NativeViewHost>\n            <WebView Dock=\"Fill\" Url=\"http://www.google.com\">\n                <PageLoaded>\n                    <EvaluateJS Handler=\"{onPageLoaded}\">\n                        var result = {\n                            url : document.location.href\n                        };\n                        return result;\n                    </EvaluateJS>\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n\n        <BottomBarBackground Dock=\"Bottom\" />\n    </DockPanel>\n</App>\n```\n\nWebViews can also be fed raw HTML to display by wrapping an @HTML node or via the @LoadHtml trigger action:\n\n`<LoadHtml TargetNode=\"myWebView\" BaseUrl=\"http://my.domain\" Source=\"{html}\"/>`"
            },
            "id": {
              "id": "fuse/controls/webview",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/webview",
              "href": "fuse/controls/webview"
            },
            "titles": {
              "indexTitle": "WebView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.WebView"
            }
          },
          {
            "comment": {
              "brief": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.",
              "full": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.\n\nYou can specify which direction the elements are laid out in by assigning the `FlowDirection` property.\nFlowDirection can either be LeftToRight or RightToLeft.\n\nThe following `WrapPanel` lays out its children horizontally from right to left.\n\n    <WrapPanel FlowDirection=\"RightToLeft\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nThe `Orientation` property can be used to make a vertical WrapPanel like so:\n\n    <WrapPanel Orientation=\"Vertical\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nYou can also specify the maximum area the `WrapPanel` will allocate an element by using the `ItemWidth` and `ItemHeight` properties."
            },
            "id": {
              "id": "fuse/controls/wrappanel",
              "parentId": "fuse/controls",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/wrappanel",
              "href": "fuse/controls/wrappanel"
            },
            "titles": {
              "indexTitle": "WrapPanel",
              "fullyQualifiedIndexTitle": "Fuse.Controls.WrapPanel"
            }
          }
        ]
      }
    ],
    "classes": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/controls/camerainfo",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/camerainfo",
              "href": "fuse/controls/camerainfo"
            },
            "titles": {
              "indexTitle": "CameraInfo",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CameraInfo"
            }
          },
          {
            "comment": {
              "brief": "This package provides a cross-platform abstraction over the native camera APIs on Android and iOS. In order to use this package you must add a reference to `Fuse.Controls.CameraView` in your `unoproj`.\r\n\r\nThe `CameraView` API is mostly exposed as a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) based API in JavaScript. Lets have a look at how to get up and running:\r\n\r\n```\r\n<DockPanel>\r\n    <NativeViewHost Dock=\"Fill\">\r\n        <!-- The size and aspect of the camera live preview\r\n             does not always match they size your cameraview\r\n             is given by layout. Set stretchmode to either Uniform\r\n             or Fill to deal with this\r\n         -->\r\n        <CameraView ux:Name=\"_cameraView\" StretchMode=\"Fill\" />\r\n        <JavaScript>\r\n            var Observable = require(\"FuseJS/Observable\");\r\n            var Camera = _cameraView;\r\n\r\n            // Observables for dealing with\r\n            // the different states of the camera\r\n            var captureMode = Observable();\r\n            var cameraFacing = Observable();\r\n            var flashMode = Observable();\r\n            var cameraReady = Observable(false);\r\n\r\n            // getCamereInfo will resolve when the camera is fully loaded\r\n            Camera.getCameraInfo()\r\n                .then(function(info) {\r\n                    captureMode.value = info[Camera.INFO_CAPTURE_MOE];\r\n                    cameraFacing.value = info[Camera.INFO_CAMERA_FACING];\r\n                    flashMode.value = info[Camera.INFO_FLASH_MODE];\r\n                    cameraReady.value = true;\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to get camera info: \" + error);\r\n                });\r\n        </JavaScript>\r\n    </NativeViewHost>\r\n</DockPanel>\r\n```\r\nThe `<CameraView />` tag is the UI element that will display a live preview from the camera. The camera is loading asynchronously and the `getCameraInfo` promise wont resolve until it is loaded. This can be used to reflect if the camera is ready and its initial state in your UI.\r\n\r\n### Capturing a photo\r\n\r\nTo capture a photo, make sure the camera is loaded as discussed above and set its capture mode to photo. If a photo capture was successful you will get an object representing the native photo result, you can call `save()` to store the photo on disk and get a filepath. A photo may require a lot of memory on your device, make sure to call `release()` on it when you are done using it. It is considered bad practice to keep many photo objects around as this can lead to out-of-memory crashes.\r\n\r\n```js\r\nCamera.setCaptureMode(Camera.CAPTURE_MODE_PHOTO)\r\n    .then(function(newCaptureMode) { /* ready to capture photo */ })\r\n    .catch(function(error) { /* failed */ });\r\n\r\nfunction capturePhoto() {\r\n    Camera.capturePhoto()\r\n        .then(function(photo) {\r\n            photo.save()\r\n                .then(function(filePath) {\r\n                    console.log(\"Photo saved to: \" + filePath);\r\n                    photo.release();\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to save photo: \" + error);\r\n                    photo.release();\r\n                });\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to capture photo: \" + error);\r\n        });\r\n}\r\n```\r\n\r\n### Recording video\r\n\r\nMake sure the capture mode is set to video. When you start a recording you get a session object which you need to hold onto. When you call `stop()` on the recording session you will get a file path to the result.\r\n\r\n```js\r\nCamera.setCaptureMode(Camera.CAPTURE_MODE_VIDEO)\r\n    .then(function(newCaptureMode) { /* ready to record video */ })\r\n    .catch(function(error) { /* failed */ });\r\n\r\nvar recordingSession = null;\r\n\r\nfunction startRecording() {\r\n    Camera.startRecording()\r\n        .then(function(session) {\r\n            console.log(\"Video recording started!\");\r\n            recordingSession = session;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to start recording: \" + error);\r\n        });\r\n}\r\n\r\nfunction stopRecording() {\r\n    if (session == null)\r\n        return;\r\n\r\n    session.stop()\r\n        .then(function(recording) {\r\n            console.log(\"Recording stopped, saved to: \" + recording.filePath());\r\n            session = null;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to stop recording: \" + error);\r\n            session = null;\r\n        });\r\n}\r\n```\r\n\r\n### Change camera facing\r\n\r\nYou can change the camera facing when the camera is not busy. For example, you cannot change camera facing while recording video or capturing a photo.\r\n\r\n```js\r\nvar currentFacing = Camera.CAMERA_FACING_BACK;\r\n\r\nfunction flipFacing() {\r\n    var facing = currentFacing == Camera.CAMERA_FACING_BACK\r\n        ? Camera.CAMERA_FACING_FRONT\r\n        : Camera.CAMERA_FACING_BACK;\r\n\r\n    Camera.setCameraFacing(facing)\r\n        .then(function(newCameraFacing) {\r\n            console.log(\"Camera facing set to: \" + newCameraFacing);\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to set camera facing: \" + error);\r\n        });\r\n}\r\n```\r\n\r\n\r\n### Set photo resolution (Android only)\r\n\r\nOn iOS you cannot specify an output resoltuion for captured photos, however on Android you must specify what resolution you want your photos captured in. There is no sensible default value, so if not explicilty set this abstraction will chose a resolution based on the current aspect ratio of your `<CameraView />`. But you have the option to set this yourself, although that code will only work on Android.\r\n\r\n```js\r\nCamera.getCameraInfo()\r\n    .then(function(info) {\r\n        // If we are running on android, the info object should contain\r\n        // an array of available resolutions for the current camera facing\r\n        if (Camera.INFO_PHOTO_RESOLUTIONS in info) {\r\n\r\n            var supportedResolutions = info[Camera.INFO_PHOTO_RESOLUTIONS];\r\n\r\n            // Make a function that picks the resolution you want\r\n            var resolution = pickResolution(supportedResolutions);\r\n\r\n            // Put your resolution in an object with the photo resolution key\r\n            var options = {};\r\n            options[Camera.OPTION_PHOTO_RESOLUTION] = resolution;\r\n\r\n            Camera.setPhotoOptions(options)\r\n                .then(function() { /* success */ })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to set photo options: \" + error);\r\n                });\r\n        }\r\n    });\r\n```",
              "full": "This package provides a cross-platform abstraction over the native camera APIs on Android and iOS. In order to use this package you must add a reference to `Fuse.Controls.CameraView` in your `unoproj`.\r\n\r\nThe `CameraView` API is mostly exposed as a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) based API in JavaScript. Lets have a look at how to get up and running:\r\n\r\n```\r\n<DockPanel>\r\n    <NativeViewHost Dock=\"Fill\">\r\n        <!-- The size and aspect of the camera live preview\r\n             does not always match they size your cameraview\r\n             is given by layout. Set stretchmode to either Uniform\r\n             or Fill to deal with this\r\n         -->\r\n        <CameraView ux:Name=\"_cameraView\" StretchMode=\"Fill\" />\r\n        <JavaScript>\r\n            var Observable = require(\"FuseJS/Observable\");\r\n            var Camera = _cameraView;\r\n\r\n            // Observables for dealing with\r\n            // the different states of the camera\r\n            var captureMode = Observable();\r\n            var cameraFacing = Observable();\r\n            var flashMode = Observable();\r\n            var cameraReady = Observable(false);\r\n\r\n            // getCamereInfo will resolve when the camera is fully loaded\r\n            Camera.getCameraInfo()\r\n                .then(function(info) {\r\n                    captureMode.value = info[Camera.INFO_CAPTURE_MOE];\r\n                    cameraFacing.value = info[Camera.INFO_CAMERA_FACING];\r\n                    flashMode.value = info[Camera.INFO_FLASH_MODE];\r\n                    cameraReady.value = true;\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to get camera info: \" + error);\r\n                });\r\n        </JavaScript>\r\n    </NativeViewHost>\r\n</DockPanel>\r\n```\r\nThe `<CameraView />` tag is the UI element that will display a live preview from the camera. The camera is loading asynchronously and the `getCameraInfo` promise wont resolve until it is loaded. This can be used to reflect if the camera is ready and its initial state in your UI.\r\n\r\n### Capturing a photo\r\n\r\nTo capture a photo, make sure the camera is loaded as discussed above and set its capture mode to photo. If a photo capture was successful you will get an object representing the native photo result, you can call `save()` to store the photo on disk and get a filepath. A photo may require a lot of memory on your device, make sure to call `release()` on it when you are done using it. It is considered bad practice to keep many photo objects around as this can lead to out-of-memory crashes.\r\n\r\n```js\r\nCamera.setCaptureMode(Camera.CAPTURE_MODE_PHOTO)\r\n    .then(function(newCaptureMode) { /* ready to capture photo */ })\r\n    .catch(function(error) { /* failed */ });\r\n\r\nfunction capturePhoto() {\r\n    Camera.capturePhoto()\r\n        .then(function(photo) {\r\n            photo.save()\r\n                .then(function(filePath) {\r\n                    console.log(\"Photo saved to: \" + filePath);\r\n                    photo.release();\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to save photo: \" + error);\r\n                    photo.release();\r\n                });\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to capture photo: \" + error);\r\n        });\r\n}\r\n```\r\n\r\n### Recording video\r\n\r\nMake sure the capture mode is set to video. When you start a recording you get a session object which you need to hold onto. When you call `stop()` on the recording session you will get a file path to the result.\r\n\r\n```js\r\nCamera.setCaptureMode(Camera.CAPTURE_MODE_VIDEO)\r\n    .then(function(newCaptureMode) { /* ready to record video */ })\r\n    .catch(function(error) { /* failed */ });\r\n\r\nvar recordingSession = null;\r\n\r\nfunction startRecording() {\r\n    Camera.startRecording()\r\n        .then(function(session) {\r\n            console.log(\"Video recording started!\");\r\n            recordingSession = session;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to start recording: \" + error);\r\n        });\r\n}\r\n\r\nfunction stopRecording() {\r\n    if (session == null)\r\n        return;\r\n\r\n    session.stop()\r\n        .then(function(recording) {\r\n            console.log(\"Recording stopped, saved to: \" + recording.filePath());\r\n            session = null;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to stop recording: \" + error);\r\n            session = null;\r\n        });\r\n}\r\n```\r\n\r\n### Change camera facing\r\n\r\nYou can change the camera facing when the camera is not busy. For example, you cannot change camera facing while recording video or capturing a photo.\r\n\r\n```js\r\nvar currentFacing = Camera.CAMERA_FACING_BACK;\r\n\r\nfunction flipFacing() {\r\n    var facing = currentFacing == Camera.CAMERA_FACING_BACK\r\n        ? Camera.CAMERA_FACING_FRONT\r\n        : Camera.CAMERA_FACING_BACK;\r\n\r\n    Camera.setCameraFacing(facing)\r\n        .then(function(newCameraFacing) {\r\n            console.log(\"Camera facing set to: \" + newCameraFacing);\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Failed to set camera facing: \" + error);\r\n        });\r\n}\r\n```\r\n\r\n\r\n### Set photo resolution (Android only)\r\n\r\nOn iOS you cannot specify an output resoltuion for captured photos, however on Android you must specify what resolution you want your photos captured in. There is no sensible default value, so if not explicilty set this abstraction will chose a resolution based on the current aspect ratio of your `<CameraView />`. But you have the option to set this yourself, although that code will only work on Android.\r\n\r\n```js\r\nCamera.getCameraInfo()\r\n    .then(function(info) {\r\n        // If we are running on android, the info object should contain\r\n        // an array of available resolutions for the current camera facing\r\n        if (Camera.INFO_PHOTO_RESOLUTIONS in info) {\r\n\r\n            var supportedResolutions = info[Camera.INFO_PHOTO_RESOLUTIONS];\r\n\r\n            // Make a function that picks the resolution you want\r\n            var resolution = pickResolution(supportedResolutions);\r\n\r\n            // Put your resolution in an object with the photo resolution key\r\n            var options = {};\r\n            options[Camera.OPTION_PHOTO_RESOLUTION] = resolution;\r\n\r\n            Camera.setPhotoOptions(options)\r\n                .then(function() { /* success */ })\r\n                .catch(function(error) {\r\n                    console.log(\"Failed to set photo options: \" + error);\r\n                });\r\n        }\r\n    });\r\n```"
            },
            "id": {
              "id": "fuse/controls/cameraviewbase",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/cameraviewbase",
              "href": "fuse/controls/cameraviewbase"
            },
            "titles": {
              "indexTitle": "CameraViewBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CameraViewBase"
            }
          },
          {
            "comment": {
              "brief": "Controls display a native control or graphics-based control based on context.",
              "full": "Controls display a native control or graphics-based control based on context.\n\nIn Fuse, UI Controls refers to the common components for interaction and data entry typically found in most operating systems and UI kits.\n\nFuse gives you access to two different technologies for displaying UI Controls:\n\n* Fully portable custom controls drawn by OpenGL (default, see @GraphicsView)\n* The real native controls provided from the OS itself (see @NativeViewHost)\n\nIn a native context (inside of a @NativeViewHost ), controls will display a native control, if supported for\nthe given control an platform. In other context, the graphics-based appearance will be used.\n\n## Available UI controls\n\n[subclass Fuse.Controls.Control]\n\n## Adding more UI controls\n\nYou can create your own UI controls in two ways:\n\n* Extend an existing control in UX markup using @ux:Class\n* Creating [custom UX wrappers for native controls](https://www.fusetools.com/docs/native-interop/native-ux-components)",
              "attributes": {
                "topic": "Controls"
              }
            },
            "id": {
              "id": "fuse/controls/control",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/control",
              "href": "fuse/controls/control"
            },
            "titles": {
              "indexTitle": "Control",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Control"
            }
          },
          {
            "id": {
              "id": "fuse/controls/datepickerbase",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/datepickerbase",
              "href": "fuse/controls/datepickerbase"
            },
            "titles": {
              "indexTitle": "DatePickerBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.DatePickerBase"
            }
          },
          {
            "id": {
              "id": "fuse/controls/ellipticalshape",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/ellipticalshape",
              "href": "fuse/controls/ellipticalshape"
            },
            "titles": {
              "indexTitle": "EllipticalShape",
              "fullyQualifiedIndexTitle": "Fuse.Controls.EllipticalShape"
            }
          },
          {
            "id": {
              "id": "fuse/controls/keyframeaccessors",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/keyframeaccessors",
              "href": "fuse/controls/keyframeaccessors"
            },
            "titles": {
              "indexTitle": "KeyframeAccessors",
              "fullyQualifiedIndexTitle": "Fuse.Controls.KeyframeAccessors"
            }
          },
          {
            "id": {
              "id": "fuse/controls/mapeventargs",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mapeventargs",
              "href": "fuse/controls/mapeventargs"
            },
            "titles": {
              "indexTitle": "MapEventArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapEventArgs"
            }
          },
          {
            "id": {
              "id": "fuse/controls/markereventargs",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/markereventargs",
              "href": "fuse/controls/markereventargs"
            },
            "titles": {
              "indexTitle": "MarkerEventArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MarkerEventArgs"
            }
          },
          {
            "comment": {
              "brief": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation.",
              "full": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation."
            },
            "id": {
              "id": "fuse/controls/navigationcontrol",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationcontrol",
              "href": "fuse/controls/navigationcontrol"
            },
            "titles": {
              "indexTitle": "NavigationControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControl"
            }
          },
          {
            "comment": {
              "brief": "Represents a reactive object-member look-up operation.",
              "full": "Represents a reactive object-member look-up operation."
            },
            "id": {
              "id": "fuse/controls/pathexpression",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathexpression",
              "href": "fuse/controls/pathexpression"
            },
            "titles": {
              "indexTitle": "PathExpression",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathExpression"
            }
          },
          {
            "id": {
              "id": "fuse/controls/photo",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photo",
              "href": "fuse/controls/photo"
            },
            "titles": {
              "indexTitle": "Photo",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Photo"
            }
          },
          {
            "id": {
              "id": "fuse/controls/photooption",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photooption",
              "href": "fuse/controls/photooption"
            },
            "titles": {
              "indexTitle": "PhotoOption",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoOption"
            }
          },
          {
            "comment": {
              "brief": "PhotoPreview",
              "full": "PhotoPreview\n\nThis element provides a fast path for previewing photos\ncaptured with `CameraView` inside a `NativeViewHost`.\n\nA `PhotoPreview` has to be connected to `CameraView`. Whenever\na photo is captured it will be loaded by the connected `PhotoPreview`\nimmediately. The `PhotoPreview` can also be connected to a\n`CameraView.PhotoLoaded` trigger which can be used to respond\nwhen the photo is ready.\n\nExample:\n\n    <NativeViewHost>\n        <Panel ux:Name=\"previewPanel\" Visibility=\"Hidden\">\n            <Button Text=\"DISMISS\" Alignment=\"Bottom\" Margin=\"10\">\n                <Clicked>\n                    <Set previewPanel.Visibility=\"Hidden\" />\n                    <Set cameraPanel.Visibility=\"Visible\" />\n                </Clicked>\n            </Button>\n            <PhotoPreview ux:Name=\"photoPreview\" CameraView=\"cameraView\" PreviewStretchMode=\"UniformToFill\" />\n        </Panel>\n        <Panel ux:Name=\"cameraPanel\">\n            <CameraView ux:Name=\"cameraView\" PreviewStretchMode=\"UniformToFill\" ClipToBounds=\"true\" />\n        </Panel>\n        <CameraView.PhotoLoaded PhotoPreview=\"photoPreview\">\n            <Set previewPanel.Visibility=\"Visible\" />\n            <Set cameraPanel.Visibility=\"Hidden\" />\n        </CameraView.PhotoLoaded>\n    </NativeViewHost>"
            },
            "id": {
              "id": "fuse/controls/photopreview",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photopreview",
              "href": "fuse/controls/photopreview"
            },
            "titles": {
              "indexTitle": "PhotoPreview",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreview"
            }
          },
          {
            "id": {
              "id": "fuse/controls/photopreviewbase",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photopreviewbase",
              "href": "fuse/controls/photopreviewbase"
            },
            "titles": {
              "indexTitle": "PhotoPreviewBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreviewBase"
            }
          },
          {
            "id": {
              "id": "fuse/controls/photoresolution",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/photoresolution",
              "href": "fuse/controls/photoresolution"
            },
            "titles": {
              "indexTitle": "PhotoResolution",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoResolution"
            }
          },
          {
            "id": {
              "id": "fuse/controls/recording",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/recording",
              "href": "fuse/controls/recording"
            },
            "titles": {
              "indexTitle": "Recording",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Recording"
            }
          },
          {
            "id": {
              "id": "fuse/controls/recordingsession",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/recordingsession",
              "href": "fuse/controls/recordingsession"
            },
            "titles": {
              "indexTitle": "RecordingSession",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RecordingSession"
            }
          },
          {
            "id": {
              "id": "fuse/controls/scrollpositionchangedargs",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollpositionchangedargs",
              "href": "fuse/controls/scrollpositionchangedargs"
            },
            "titles": {
              "indexTitle": "ScrollPositionChangedArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollPositionChangedArgs"
            }
          },
          {
            "id": {
              "id": "fuse/controls/segmentedshape",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/segmentedshape",
              "href": "fuse/controls/segmentedshape"
            },
            "titles": {
              "indexTitle": "SegmentedShape",
              "fullyQualifiedIndexTitle": "Fuse.Controls.SegmentedShape"
            }
          },
          {
            "comment": {
              "brief": "Displays a shape with fills and strokes",
              "full": "Displays a shape with fills and strokes\n\nShape is the baseclass for all shapes in fuse. A shape can have @Fills and @Strokes.\nBy default a shape does not have a size, fills or strokes. You must add some for it to be visible.\n\n## Example:\n\n    <Rectangle Width=\"200\" Height=\"100\" CornerRadius=\"16\">\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0ee\" />\n            <GradientStop Offset=\"1\" Color=\"#e0e\" />\n        </LinearGradient>\n        <Stroke Width=\"2\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Rectangle>\n\n    <Circle Width=\"200\" Height=\"100\" >\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#cf0\" />\n            <GradientStop Offset=\"1\" Color=\"#f40\" />\n        </LinearGradient>\n        <Stroke Width=\"1\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Circle>\n\n## Available Shape classes:\n\n[subclass Fuse.Controls.Shape]\n\n## Strokes\n\nUse only one of the methods of specifying strokes. Either list the desired `Stroke` objects as children, or provide a single object to the `Stroke` property, or specify one or more of `StrokeColor`, `StrokeWidth`, and `StrokeAlignment`.\n\nIt is undefined what happens if the different ways of specifying a stroke are combined."
            },
            "id": {
              "id": "fuse/controls/shape",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/shape",
              "href": "fuse/controls/shape"
            },
            "titles": {
              "indexTitle": "Shape",
              "fullyQualifiedIndexTitle": "Fuse.Controls.Shape"
            }
          },
          {
            "comment": {
              "brief": "Exposes the common interface for text controls.",
              "full": "Exposes the common interface for text controls.\n\nThis class is abstract. It retains the state for the common properties,\nand calls protected virtual OnSomethingChanged-methods that derived classes\ncan override to implement the desired behavior.\n\nImplements the general purpose low level text rendering mechanism that can be\ncontrolled in derived classes by overriding the @RenderValue and @RenderColor\nproperties. To disable the built-in rendering, return `null` from @RenderValue."
            },
            "id": {
              "id": "fuse/controls/textcontrol",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textcontrol",
              "href": "fuse/controls/textcontrol"
            },
            "titles": {
              "indexTitle": "TextControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextControl"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textinputactionargs",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputactionargs",
              "href": "fuse/controls/textinputactionargs"
            },
            "titles": {
              "indexTitle": "TextInputActionArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputActionArgs"
            }
          },
          {
            "comment": {
              "brief": "Base class for text editing controls.",
              "full": "Base class for text editing controls."
            },
            "id": {
              "id": "fuse/controls/textinputcontrol",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputcontrol",
              "href": "fuse/controls/textinputcontrol"
            },
            "titles": {
              "indexTitle": "TextInputControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputControl"
            }
          },
          {
            "comment": {
              "brief": "Thumbnail size hint in points",
              "full": "Thumbnail size hint in points\n\nUsed by `Photo` when saving as thumbnail. The implementation\nof `Photo` decides how to interpret this value."
            },
            "id": {
              "id": "fuse/controls/thumbnailsizehint",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/thumbnailsizehint",
              "href": "fuse/controls/thumbnailsizehint"
            },
            "titles": {
              "indexTitle": "ThumbnailSizeHint",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ThumbnailSizeHint"
            }
          },
          {
            "id": {
              "id": "fuse/controls/timepickerbase",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/timepickerbase",
              "href": "fuse/controls/timepickerbase"
            },
            "titles": {
              "indexTitle": "TimePickerBase",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TimePickerBase"
            }
          },
          {
            "id": {
              "id": "fuse/controls/urischemeeventargs",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/urischemeeventargs",
              "href": "fuse/controls/urischemeeventargs"
            },
            "titles": {
              "indexTitle": "URISchemeEventArgs",
              "fullyQualifiedIndexTitle": "Fuse.Controls.URISchemeEventArgs"
            }
          },
          {
            "id": {
              "id": "fuse/controls/videosource",
              "parentId": "fuse/controls",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/videosource",
              "href": "fuse/controls/videosource"
            },
            "titles": {
              "indexTitle": "VideoSource",
              "fullyQualifiedIndexTitle": "Fuse.Controls.VideoSource"
            }
          }
        ]
      }
    ],
    "delegates": [
      {
        "items": [
          {
            "parameters": [
              {
                "name": "sender",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "args",
                "href": "fuse/controls/mapeventargs",
                "title": "MapEventArgs",
                "fullyQualifiedTitle": "Fuse.Controls.MapEventArgs"
              }
            ],
            "id": {
              "id": "fuse/controls/mapeventhandler",
              "parentId": "fuse/controls",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mapeventhandler",
              "href": "fuse/controls/mapeventhandler"
            },
            "titles": {
              "indexTitle": "MapEventHandler (object, MapEventArgs)",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapEventHandler (object, Fuse.Controls.MapEventArgs)"
            }
          },
          {
            "parameters": [
              {
                "name": "latitude",
                "href": "uno/double",
                "title": "double",
                "fullyQualifiedTitle": "double"
              },
              {
                "name": "longitude",
                "href": "uno/double",
                "title": "double",
                "fullyQualifiedTitle": "double"
              }
            ],
            "id": {
              "id": "fuse/controls/mappositioneventhandler",
              "parentId": "fuse/controls",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mappositioneventhandler",
              "href": "fuse/controls/mappositioneventhandler"
            },
            "titles": {
              "indexTitle": "MapPositionEventHandler (double, double)",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapPositionEventHandler (double, double)"
            }
          },
          {
            "parameters": [
              {
                "name": "sender",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "args",
                "href": "fuse/controls/markereventargs",
                "title": "MarkerEventArgs",
                "fullyQualifiedTitle": "Fuse.Controls.MarkerEventArgs"
              }
            ],
            "id": {
              "id": "fuse/controls/markereventhandler",
              "parentId": "fuse/controls",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/markereventhandler",
              "href": "fuse/controls/markereventhandler"
            },
            "titles": {
              "indexTitle": "MarkerEventHandler (object, MarkerEventArgs)",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MarkerEventHandler (object, Fuse.Controls.MarkerEventArgs)"
            }
          },
          {
            "parameters": [
              {
                "name": "sender",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "args",
                "href": "fuse/controls/scrollpositionchangedargs",
                "title": "ScrollPositionChangedArgs",
                "fullyQualifiedTitle": "Fuse.Controls.ScrollPositionChangedArgs"
              }
            ],
            "id": {
              "id": "fuse/controls/scrollpositionchangedhandler",
              "parentId": "fuse/controls",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollpositionchangedhandler",
              "href": "fuse/controls/scrollpositionchangedhandler"
            },
            "titles": {
              "indexTitle": "ScrollPositionChangedHandler (object, ScrollPositionChangedArgs)",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollPositionChangedHandler (object, Fuse.Controls.ScrollPositionChangedArgs)"
            }
          },
          {
            "parameters": [
              {
                "name": "sender",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "args",
                "href": "fuse/controls/textinputactionargs",
                "title": "TextInputActionArgs",
                "fullyQualifiedTitle": "Fuse.Controls.TextInputActionArgs"
              }
            ],
            "id": {
              "id": "fuse/controls/textinputactionhandler",
              "parentId": "fuse/controls",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputactionhandler",
              "href": "fuse/controls/textinputactionhandler"
            },
            "titles": {
              "indexTitle": "TextInputActionHandler (object, TextInputActionArgs)",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputActionHandler (object, Fuse.Controls.TextInputActionArgs)"
            }
          }
        ]
      }
    ],
    "enums": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/controls/autocapitalizationhint",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/autocapitalizationhint",
              "href": "fuse/controls/autocapitalizationhint"
            },
            "titles": {
              "indexTitle": "AutoCapitalizationHint",
              "fullyQualifiedIndexTitle": "Fuse.Controls.AutoCapitalizationHint"
            }
          },
          {
            "id": {
              "id": "fuse/controls/autocorrecthint",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/autocorrecthint",
              "href": "fuse/controls/autocorrecthint"
            },
            "titles": {
              "indexTitle": "AutoCorrectHint",
              "fullyQualifiedIndexTitle": "Fuse.Controls.AutoCorrectHint"
            }
          },
          {
            "id": {
              "id": "fuse/controls/camerafacing",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/camerafacing",
              "href": "fuse/controls/camerafacing"
            },
            "titles": {
              "indexTitle": "CameraFacing",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CameraFacing"
            }
          },
          {
            "id": {
              "id": "fuse/controls/capturemode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/capturemode",
              "href": "fuse/controls/capturemode"
            },
            "titles": {
              "indexTitle": "CaptureMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CaptureMode"
            }
          },
          {
            "id": {
              "id": "fuse/controls/curveclose",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/curveclose",
              "href": "fuse/controls/curveclose"
            },
            "titles": {
              "indexTitle": "CurveClose",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CurveClose"
            }
          },
          {
            "id": {
              "id": "fuse/controls/curveextrude",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/curveextrude",
              "href": "fuse/controls/curveextrude"
            },
            "titles": {
              "indexTitle": "CurveExtrude",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CurveExtrude"
            }
          },
          {
            "id": {
              "id": "fuse/controls/curvestyle",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/curvestyle",
              "href": "fuse/controls/curvestyle"
            },
            "titles": {
              "indexTitle": "CurveStyle",
              "fullyQualifiedIndexTitle": "Fuse.Controls.CurveStyle"
            }
          },
          {
            "comment": {
              "brief": "Determines how the bounds of a path are calculated for fitting into an element.",
              "full": "Determines how the bounds of a path are calculated for fitting into an element."
            },
            "id": {
              "id": "fuse/controls/fitmode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/fitmode",
              "href": "fuse/controls/fitmode"
            },
            "titles": {
              "indexTitle": "FitMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.FitMode"
            }
          },
          {
            "id": {
              "id": "fuse/controls/flashmode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/flashmode",
              "href": "fuse/controls/flashmode"
            },
            "titles": {
              "indexTitle": "FlashMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.FlashMode"
            }
          },
          {
            "id": {
              "id": "fuse/controls/mapstyle",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/mapstyle",
              "href": "fuse/controls/mapstyle"
            },
            "titles": {
              "indexTitle": "MapStyle",
              "fullyQualifiedIndexTitle": "Fuse.Controls.MapStyle"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigationcontrolblockinput",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationcontrolblockinput",
              "href": "fuse/controls/navigationcontrolblockinput"
            },
            "titles": {
              "indexTitle": "NavigationControlBlockInput",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControlBlockInput"
            }
          },
          {
            "comment": {
              "brief": "Specifies what happens to pages which are not currently active.",
              "full": "Specifies what happens to pages which are not currently active."
            },
            "id": {
              "id": "fuse/controls/navigationcontrolinactivestate",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationcontrolinactivestate",
              "href": "fuse/controls/navigationcontrolinactivestate"
            },
            "titles": {
              "indexTitle": "NavigationControlInactiveState",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControlInactiveState"
            }
          },
          {
            "comment": {
              "brief": "Specifies what user interaction is provided.",
              "full": "Specifies what user interaction is provided."
            },
            "id": {
              "id": "fuse/controls/navigationcontrolinteraction",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationcontrolinteraction",
              "href": "fuse/controls/navigationcontrolinteraction"
            },
            "titles": {
              "indexTitle": "NavigationControlInteraction",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControlInteraction"
            }
          },
          {
            "comment": {
              "brief": "Specifies what transition is used to move between pages.",
              "full": "Specifies what transition is used to move between pages."
            },
            "id": {
              "id": "fuse/controls/navigationcontroltransition",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigationcontroltransition",
              "href": "fuse/controls/navigationcontroltransition"
            },
            "titles": {
              "indexTitle": "NavigationControlTransition",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControlTransition"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigatorgotostate",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigatorgotostate",
              "href": "fuse/controls/navigatorgotostate"
            },
            "titles": {
              "indexTitle": "NavigatorGotoState",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorGotoState"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigatorswipedirection",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigatorswipedirection",
              "href": "fuse/controls/navigatorswipedirection"
            },
            "titles": {
              "indexTitle": "NavigatorSwipeDirection",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorSwipeDirection"
            }
          },
          {
            "id": {
              "id": "fuse/controls/navigatorswipehow",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/navigatorswipehow",
              "href": "fuse/controls/navigatorswipehow"
            },
            "titles": {
              "indexTitle": "NavigatorSwipeHow",
              "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorSwipeHow"
            }
          },
          {
            "id": {
              "id": "fuse/controls/pagefreeze",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pagefreeze",
              "href": "fuse/controls/pagefreeze"
            },
            "titles": {
              "indexTitle": "PageFreeze",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PageFreeze"
            }
          },
          {
            "id": {
              "id": "fuse/controls/pagepreparebusy",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pagepreparebusy",
              "href": "fuse/controls/pagepreparebusy"
            },
            "titles": {
              "indexTitle": "PagePrepareBusy",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PagePrepareBusy"
            }
          },
          {
            "id": {
              "id": "fuse/controls/pathmeasuremode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/pathmeasuremode",
              "href": "fuse/controls/pathmeasuremode"
            },
            "titles": {
              "indexTitle": "PathMeasureMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PathMeasureMode"
            }
          },
          {
            "id": {
              "id": "fuse/controls/previewstretchmode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/previewstretchmode",
              "href": "fuse/controls/previewstretchmode"
            },
            "titles": {
              "indexTitle": "PreviewStretchMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.PreviewStretchMode"
            }
          },
          {
            "comment": {
              "brief": "Specifies how pages are removed from navigation (the child is actually removed from the UI tree).",
              "full": "Specifies how pages are removed from navigation (the child is actually removed from the UI tree)."
            },
            "id": {
              "id": "fuse/controls/removetype",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/removetype",
              "href": "fuse/controls/removetype"
            },
            "titles": {
              "indexTitle": "RemoveType",
              "fullyQualifiedIndexTitle": "Fuse.Controls.RemoveType"
            }
          },
          {
            "comment": {
              "brief": "In order of most restrictve (except Default) to least restrictive (which imply the less restrictve ones as well).",
              "full": "In order of most restrictve (except Default) to least restrictive (which imply the less restrictve ones as well)."
            },
            "id": {
              "id": "fuse/controls/reusetype",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/reusetype",
              "href": "fuse/controls/reusetype"
            },
            "titles": {
              "indexTitle": "ReuseType",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ReuseType"
            }
          },
          {
            "comment": {
              "brief": "The sides of the @SafeEdgePanel that get system padding.",
              "full": "The sides of the @SafeEdgePanel that get system padding."
            },
            "id": {
              "id": "fuse/controls/safeedgepaneledges",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/safeedgepaneledges",
              "href": "fuse/controls/safeedgepaneledges"
            },
            "titles": {
              "indexTitle": "SafeEdgePanelEdges",
              "fullyQualifiedIndexTitle": "Fuse.Controls.SafeEdgePanelEdges"
            }
          },
          {
            "comment": {
              "brief": "Specifies which scroll directions are allowed, or considered, in a control or gesture.",
              "full": "Specifies which scroll directions are allowed, or considered, in a control or gesture."
            },
            "id": {
              "id": "fuse/controls/scrolldirections",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrolldirections",
              "href": "fuse/controls/scrolldirections"
            },
            "titles": {
              "indexTitle": "ScrollDirections",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollDirections"
            }
          },
          {
            "comment": {
              "brief": "How is the ScrollPosition of a ScrollView modified when the layout changes.",
              "full": "How is the ScrollPosition of a ScrollView modified when the layout changes."
            },
            "id": {
              "id": "fuse/controls/scrollviewlayoutmode",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/scrollviewlayoutmode",
              "href": "fuse/controls/scrollviewlayoutmode"
            },
            "titles": {
              "indexTitle": "ScrollViewLayoutMode",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewLayoutMode"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textalignment",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textalignment",
              "href": "fuse/controls/textalignment"
            },
            "titles": {
              "indexTitle": "TextAlignment",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextAlignment"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textinputactionstyle",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputactionstyle",
              "href": "fuse/controls/textinputactionstyle"
            },
            "titles": {
              "indexTitle": "TextInputActionStyle",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputActionStyle"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textinputactiontype",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputactiontype",
              "href": "fuse/controls/textinputactiontype"
            },
            "titles": {
              "indexTitle": "TextInputActionType",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputActionType"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textinputhint",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textinputhint",
              "href": "fuse/controls/textinputhint"
            },
            "titles": {
              "indexTitle": "TextInputHint",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputHint"
            }
          },
          {
            "id": {
              "id": "fuse/controls/texttruncation",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/texttruncation",
              "href": "fuse/controls/texttruncation"
            },
            "titles": {
              "indexTitle": "TextTruncation",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextTruncation"
            }
          },
          {
            "id": {
              "id": "fuse/controls/textwrapping",
              "parentId": "fuse/controls",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/textwrapping",
              "href": "fuse/controls/textwrapping"
            },
            "titles": {
              "indexTitle": "TextWrapping",
              "fullyQualifiedIndexTitle": "Fuse.Controls.TextWrapping"
            }
          }
        ]
      }
    ],
    "interfaces": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/controls/iphotopreview",
              "parentId": "fuse/controls",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/iphotopreview",
              "href": "fuse/controls/iphotopreview"
            },
            "titles": {
              "indexTitle": "IPhotoPreview",
              "fullyQualifiedIndexTitle": "Fuse.Controls.IPhotoPreview"
            }
          },
          {
            "id": {
              "id": "fuse/controls/iphotopreviewhost",
              "parentId": "fuse/controls",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/iphotopreviewhost",
              "href": "fuse/controls/iphotopreviewhost"
            },
            "titles": {
              "indexTitle": "IPhotoPreviewHost",
              "fullyQualifiedIndexTitle": "Fuse.Controls.IPhotoPreviewHost"
            }
          },
          {
            "id": {
              "id": "fuse/controls/isourcereceiver",
              "parentId": "fuse/controls",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/isourcereceiver",
              "href": "fuse/controls/isourcereceiver"
            },
            "titles": {
              "indexTitle": "ISourceReceiver",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ISourceReceiver"
            }
          },
          {
            "comment": {
              "brief": "Allows TextEdit and TextInput to be treated the same in triggers.",
              "full": "Allows TextEdit and TextInput to be treated the same in triggers."
            },
            "id": {
              "id": "fuse/controls/itexteditcontrol",
              "parentId": "fuse/controls",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/itexteditcontrol",
              "href": "fuse/controls/itexteditcontrol"
            },
            "titles": {
              "indexTitle": "ITextEditControl",
              "fullyQualifiedIndexTitle": "Fuse.Controls.ITextEditControl"
            }
          },
          {
            "id": {
              "id": "fuse/controls/iwebview",
              "parentId": "fuse/controls",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/controls/iwebview",
              "href": "fuse/controls/iwebview"
            },
            "titles": {
              "indexTitle": "IWebView",
              "fullyQualifiedIndexTitle": "Fuse.Controls.IWebView"
            }
          }
        ]
      }
    ]
  }
}