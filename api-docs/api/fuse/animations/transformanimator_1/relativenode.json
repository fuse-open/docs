{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Animations",
      "namespaceUri": "fuse/animations",
      "packageName": "Fuse.Animations",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [],
    "returns": {
      "href": "fuse/visual",
      "title": "Visual",
      "fullyQualifiedTitle": "Fuse.Visual"
    },
    "uxProperties": {},
    "id": {
      "id": "fuse/animations/transformanimator_1/relativenode",
      "parentId": "fuse/animations/transformanimator_1",
      "type": "UxProperty",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/animations/transformanimator_1/relativenode",
      "href": "fuse/animations/transformanimator_1/relativenode"
    },
    "titles": {
      "pageTitle": "TransformAnimator.RelativeNode Property",
      "navigationTitle": "RelativeNode Property",
      "fullTitle": "Fuse.Animations.TransformAnimator`1.RelativeNode",
      "indexTitle": "RelativeNode",
      "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.RelativeNode"
    },
    "syntax": {
      "uno": "public Fuse.Visual RelativeNode { get; get; }"
    },
    "comment": {
      "brief": "Lets you move an element relative to another by specifyig a @Visual to which this transform is relative.",
      "full": "Lets you move an element relative to another by specifyig a @Visual to which this transform is relative.\n\nIf this proeprty is set you may use the following `RelativeTo` modes:\n\n* `Size`: Works the same way it would without `RelativeNode`, but measures the size of the `RelativeNode` instead.\n* `ParentSize`: Same as `Size` but measures the `RelativeNode`'s parent size instead.\n* `PositionOffset`: Moves the element to be in the same position as the element specified by `RelativeNode`.\n  The offset is measured as the difference in `ActualPosition` between the two elements.\n  Note that because `X`, `Y` and `Vector` will be interpreted as a factor, you need to specify `X=\"1\" Y=\"1\"` or `Vector=\"1\"` for anything to actually happen.\n* `TransformOriginOffset`: Works like `PositionOffset`, but instead measures the difference in `TransformOrigin`."
    }
  },
  "tableOfContents": {}
}