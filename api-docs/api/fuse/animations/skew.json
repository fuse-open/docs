{
  "entity": {
    "base": {
      "id": {
        "id": "fuse/animations/transformanimator_1",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/transformanimator_1",
        "href": "fuse/animations/transformanimator_1"
      },
      "titles": {
        "indexTitle": "TransformAnimator<Shear>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator<Fuse.Shear>"
      }
    },
    "location": {
      "namespaceTitle": "Fuse.Animations",
      "namespaceUri": "fuse/animations",
      "packageName": "Fuse.Animations",
      "packageVersion": "1.8.0-rc2"
    },
    "inheritance": {
      "root": {
        "uri": "uno/object",
        "title": "object",
        "children": [
          {
            "uri": "uno/ux/propertyobject",
            "title": "Uno.UX.PropertyObject",
            "children": [
              {
                "uri": "fuse/animations/animator",
                "title": "Fuse.Animations.Animator",
                "children": [
                  {
                    "uri": "fuse/animations/trackanimator",
                    "title": "Fuse.Animations.TrackAnimator",
                    "children": [
                      {
                        "uri": "fuse/animations/transformanimator_1",
                        "title": "Fuse.Animations.TransformAnimator<Fuse.Shear>",
                        "children": [
                          {
                            "uri": "fuse/animations/skew",
                            "title": "Fuse.Animations.Skew",
                            "children": [],
                            "isCurrent": true
                          }
                        ],
                        "isAncestor": true
                      }
                    ],
                    "isAncestor": true
                  }
                ],
                "isAncestor": true
              }
            ],
            "isAncestor": true
          }
        ],
        "isAncestor": true
      },
      "hasInheritance": true
    },
    "uxProperties": {
      "uxNamespaceTitle": "Fuse.Animations",
      "uxNamespaceUri": "fuse/animations",
      "uxName": "Skew"
    },
    "id": {
      "id": "fuse/animations/skew",
      "parentId": "fuse/animations",
      "type": "UxClass",
      "modifiers": [
        "public",
        "sealed"
      ]
    },
    "uri": {
      "idUri": "fuse/animations/skew",
      "href": "fuse/animations/skew"
    },
    "titles": {
      "pageTitle": "Skew Class",
      "navigationTitle": "Skew Class",
      "fullTitle": "Fuse.Animations.Skew",
      "indexTitle": "Skew",
      "fullyQualifiedIndexTitle": "Fuse.Animations.Skew"
    },
    "syntax": {
      "uno": "public sealed class Skew : Fuse.Animations.TransformAnimator<Fuse.Shear> {}",
      "ux": "<Skew />"
    },
    "comment": {
      "brief": "Allows you to animate a skew transform on an element.",
      "full": "Allows you to animate a skew transform on an element.\n\n# Example\nThis example animates a skew on a panel as it is being pressed\n\n    <Panel Background=\"#F00\">\n        <WhilePressed>\n            <Skew DegreesX=\"30\" Duration=\"0.4\"/>\n        </WhilePressed>\n    </Panel>"
    }
  },
  "tableOfContents": {
    "uxProperties": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/skew",
            "parentId": "fuse/animations",
            "type": "UxClass",
            "modifiers": [
              "public",
              "sealed"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/skew",
            "href": "fuse/animations/skew"
          },
          "titles": {
            "indexTitle": "Skew",
            "fullyQualifiedIndexTitle": "Fuse.Animations.Skew"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "Shear angle from X axis in degrees",
              "full": "Shear angle from X axis in degrees"
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/animations/skew/degreesx",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/degreesx",
              "href": "fuse/animations/skew/degreesx"
            },
            "titles": {
              "indexTitle": "DegreesX",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew.DegreesX"
            }
          },
          {
            "comment": {
              "brief": "Shear angle in Degrees.",
              "full": "Shear angle in Degrees."
            },
            "returns": {
              "href": "uno/float2",
              "title": "float2",
              "fullyQualifiedTitle": "float2"
            },
            "id": {
              "id": "fuse/animations/skew/degreesxy",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/degreesxy",
              "href": "fuse/animations/skew/degreesxy"
            },
            "titles": {
              "indexTitle": "DegreesXY",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew.DegreesXY"
            }
          },
          {
            "comment": {
              "brief": "Shear angle from Y axis in degrees",
              "full": "Shear angle from Y axis in degrees"
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/animations/skew/degreesy",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/degreesy",
              "href": "fuse/animations/skew/degreesy"
            },
            "titles": {
              "indexTitle": "DegreesY",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew.DegreesY"
            }
          },
          {
            "comment": {
              "brief": "Shear angle from the X and Y axes, in radians",
              "full": "Shear angle from the X and Y axes, in radians"
            },
            "returns": {
              "href": "uno/float2",
              "title": "float2",
              "fullyQualifiedTitle": "float2"
            },
            "id": {
              "id": "fuse/animations/skew/xy",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/xy",
              "href": "fuse/animations/skew/xy"
            },
            "titles": {
              "indexTitle": "XY",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew.XY"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/transformanimator_1",
            "parentId": "fuse/animations",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/transformanimator_1",
            "href": "fuse/animations/transformanimator_1"
          },
          "titles": {
            "indexTitle": "TransformAnimator<Shear>",
            "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator<Fuse.Shear>"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "When multiple transforms are applied they are applied in a priority order. This setting allows you to override the default priority to get a new order.",
              "full": "When multiple transforms are applied they are applied in a priority order. This setting allows you to override the default priority to get a new order."
            },
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/animations/skew/priority",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/priority",
              "href": "fuse/animations/transformanimator_1/priority",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Priority",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.Priority"
            }
          },
          {
            "comment": {
              "brief": "Lets you move an element relative to another by specifyig a @Visual to which this transform is relative.",
              "full": "Lets you move an element relative to another by specifyig a @Visual to which this transform is relative.\n\nIf this proeprty is set you may use the following `RelativeTo` modes:\n\n* `Size`: Works the same way it would without `RelativeNode`, but measures the size of the `RelativeNode` instead.\n* `ParentSize`: Same as `Size` but measures the `RelativeNode`'s parent size instead.\n* `PositionOffset`: Moves the element to be in the same position as the element specified by `RelativeNode`.\n  The offset is measured as the difference in `ActualPosition` between the two elements.\n  Note that because `X`, `Y` and `Vector` will be interpreted as a factor, you need to specify `X=\"1\" Y=\"1\"` or `Vector=\"1\"` for anything to actually happen.\n* `TransformOriginOffset`: Works like `PositionOffset`, but instead measures the difference in `TransformOrigin`."
            },
            "returns": {
              "href": "fuse/visual",
              "title": "Visual",
              "fullyQualifiedTitle": "Fuse.Visual"
            },
            "id": {
              "id": "fuse/animations/skew/relativenode",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/relativenode",
              "href": "fuse/animations/transformanimator_1/relativenode",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "RelativeNode",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.RelativeNode"
            }
          },
          {
            "comment": {
              "brief": "The visual that should be animated. If not set, the containing visual is animated by default.",
              "full": "The visual that should be animated. If not set, the containing visual is animated by default."
            },
            "returns": {
              "href": "fuse/visual",
              "title": "Visual",
              "fullyQualifiedTitle": "Fuse.Visual"
            },
            "id": {
              "id": "fuse/animations/skew/target",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/target",
              "href": "fuse/animations/transformanimator_1/target",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Target",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.Target"
            }
          },
          {
            "comment": {
              "brief": "The animation amount in the 3 different dimensions.",
              "full": "The animation amount in the 3 different dimensions.\n\nThe animation amount can also be set using the `X`, `Y` and `Z` properties, and other properties in different\nsubclasses.\n\nThis property has different defaults, means different things in different subclasses:\n\n* For @Move, this property denotes points, unless distorted by scaling. Default is 0,0,0.\n* For @Rotate, this property denotes radians. Default is 0,0,0.\n* For @Scale, this property denotes a scale factor, where 1,1,1 is unchanged scale. Default is 1,1,1."
            },
            "returns": {
              "href": "uno/float3",
              "title": "float3",
              "fullyQualifiedTitle": "float3"
            },
            "id": {
              "id": "fuse/animations/skew/vector",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/vector",
              "href": "fuse/animations/transformanimator_1/vector",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Vector",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.Vector"
            }
          },
          {
            "comment": {
              "brief": "The animation amount on the X-axis.",
              "full": "The animation amount on the X-axis.\n\nThe animation amount can also be set using the `Vector` property, and other properties in different\nsubclasses.\n\nThis property has different defaults, means different things in different subclasses:\n\n* For @Move, this property denotes points, unless distorted by scaling. Default is 0.\n* For @Rotate, this property denotes radians. Default is 0.\n* For @Scale, this property denotes a scale factor, where 1 is unchanged scale. Default is 1."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/animations/skew/x",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/x",
              "href": "fuse/animations/transformanimator_1/x",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "X",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.X"
            }
          },
          {
            "comment": {
              "brief": "The animation amount on the Y-axis.",
              "full": "The animation amount on the Y-axis.\n\nThe animation amount can also be set using the `Vector` property, and other properties in different\nsubclasses.\n\nThis property has different defaults, means different things in different subclasses:\n\n* For @Move, this property denotes points, unless distorted by scaling. Default is 0.\n* For @Rotate, this property denotes radians. Default is 0.\n* For @Scale, this property denotes a scale factor, where 1 is unchanged scale. Default is 1."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/animations/skew/y",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/y",
              "href": "fuse/animations/transformanimator_1/y",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Y",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.Y"
            }
          },
          {
            "comment": {
              "brief": "The animation amount on the Z-axis.",
              "full": "The animation amount on the Z-axis.\n\nThe animation amount can also be set using the `Vector` property, and other properties in different\nsubclasses.\n\nThis property has different defaults, means different things in different subclasses:\n\n* For @Move, this property denotes points, unless distorted by scaling. Default is 0.\n* For @Rotate, this property denotes radians. Default is 0.\n* For @Scale, this property denotes a scale factor, where 1 is unchanged scale. Default is 1."
            },
            "returns": {
              "href": "uno/float",
              "title": "float",
              "fullyQualifiedTitle": "float"
            },
            "id": {
              "id": "fuse/animations/skew/z",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/z",
              "href": "fuse/animations/transformanimator_1/z",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Z",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator.Z"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/trackanimator",
            "parentId": "fuse/animations",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/trackanimator",
            "href": "fuse/animations/trackanimator"
          },
          "titles": {
            "indexTitle": "TrackAnimator",
            "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "How long to wait, from the end of the backward timeline, before the animator starts changing the value.",
              "full": "How long to wait, from the end of the backward timeline, before the animator starts changing the value."
            },
            "returns": {
              "href": "uno/double",
              "title": "double",
              "fullyQualifiedTitle": "double"
            },
            "id": {
              "id": "fuse/animations/skew/delayback",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/delayback",
              "href": "fuse/animations/trackanimator/delayback",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "DelayBack",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.DelayBack"
            }
          },
          {
            "comment": {
              "brief": "For a continuous track: The duration of the change of the value.",
              "full": "For a continuous track: The duration of the change of the value."
            },
            "returns": {
              "href": "uno/double",
              "title": "double",
              "fullyQualifiedTitle": "double"
            },
            "id": {
              "id": "fuse/animations/skew/duration",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/duration",
              "href": "fuse/animations/trackanimator/duration",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Duration",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.Duration"
            }
          },
          {
            "comment": {
              "brief": "For a continuous track: The duraciton of the change of the value in the backward timeline.",
              "full": "For a continuous track: The duraciton of the change of the value in the backward timeline."
            },
            "returns": {
              "href": "uno/double",
              "title": "double",
              "fullyQualifiedTitle": "double"
            },
            "id": {
              "id": "fuse/animations/skew/durationback",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/durationback",
              "href": "fuse/animations/trackanimator/durationback",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "DurationBack",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.DurationBack"
            }
          },
          {
            "comment": {
              "brief": "For a continuous track: This specifies the transition easing between a source and target value.",
              "full": "For a continuous track: This specifies the transition easing between a source and target value."
            },
            "returns": {
              "href": "fuse/animations/easing",
              "title": "Easing",
              "fullyQualifiedTitle": "Fuse.Animations.Easing"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/animations/skew/easing",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/easing",
              "href": "fuse/animations/trackanimator/easing",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Easing",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.Easing"
            }
          },
          {
            "comment": {
              "brief": "For a continuous track: This specified the easing for the backward timeline.",
              "full": "For a continuous track: This specified the easing for the backward timeline."
            },
            "returns": {
              "href": "fuse/animations/easing",
              "title": "Easing",
              "fullyQualifiedTitle": "Fuse.Animations.Easing"
            },
            "id": {
              "id": "fuse/animations/skew/easingback",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/easingback",
              "href": "fuse/animations/trackanimator/easingback",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "EasingBack",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.EasingBack"
            }
          },
          {
            "comment": {
              "brief": "Specifies how the @Keyframes are interpolated.",
              "full": "Specifies how the @Keyframes are interpolated."
            },
            "returns": {
              "href": "fuse/animations/keyframeinterpolation",
              "title": "KeyframeInterpolation",
              "fullyQualifiedTitle": "Fuse.Animations.KeyframeInterpolation"
            },
            "id": {
              "id": "fuse/animations/skew/keyframeinterpolation",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/keyframeinterpolation",
              "href": "fuse/animations/trackanimator/keyframeinterpolation",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "KeyframeInterpolation",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.KeyframeInterpolation"
            }
          },
          {
            "comment": {
              "brief": "The list of keyframes for this animator.",
              "full": "The list of keyframes for this animator.\n\nIf no keyframes are specified, the animator simply uses the @Easing and @Duration properties to determine\ninterpolation between start and end values.\n\nFor the cases where we want to specify several steps for an animation, we can specify keyframes.\n\nExample:\n\n    <Move RelativeTo=\"ParentSize\">\n        <Keyframe X=\"10\" Time=\"0.5\"/>\n        <Keyframe X=\"15\" Time=\"1\"/>\n        <Keyframe X=\"5\" Time=\"2\"/>\n    </Move>\n\nThis @(Move) animator will first animate X to 10 over 0.5 second, then from 10 to 15 over 0.5 second. Finally, it will go from an\nX of 15 to 5 over 1 second.    Here is an example of using @Keyframes with a @Change animator:\n\n    <Page>\n        <SolidColor ux:Name=\"background\" Color=\"#f00\"/>\n        <ActivatingAnimation>\n            <Change Target=\"background.Color\">\n                <Keyframe Value=\"#0f0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#f00\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#ff0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#0ff\" TimeDelta=\"0.25\"/>\n            </Change>\n        </ActivatingAnimation>\n    </Page>\n\nThis time we use `TimeDelta` instead of time. With `TimeDelta` we can specify time as a relative term instead of absolute.\nThis means that the order of the @Keyframes matter, but it lets us reason about the keyframes in terms of\ntheir duration instead of their absolute time on the timeline.",
              "attributes": {
                "topic": "Keyframes"
              }
            },
            "returns": {
              "href": "uno/collections/ilist_1",
              "title": "IList<Keyframe>",
              "fullyQualifiedTitle": "Uno.Collections.IList<Fuse.Animations.Keyframe>"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/animations/skew/keyframes",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/keyframes",
              "href": "fuse/animations/trackanimator/keyframes",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Keyframes",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.Keyframes"
            }
          },
          {
            "returns": {
              "href": "fuse/animations/itrackprovider",
              "title": "ITrackProvider",
              "fullyQualifiedTitle": "Fuse.Animations.ITrackProvider"
            },
            "flags": {
              "uxContent": true
            },
            "id": {
              "id": "fuse/animations/skew/provider",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/provider",
              "href": "fuse/animations/trackanimator/provider",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Provider",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.Provider"
            }
          },
          {
            "comment": {
              "brief": "Allows the value set by this animator to be increased or decreased in significance (the default is 1).",
              "full": "Allows the value set by this animator to be increased or decreased in significance (the default is 1).\n\nThis is used for `MixOp=\"Weight\"`. When two animators are active the value of the target attribute will be the weighted average of the applied animators."
            },
            "returns": {
              "href": "uno/double",
              "title": "double",
              "fullyQualifiedTitle": "double"
            },
            "id": {
              "id": "fuse/animations/skew/weight",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/weight",
              "href": "fuse/animations/trackanimator/weight",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Weight",
              "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator.Weight"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/animator",
            "parentId": "fuse/animations",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/animator",
            "href": "fuse/animations/animator"
          },
          "titles": {
            "indexTitle": "Animator",
            "fullyQualifiedIndexTitle": "Fuse.Animations.Animator"
          }
        },
        "items": [
          {
            "comment": {
              "brief": "Seconds from the start of the trigger until this animator should play.",
              "full": "Seconds from the start of the trigger until this animator should play.\n\nNote that some triggers are often played backwards in some scenarios. Delay will then be measured\nfrom the end of the animation, to when this animator should be completed."
            },
            "returns": {
              "href": "uno/double",
              "title": "double",
              "fullyQualifiedTitle": "double"
            },
            "id": {
              "id": "fuse/animations/skew/delay",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/delay",
              "href": "fuse/animations/animator/delay",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Delay",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Animator.Delay"
            }
          },
          {
            "comment": {
              "brief": "How to mix this animator when there are multiple conflicting animators affecting the target.",
              "full": "How to mix this animator when there are multiple conflicting animators affecting the target."
            },
            "returns": {
              "href": "fuse/animations/mixop",
              "title": "MixOp",
              "fullyQualifiedTitle": "Fuse.Animations.MixOp"
            },
            "id": {
              "id": "fuse/animations/skew/mixop",
              "parentId": "fuse/animations/skew",
              "type": "UxProperty",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/mixop",
              "href": "fuse/animations/animator/mixop",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "MixOp",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Animator.MixOp"
            }
          }
        ]
      }
    ],
    "attachedUxProperties": [
      {
        "items": [
          {
            "comment": {
              "brief": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.",
              "full": "The `ux:Global` attribute creates a global resource that is accessible everywhere in UX markup.\n\nSee @Resources for more information.\n\nThe `ux:Global` attribute on an UX element creates a single object (singleton) that is globally available.\nUsing this attribute will prevent the object from being inserted by default the object at its defined location\nin the UX tree."
            },
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "parameters": [
              {
                "name": "obj",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "key",
                "href": "uno/string",
                "title": "string",
                "fullyQualifiedTitle": "string"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/resource_globalkey_setglobalkey_4c3ac72d",
              "parentId": "fuse/animations/skew",
              "type": "AttachedUxProperty",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/animations/skew/resource_globalkey_setglobalkey_4c3ac72d",
              "href": "uno/ux/resource/setglobalkey_4c3ac72d",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Resource.GlobalKey",
              "fullyQualifiedIndexTitle": "Resource.GlobalKey"
            }
          }
        ]
      }
    ],
    "constructors": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/skew",
            "parentId": "fuse/animations",
            "type": "UxClass",
            "modifiers": [
              "public",
              "sealed"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/skew",
            "href": "fuse/animations/skew"
          },
          "titles": {
            "indexTitle": "Skew",
            "fullyQualifiedIndexTitle": "Fuse.Animations.Skew"
          }
        },
        "items": [
          {
            "id": {
              "id": "fuse/animations/skew/_ctor",
              "parentId": "fuse/animations/skew",
              "type": "Constructor",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/_ctor",
              "href": "fuse/animations/skew/_ctor"
            },
            "titles": {
              "indexTitle": "Skew",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Skew.Skew"
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "declaredIn": {
          "id": {
            "id": "uno/ux/propertyobject",
            "parentId": "uno/ux",
            "type": "Class",
            "modifiers": [
              "public"
            ]
          },
          "uri": {
            "idUri": "uno/ux/propertyobject",
            "href": "uno/ux/propertyobject"
          },
          "titles": {
            "indexTitle": "PropertyObject",
            "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject"
          }
        },
        "items": [
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/addpropertylistener_496a874a",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/addpropertylistener_496a874a",
              "href": "uno/ux/propertyobject/addpropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "AddPropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.AddPropertyListener(Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/onpropertychanged_16d735f3",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "protected"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/onpropertychanged_16d735f3",
              "href": "uno/ux/propertyobject/onpropertychanged_16d735f3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector)"
            }
          },
          {
            "parameters": [
              {
                "name": "property",
                "href": "uno/ux/selector",
                "title": "Selector",
                "fullyQualifiedTitle": "Uno.UX.Selector"
              },
              {
                "name": "origin",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/onpropertychanged_6422fe92",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "protected",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/onpropertychanged_6422fe92",
              "href": "uno/ux/propertyobject/onpropertychanged_6422fe92",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "OnPropertyChanged(Selector, IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.OnPropertyChanged(Uno.UX.Selector, Uno.UX.IPropertyListener)"
            }
          },
          {
            "parameters": [
              {
                "name": "listener",
                "href": "uno/ux/ipropertylistener",
                "title": "IPropertyListener",
                "fullyQualifiedTitle": "Uno.UX.IPropertyListener"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/removepropertylistener_496a874a",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/removepropertylistener_496a874a",
              "href": "uno/ux/propertyobject/removepropertylistener_496a874a",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "RemovePropertyListener(IPropertyListener)",
              "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject.RemovePropertyListener(Uno.UX.IPropertyListener)"
            }
          }
        ]
      },
      {
        "declaredIn": {
          "id": {
            "id": "uno/object",
            "parentId": "uno",
            "type": "Class",
            "modifiers": [
              "public",
              "intrinsic"
            ]
          },
          "uri": {
            "idUri": "uno/object",
            "href": "uno/object"
          },
          "titles": {
            "indexTitle": "object",
            "fullyQualifiedIndexTitle": "object"
          }
        },
        "items": [
          {
            "returns": {
              "href": "uno/bool",
              "title": "bool",
              "fullyQualifiedTitle": "bool"
            },
            "parameters": [
              {
                "name": "o",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              }
            ],
            "id": {
              "id": "fuse/animations/skew/equals_a09c80e3",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/equals_a09c80e3",
              "href": "uno/object/equals_a09c80e3",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Equals(object)",
              "fullyQualifiedIndexTitle": "Uno.Object.Equals(object)"
            }
          },
          {
            "returns": {
              "href": "uno/int",
              "title": "int",
              "fullyQualifiedTitle": "int"
            },
            "id": {
              "id": "fuse/animations/skew/gethashcode",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/gethashcode",
              "href": "uno/object/gethashcode",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetHashCode",
              "fullyQualifiedIndexTitle": "Uno.Object.GetHashCode"
            }
          },
          {
            "returns": {
              "href": "uno/type",
              "title": "Type",
              "fullyQualifiedTitle": "Uno.Type"
            },
            "id": {
              "id": "fuse/animations/skew/gettype",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/gettype",
              "href": "uno/object/gettype",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "GetType",
              "fullyQualifiedIndexTitle": "Uno.Object.GetType"
            }
          },
          {
            "returns": {
              "href": "uno/string",
              "title": "string",
              "fullyQualifiedTitle": "string"
            },
            "id": {
              "id": "fuse/animations/skew/tostring",
              "parentId": "fuse/animations/skew",
              "type": "Method",
              "modifiers": [
                "public",
                "virtual"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/tostring",
              "href": "uno/object/tostring",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "ToString",
              "fullyQualifiedIndexTitle": "Uno.Object.ToString"
            }
          }
        ]
      }
    ],
    "fields": [
      {
        "declaredIn": {
          "id": {
            "id": "fuse/animations/animator",
            "parentId": "fuse/animations",
            "type": "Class",
            "modifiers": [
              "public",
              "abstract"
            ]
          },
          "uri": {
            "idUri": "fuse/animations/animator",
            "href": "fuse/animations/animator"
          },
          "titles": {
            "indexTitle": "Animator",
            "fullyQualifiedIndexTitle": "Fuse.Animations.Animator"
          }
        },
        "items": [
          {
            "returns": {
              "href": "fuse/animations/imixer",
              "title": "IMixer",
              "fullyQualifiedTitle": "Fuse.Animations.IMixer"
            },
            "id": {
              "id": "fuse/animations/skew/mixer",
              "parentId": "fuse/animations/skew",
              "type": "Field",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/animations/skew/mixer",
              "href": "fuse/animations/animator/mixer",
              "isVirtual": true
            },
            "titles": {
              "indexTitle": "Mixer",
              "fullyQualifiedIndexTitle": "Fuse.Animations.Animator.Mixer"
            }
          }
        ]
      }
    ]
  }
}