{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Input",
      "namespaceUri": "fuse/input",
      "packageName": "Fuse.Nodes",
      "packageVersion": "1.8.0-rc2"
    },
    "id": {
      "id": "fuse/input/gestures",
      "parentId": "fuse/input",
      "type": "Class",
      "modifiers": [
        "public",
        "static"
      ]
    },
    "uri": {
      "idUri": "fuse/input/gestures",
      "href": "fuse/input/gestures"
    },
    "titles": {
      "pageTitle": "Gestures Class",
      "navigationTitle": "Gestures Class",
      "fullTitle": "Fuse.Input.Gestures",
      "indexTitle": "Gestures",
      "fullyQualifiedIndexTitle": "Fuse.Input.Gestures"
    },
    "syntax": {
      "uno": "public static class Gestures {}"
    },
    "comment": {
      "brief": "This is currently a transition mechanism as we move pointer handling from direct handlers to a structured gesture system. This will be the preferred mechanism for handling nearly all pointer input.",
      "full": "This is currently a transition mechanism as we move pointer handling from direct handlers to a structured gesture system. This will be the preferred mechanism for handling nearly all pointer input.\n\nGestures are a unified way to handle pointer input from the user. They coordinate their activation and can resolve exclusions and priorities, ensuring the correct gesture is handled.\n\nThough the Gesture system is still considered experimental it is the preferred way of handling pointer input now. The API is relatively stable, but small adjustments might be made to handle more complex gestures.",
      "attributes": {
        "advanced": true,
        "experimental": true
      }
    }
  },
  "tableOfContents": {
    "methods": [
      {
        "items": [
          {
            "comment": {
              "brief": "Adds a gesture handler to the target.",
              "full": "Adds a gesture handler to the target.\n\nThis is typically done during rooting, but could happen after that time.",
              "attributes": {
                "returns": {
                  "text": "The bound gesture. Use `.Dispose` to remove the gesture support."
                }
              }
            },
            "returns": {
              "href": "fuse/input/gesture",
              "title": "Gesture",
              "fullyQualifiedTitle": "Fuse.Input.Gesture"
            },
            "parameters": [
              {
                "name": "handler",
                "href": "fuse/input/igesture",
                "title": "IGesture",
                "fullyQualifiedTitle": "Fuse.Input.IGesture"
              },
              {
                "name": "target",
                "href": "fuse/visual",
                "title": "Visual",
                "fullyQualifiedTitle": "Fuse.Visual"
              },
              {
                "name": "type",
                "href": "fuse/input/gesturetype",
                "title": "GestureType",
                "fullyQualifiedTitle": "Fuse.Input.GestureType"
              }
            ],
            "id": {
              "id": "fuse/input/gestures/add_b80cfbf0",
              "parentId": "fuse/input/gestures",
              "type": "Method",
              "modifiers": [
                "public",
                "static"
              ]
            },
            "uri": {
              "idUri": "fuse/input/gestures/add_b80cfbf0",
              "href": "fuse/input/gestures/add_b80cfbf0"
            },
            "titles": {
              "indexTitle": "Add(IGesture, Visual, GestureType)",
              "fullyQualifiedIndexTitle": "Fuse.Input.Gestures.Add(Fuse.Input.IGesture, Fuse.Visual, Fuse.Input.GestureType)"
            }
          }
        ]
      }
    ]
  }
}