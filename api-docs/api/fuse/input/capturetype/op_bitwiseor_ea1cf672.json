{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Input",
      "namespaceUri": "fuse/input",
      "packageName": "Fuse.Nodes",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [
      {
        "name": "left",
        "href": "fuse/input/capturetype",
        "title": "CaptureType",
        "fullyQualifiedTitle": "Fuse.Input.CaptureType"
      },
      {
        "name": "right",
        "href": "fuse/input/capturetype",
        "title": "CaptureType",
        "fullyQualifiedTitle": "Fuse.Input.CaptureType"
      }
    ],
    "returns": {
      "href": "fuse/input/capturetype",
      "title": "CaptureType",
      "fullyQualifiedTitle": "Fuse.Input.CaptureType"
    },
    "values": [
      {
        "uri": "fuse/input/capturetype/none",
        "title": "None",
        "comment": {
          "brief": "Multiple captures can be performed on a single point index. The type indicates the type of interest the capture has on the pointer events.",
          "full": "Multiple captures can be performed on a single point index. The type indicates the type of interest the capture has on the pointer events."
        }
      },
      {
        "uri": "fuse/input/capturetype/soft",
        "title": "Soft",
        "comment": {
          "brief": "A soft capture is a non-exclusive capture which allows any other soft captures to also exist. These are used when a gesture has not yet been fully identified (selection of gestures), or the capturer never needs to make visual feedback, or if the capturer doesn't care about losing the capture.",
          "full": "A soft capture is a non-exclusive capture which allows any other soft captures to also exist. These are used when a gesture has not yet been fully identified (selection of gestures), or the capturer never needs to make visual feedback, or if the capturer doesn't care about losing the capture.\n\nOnly one of Soft or Hard can be specified."
        }
      },
      {
        "uri": "fuse/input/capturetype/hard",
        "title": "Hard",
        "comment": {
          "brief": "A hard capture indicates a strong desire to be the exclusive recipient of pointer events. It likely means visual feedback is being tied to this capture, and tries to intentionally exclude other behaviors from also acting on the same feedback.",
          "full": "A hard capture indicates a strong desire to be the exclusive recipient of pointer events. It likely means visual feedback is being tied to this capture, and tries to intentionally exclude other behaviors from also acting on the same feedback."
        }
      },
      {
        "uri": "fuse/input/capturetype/children",
        "title": "Children",
        "comment": {
          "brief": "Targetting still looks at children. Normally the pointer input is directed strictly to the bottom most capture element. This allows capturing within part of the UI tree.",
          "full": "Targetting still looks at children. Normally the pointer input is directed strictly to the bottom most capture element. This allows capturing within part of the UI tree."
        }
      },
      {
        "uri": "fuse/input/capturetype/nodeshare",
        "title": "NodeShare",
        "comment": {
          "brief": "Multiple Soft/Hard-NodeShared captures can exist on the same node. Usually a hard capture will release all other captures. NodeShare allows captures on the same node to persist even in the presence of a hard capture.",
          "full": "Multiple Soft/Hard-NodeShared captures can exist on the same node. Usually a hard capture will release all other captures. NodeShare allows captures on the same node to persist even in the presence of a hard capture.\n\nThis is use for specific situations such as a SwipeGesture in a ScrollView where it makes sense that both gestures can handle the same input at the same time."
        }
      }
    ],
    "id": {
      "id": "fuse/input/capturetype/op_bitwiseor_ea1cf672",
      "parentId": "fuse/input/capturetype",
      "type": "Operator",
      "modifiers": [
        "public",
        "intrinsic",
        "static",
        "generated"
      ]
    },
    "uri": {
      "idUri": "fuse/input/capturetype/op_bitwiseor_ea1cf672",
      "href": "fuse/input/capturetype/op_bitwiseor_ea1cf672"
    },
    "titles": {
      "pageTitle": "CaptureType | CaptureType Operator",
      "navigationTitle": "CaptureType | CaptureType Operator",
      "fullTitle": "Fuse.Input.CaptureType.op_BitwiseOr",
      "indexTitle": "CaptureType | CaptureType",
      "fullyQualifiedIndexTitle": "Fuse.Input.CaptureType.CaptureType | CaptureType"
    },
    "syntax": {
      "uno": "public intrinsic static generated Fuse.Input.CaptureType op_BitwiseOr(Fuse.Input.CaptureType left, Fuse.Input.CaptureType right) {}"
    }
  },
  "tableOfContents": {}
}