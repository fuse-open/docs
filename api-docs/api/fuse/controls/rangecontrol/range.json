{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse.Controls",
      "namespaceUri": "fuse/controls",
      "packageName": "Fuse.Controls.Primitives",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [],
    "returns": {
      "href": "uno/float2",
      "title": "float2",
      "fullyQualifiedTitle": "float2"
    },
    "uxProperties": {},
    "id": {
      "id": "fuse/controls/rangecontrol/range",
      "parentId": "fuse/controls/rangecontrol",
      "type": "UxProperty",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/controls/rangecontrol/range",
      "href": "fuse/controls/rangecontrol/range"
    },
    "titles": {
      "pageTitle": "RangeControl.Range Property",
      "navigationTitle": "Range Property",
      "fullTitle": "Fuse.Controls.RangeControl.Range",
      "indexTitle": "Range",
      "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl.Range"
    },
    "syntax": {
      "uno": "public float2 Range { get; get; }"
    },
    "comment": {
      "brief": "The range of values covered by the control.",
      "full": "The range of values covered by the control.\n\nThis maps to `Minimum, Maximum`.\n\nThis range is not enforced by the `RangeControl`, the actual `Value` may be programmatically set outside the desired range. This is required to support bound values correctly where the order of  setting `Range` and `Value` is undefined.\n\nThe standard range behaviours @LinearRangeBehavior and @CircularRangeBehavior will clamp the user's selection to the range."
    }
  },
  "tableOfContents": {}
}