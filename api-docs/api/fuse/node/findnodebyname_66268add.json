{
  "entity": {
    "location": {
      "namespaceTitle": "Fuse",
      "namespaceUri": "fuse",
      "packageName": "Fuse.Nodes",
      "packageVersion": "1.8.0-rc2"
    },
    "parameters": [
      {
        "name": "name",
        "href": "uno/ux/selector",
        "title": "Selector",
        "fullyQualifiedTitle": "Uno.UX.Selector"
      },
      {
        "name": "acceptor",
        "href": "uno/predicate_1",
        "title": "Predicate<Node> (Node)",
        "fullyQualifiedTitle": "Uno.Predicate<Fuse.Node> (Fuse.Node)"
      }
    ],
    "returns": {
      "href": "fuse/node",
      "title": "Node",
      "fullyQualifiedTitle": "Fuse.Node"
    },
    "id": {
      "id": "fuse/node/findnodebyname_66268add",
      "parentId": "fuse/node",
      "type": "Method",
      "modifiers": [
        "public"
      ]
    },
    "uri": {
      "idUri": "fuse/node/findnodebyname_66268add",
      "href": "fuse/node/findnodebyname_66268add"
    },
    "titles": {
      "pageTitle": "Node.FindNodeByName Method (Selector, Predicate<Node> (Node))",
      "navigationTitle": "FindNodeByName Method (Selector, Predicate<Node> (Node))",
      "fullTitle": "Fuse.Node.FindNodeByName",
      "indexTitle": "FindNodeByName(Selector, Predicate<Node> (Node))",
      "fullyQualifiedIndexTitle": "Fuse.Node.FindNodeByName(Uno.UX.Selector, Uno.Predicate<Fuse.Node> (Fuse.Node))"
    },
    "syntax": {
      "uno": "public Fuse.Node FindNodeByName(Uno.UX.Selector name, Uno.Predicate<Fuse.Node> (Fuse.Node) acceptor = null) {}"
    },
    "comment": {
      "brief": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null.",
      "full": "Finds the first node with a given name that satisfies the given acceptor.\nThe serach algorithm works as follows: Nodes in the subtree are matched first, then\nit matches the nodes in the subtrees ofthe ancestor nodes by turn all the way to the\nroot. If no matching node is found, the function returns null."
    }
  },
  "tableOfContents": {}
}