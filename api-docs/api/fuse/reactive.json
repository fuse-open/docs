{
  "entity": {
    "id": {
      "id": "fuse/reactive",
      "parentId": "fuse",
      "type": "Namespace",
      "modifiers": []
    },
    "uri": {
      "idUri": "fuse/reactive",
      "href": "fuse/reactive"
    },
    "titles": {
      "pageTitle": "Fuse.Reactive Namespace",
      "navigationTitle": "Fuse.Reactive Namespace",
      "fullTitle": "Fuse.Reactive",
      "indexTitle": "Fuse.Reactive",
      "fullyQualifiedIndexTitle": "Fuse.Reactive"
    },
    "syntax": {
      "uno": "namespace Reactive {}"
    }
  },
  "tableOfContents": {
    "namespaces": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/reactive/fusejs",
              "parentId": "fuse/reactive",
              "type": "Namespace",
              "modifiers": []
            },
            "uri": {
              "idUri": "fuse/reactive/fusejs",
              "href": "fuse/reactive/fusejs"
            },
            "titles": {
              "indexTitle": "Fuse.Reactive.FuseJS",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.FuseJS"
            }
          }
        ]
      }
    ],
    "uxClasses": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/reactive/abs",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/abs",
              "href": "fuse/reactive/abs"
            },
            "titles": {
              "indexTitle": "Abs",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Abs"
            }
          },
          {
            "comment": {
              "brief": "The invserse trigonometric cosine of the input",
              "full": "The invserse trigonometric cosine of the input"
            },
            "id": {
              "id": "fuse/reactive/acos",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/acos",
              "href": "fuse/reactive/acos"
            },
            "titles": {
              "indexTitle": "Acos",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Acos"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/add",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/add",
              "href": "fuse/reactive/add"
            },
            "titles": {
              "indexTitle": "Add",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Add"
            }
          },
          {
            "comment": {
              "brief": "Alternate between true/false values for ranges of integers.",
              "full": "Alternate between true/false values for ranges of integers.\n\n    alternate( value, groupSize )\n\nInput values are rounded to the nearest integer.\n\nExample:\n\n    alternate( value, 3 )\n\nThis will yield true for values 0,1,2, false for 3,4,5, true for 6,7,8, false for 9,10,11, etc."
            },
            "id": {
              "id": "fuse/reactive/alternate",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/alternate",
              "href": "fuse/reactive/alternate"
            },
            "titles": {
              "indexTitle": "Alternate",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Alternate"
            }
          },
          {
            "comment": {
              "brief": "The invserse trigonometric sine of the input",
              "full": "The invserse trigonometric sine of the input"
            },
            "id": {
              "id": "fuse/reactive/asin",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/asin",
              "href": "fuse/reactive/asin"
            },
            "titles": {
              "indexTitle": "Asin",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Asin"
            }
          },
          {
            "comment": {
              "brief": "The invserse trigonometric tangent of the input",
              "full": "The invserse trigonometric tangent of the input"
            },
            "id": {
              "id": "fuse/reactive/atan",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/atan",
              "href": "fuse/reactive/atan"
            },
            "titles": {
              "indexTitle": "Atan",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan"
            }
          },
          {
            "comment": {
              "brief": "The invserse trigonometric tangent of the input components",
              "full": "The invserse trigonometric tangent of the input components\n\n    atan2(y, x)"
            },
            "id": {
              "id": "fuse/reactive/atan2",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/atan2",
              "href": "fuse/reactive/atan2"
            },
            "titles": {
              "indexTitle": "Atan2",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan2"
            }
          },
          {
            "comment": {
              "brief": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.",
              "full": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.\n\n    atanVector( v ) == atan2( v.Y, v.X )"
            },
            "id": {
              "id": "fuse/reactive/atanvector",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/atanvector",
              "href": "fuse/reactive/atanvector"
            },
            "titles": {
              "indexTitle": "AtanVector",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.AtanVector"
            }
          },
          {
            "comment": {
              "brief": "Specifies a constant and an associated visual tree that will be used with @Match.",
              "full": "Specifies a constant and an associated visual tree that will be used with @Match.\n\nSee @Match for more info."
            },
            "id": {
              "id": "fuse/reactive/case",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/case",
              "href": "fuse/reactive/case"
            },
            "titles": {
              "indexTitle": "Case",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Case"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/ceil",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ceil",
              "href": "fuse/reactive/ceil"
            },
            "titles": {
              "indexTitle": "Ceil",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Ceil"
            }
          },
          {
            "comment": {
              "brief": "Restricts the range of a value to between two numbers.",
              "full": "Restricts the range of a value to between two numbers.\n\n    clamp( value, min, max)\n\nReturns\n- `min` when `value < min`\n- `max` when `value > max`\n- `value` otherwise\n\nValue may be a 1-4 component value. `min` and `max` must both be a single value."
            },
            "id": {
              "id": "fuse/reactive/clamp",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/clamp",
              "href": "fuse/reactive/clamp"
            },
            "titles": {
              "indexTitle": "Clamp",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Clamp"
            }
          },
          {
            "comment": {
              "brief": "Captures the named UX objects and dependencies in the scope and sends them to a script\nevent when ready.",
              "full": "Captures the named UX objects and dependencies in the scope and sends them to a script\nevent when ready."
            },
            "id": {
              "id": "fuse/reactive/closure",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/closure",
              "href": "fuse/reactive/closure"
            },
            "titles": {
              "indexTitle": "Closure",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Closure"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/concat",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/concat",
              "href": "fuse/reactive/concat"
            },
            "titles": {
              "indexTitle": "Concat",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Concat"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/conditional",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/conditional",
              "href": "fuse/reactive/conditional"
            },
            "titles": {
              "indexTitle": "Conditional",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Conditional"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/constant",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/constant",
              "href": "fuse/reactive/constant"
            },
            "titles": {
              "indexTitle": "Constant",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Constant"
            }
          },
          {
            "comment": {
              "brief": "The trigonometric cosine of the input angle (in radians)",
              "full": "The trigonometric cosine of the input angle (in radians)"
            },
            "id": {
              "id": "fuse/reactive/cos",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/cos",
              "href": "fuse/reactive/cos"
            },
            "titles": {
              "indexTitle": "Cos",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Cos"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/data",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/data",
              "href": "fuse/reactive/data"
            },
            "titles": {
              "indexTitle": "Data",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Data"
            }
          },
          {
            "comment": {
              "brief": "Data bindings allow you to bind properties on UX markup objects to values coming from\na @JavaScript or other data context.",
              "full": "Data bindings allow you to bind properties on UX markup objects to values coming from\na @JavaScript or other data context.\n\nData bindings are most easily expressed in UX Markup using the `{expression}` syntax, where `expression` is\nthe binding path, like so:\n\n    <Text Value=\"{textKey}\" />\n\nData bindings can also be declared explicitly. Explicit databindings allow you\nto specify a default value that is used before the data binding is resolved:\n\n    <Panel ux:Name=\"panel1\" Width=\"100\" />\n    <DataBinding Target=\"panel1.Width\" Key=\"panelWidth\" />\n\n> Note: The expression passed to `Key` in explicit mode is by default in the data scope. To reference global names, escape it using `{= }`\n\nThe above code will use `100` as the default value for `panel1.Width` until the `panelWidth`\ndata is resolved.",
              "attributes": {
                "topic": "Data binding"
              }
            },
            "id": {
              "id": "fuse/reactive/databinding",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/databinding",
              "href": "fuse/reactive/databinding"
            },
            "titles": {
              "indexTitle": "DataBinding",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.DataBinding"
            }
          },
          {
            "comment": {
              "brief": "Binds to the prime context data of this node.",
              "full": "Binds to the prime context data of this node.\n\nBehaviors like @With, @Each, and @Instance introduce a prime data context for their children.  @JavaScript and the `Model` tag do not introduce a prime data context.\n\nUse `data()` when you wish to bind directly to the prime data context. This is for when your data contains a simple value rather than a data structure.\n\n    <JavaScript>\n        exports.items = Observable(1,2,3)\n    </JavaScript>\n    <Each Items=\"{items}\">\n        <Text Value=\"{= data() }\"/>\n    </Each>"
            },
            "id": {
              "id": "fuse/reactive/datafunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/datafunction",
              "href": "fuse/reactive/datafunction"
            },
            "titles": {
              "indexTitle": "DataFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.DataFunction"
            }
          },
          {
            "comment": {
              "brief": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.",
              "full": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.\n\nIn this example three different fonts are created as resources. The font is selected by name in the exported JavaScript items.\n\n    <Font File=\"../../Assets/fonts/Roboto-Bold.ttf\" ux:Key=\"Bold\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Regular.ttf\" ux:Key=\"Regular\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Italic.ttf\" ux:Key=\"Italic\"/>\n\n    <JavaScript>\n        exports.items = [\n            { font: \"Bold\" },\n            { font: \"Regular\" },\n            { font: \"Italic\" },\n        ]\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <Text Value=\"Sample Text\" Font=\"{DataToResource font}\"/>\n        </Each>\n    </StackPanel>\n\n`{DataToResource variableKey}` is similar to `{Resource key}`, except it allows a variable key name instead of a static one."
            },
            "id": {
              "id": "fuse/reactive/datatoresource",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/datatoresource",
              "href": "fuse/reactive/datatoresource"
            },
            "titles": {
              "indexTitle": "DataToResource",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.DataToResource"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/degreestoradians",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/degreestoradians",
              "href": "fuse/reactive/degreestoradians"
            },
            "titles": {
              "indexTitle": "DegreesToRadians",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.DegreesToRadians"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/divide",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/divide",
              "href": "fuse/reactive/divide"
            },
            "titles": {
              "indexTitle": "Divide",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Divide"
            }
          },
          {
            "comment": {
              "brief": "Displays a collection of objects using the given template(s) for each item.",
              "full": "Displays a collection of objects using the given template(s) for each item.\n\nThe children of an `Each` tag represent a template that will be \"projected\" for each item in the collection\nspecified by the `Items` property. The projected item then becomes the data context for that instance, so\ndata-binding can be specified relative to the item itself rather than having to index the collection explicitly.\n\nNote that each subtree projected by `Each` lives in its own scope.\nThis means that the children of an `Each` cannot be accessed from outside it.\nYou can, however, access nodes declared outside the `Each` from the inside.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            items: [\n                { name: \"Jake\", age: 24 },\n                { name: \"Julie\", age: 25 },\n                { name: \"Jerard\", age: 26 }\n            ]\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <StackPanel>\n                <Text Value=\"{name}\" />\n                <Text Value=\"{age}\" />\n            </StackPanel>\n        </Each>\n    </StackPanel>\n\n# Using `Each` with `ux:Template`\n\nIf you are using `Each` in a custom made component, you can increase the cusomizability of that component by allowing it to take in custom template objects which it can use instead of the default template the `Each` is using. To do this, you need to do two things:\n\n * Give the `TemplateSource` property an element that can recieve templates (in the case of custom made components, that would be your custom component's class)\n * Specify the template name `Each` will be looking for, using the property `TemplateKey`\n\nIf a template isn't specified, the child element of `Each` will be used as a de-facto template.\n\n## Example\nThe following example demonstrates passing custom templates into a class for an `Each` to use:\n\n    <StackPanel ux:Class=\"CoolRepeater\" Background=\"#FAD\">\n        <Each TemplateSource=\"this\" TemplateKey=\"Item\" Count=\"20\">\n            <Text>No template is given</Text>\n        </Each>\n    </StackPanel>\n    <CoolRepeater>\n        <Text ux:Template=\"Item\">Hello, world!</Text>\n    </CoolRepeater>\n\nNotice that if you remove the \"Hello, world!\" text that is our custom template, the `Each` will fall back to using the child as the template.\n\nIf you want the ability to control the template on a per-item basis, the similar `MatchKey`-property can be used:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        module.exports.posts = Observable(\n            {postType: \"text\", body: \"Lorem ipsum\", title: \"Hello, world\"},\n            {postType: \"quote\", quote: \"Stuff\", title: \"A quote\"}\n        );\n    </JavaScript>\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{posts}\" MatchKey=\"postType\">\n                <StackPanel ux:Template=\"text\" Height=\"100\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" />\n                    <Text FontSize=\"15\" Value=\"{body}\" TextWrapping=\"Wrap\" />\n                </StackPanel>\n                <DockPanel ux:Template=\"quote\" Height=\"200\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" Dock=\"Top\" />\n                    <Text FontSize=\"50\" Value=\"”\" Dock=\"Left\" />\n                    <Text FontSize=\"15\" Margin=\"10\" Value=\"{quote}\" />\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\n`MatchKey` works by looking for a property in the data context of each item from `Items`.\nThe value of this property is then used to determine the template to use for the current item.\nIn the above example, we store the template we want to use in the property `postType`, which will appear in the data context of each item being iterated."
            },
            "id": {
              "id": "fuse/reactive/each",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/each",
              "href": "fuse/reactive/each"
            },
            "titles": {
              "indexTitle": "Each",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/equal",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/equal",
              "href": "fuse/reactive/equal"
            },
            "titles": {
              "indexTitle": "Equal",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Equal"
            }
          },
          {
            "comment": {
              "brief": "True if the rounded value is even, false otherwise",
              "full": "True if the rounded value is even, false otherwise"
            },
            "id": {
              "id": "fuse/reactive/even",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/even",
              "href": "fuse/reactive/even"
            },
            "titles": {
              "indexTitle": "Even",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Even"
            }
          },
          {
            "comment": {
              "brief": "Event bindings allows binding events to to JavaScript functions.",
              "full": "Event bindings allows binding events to to JavaScript functions.\n\nYou can hook up event handlers to call JavaScript functions with similar syntax to data bindings:\n\n    <JavaScript>\n        module.exports = {\n            clickHandler: function (args) {\n                console.log(\"I was clicked: \" + JSON.stringify(args));\n            }\n        };\n    </JavaScript>\n    <Button Clicked=\"{clickHandler}\" Text=\"Click me!\" />\n\nFor more information, see @DataBinding.",
              "attributes": {
                "topic": "Event binding"
              }
            },
            "id": {
              "id": "fuse/reactive/eventbinding",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/eventbinding",
              "href": "fuse/reactive/eventbinding"
            },
            "titles": {
              "indexTitle": "EventBinding",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.EventBinding"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/exp",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/exp",
              "href": "fuse/reactive/exp"
            },
            "titles": {
              "indexTitle": "Exp",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/exp2",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/exp2",
              "href": "fuse/reactive/exp2"
            },
            "titles": {
              "indexTitle": "Exp2",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp2"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/floor",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/floor",
              "href": "fuse/reactive/floor"
            },
            "titles": {
              "indexTitle": "Floor",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Floor"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/fract",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/fract",
              "href": "fuse/reactive/fract"
            },
            "titles": {
              "indexTitle": "Fract",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Fract"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/greaterorequal",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/greaterorequal",
              "href": "fuse/reactive/greaterorequal"
            },
            "titles": {
              "indexTitle": "GreaterOrEqual",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterOrEqual"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/greaterthan",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/greaterthan",
              "href": "fuse/reactive/greaterthan"
            },
            "titles": {
              "indexTitle": "GreaterThan",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterThan"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/indexfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/indexfunction",
              "href": "fuse/reactive/indexfunction"
            },
            "titles": {
              "indexTitle": "IndexFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IndexFunction"
            }
          },
          {
            "comment": {
              "brief": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.",
              "full": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.\n\nYou may optionally assign an `Item` to the instance, making this function similar to `Each` with a single item."
            },
            "id": {
              "id": "fuse/reactive/instance",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instance",
              "href": "fuse/reactive/instance"
            },
            "titles": {
              "indexTitle": "Instance",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instance"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on an Android device",
              "full": "`true` if running on an Android device"
            },
            "id": {
              "id": "fuse/reactive/isandroidfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/isandroidfunction",
              "href": "fuse/reactive/isandroidfunction"
            },
            "titles": {
              "indexTitle": "IsAndroidFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsAndroidFunction"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on a desktop",
              "full": "`true` if running on a desktop"
            },
            "id": {
              "id": "fuse/reactive/isdesktopfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/isdesktopfunction",
              "href": "fuse/reactive/isdesktopfunction"
            },
            "titles": {
              "indexTitle": "IsDesktopFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDesktopFunction"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on an iOS device",
              "full": "`true` if running on an iOS device"
            },
            "id": {
              "id": "fuse/reactive/isiosfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/isiosfunction",
              "href": "fuse/reactive/isiosfunction"
            },
            "titles": {
              "indexTitle": "IsIOSFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsIOSFunction"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on an Mobile device",
              "full": "`true` if running on an Mobile device"
            },
            "id": {
              "id": "fuse/reactive/ismobilefunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ismobilefunction",
              "href": "fuse/reactive/ismobilefunction"
            },
            "titles": {
              "indexTitle": "IsMobileFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsMobileFunction"
            }
          },
          {
            "comment": {
              "brief": "Returns false if the value exists and is non-null, true otherwise.",
              "full": "Returns false if the value exists and is non-null, true otherwise.\n\nThis is the same condition used in the NullCoalesce operator:\n\n    expr ?? res\n\nIs the same as:\n\n    isNull(expr) ? res : expr"
            },
            "id": {
              "id": "fuse/reactive/isnull",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/isnull",
              "href": "fuse/reactive/isnull"
            },
            "titles": {
              "indexTitle": "IsNull",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsNull"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on OSX",
              "full": "`true` if running on OSX"
            },
            "id": {
              "id": "fuse/reactive/isosxfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/isosxfunction",
              "href": "fuse/reactive/isosxfunction"
            },
            "titles": {
              "indexTitle": "IsOSXFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsOSXFunction"
            }
          },
          {
            "comment": {
              "brief": "`true` if running on Windows",
              "full": "`true` if running on Windows"
            },
            "id": {
              "id": "fuse/reactive/iswindowsfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/iswindowsfunction",
              "href": "fuse/reactive/iswindowsfunction"
            },
            "titles": {
              "indexTitle": "IsWindowsFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IsWindowsFunction"
            }
          },
          {
            "comment": {
              "brief": "The `JavaScript` tag is used to run JavaScript and assigns its `module.exports` as data context for the parent visual.",
              "full": "The `JavaScript` tag is used to run JavaScript and assigns its `module.exports` as data context for the parent visual.\n\n**Note:** ECMAScript 5.1 is the only JavaScript version that is supported across all platforms.\nWhile newer JavaScript features might work on some devices, this can't be guaranteed (particularly for earlier iOS versions).\n\n\r\n\r\n\r\n## Getting started\r\n\r\nJavaScript can be used in UX markup through the `JavaScript` class, either by pointing to external JavaScript files, like this:\r\n\r\n\t<JavaScript File=\"SomeCode.js\" />\r\n\r\nOr by inlining the JavaScript code in the tag, like this:\r\n\r\n\t<JavaScript>\r\n\t\tconsole.log(\"Hello, FuseJS!\");\r\n\t</JavaScript>\r\n\r\n## About FuseJS \r\n\r\nFuseJS is a JavaScript framework for writing cross-platform mobile app business logic. It consists of a bunch of classes that covers\r\nthe basic functionality required for creating native mobile apps, as well as the @Observable class which lets you expose data to the UI in a functional reactive way.\r\n\r\n## Modules\r\n\r\nFuseJS implements the <a href=\"http://www.commonjs.org/\">CommonJS</a> module system. Each code file or inline snippet is a _module_.\r\n\r\nIn order to expose data and functions to other modules, one can add them to the `module.exports` object:\r\n\r\n\t<JavaScript>\r\n\t\tmodule.exports = {\r\n\t\t\texportedSymbol: \"Hello, rest of the world!\"\r\n\t\t};\r\n\t</JavaScript>\r\n\r\nFailing to export from modules will make it impossible to reach defined data inside the module:\r\n\r\n\t<JavaScript>\r\n\t\tvar data = [1, 2, 3];\r\n\t\tvar invisible = \"I'm invisible\";\r\n\r\n\t\tmodule.exports = {\r\n\t\t\tdata: data\r\n\t\t};\r\n\t</JavaScript>\r\n\r\nThis is good for hiding implementation details from other calling JavaScript modules and UX code.\r\n\r\n\r\n## Importing modules\r\n\r\nEach code file (or inline snippet) defines a module.\r\n\r\nYou can import JavaScript modules by their file name. To do this, make sure your JavaScript files are included in your .unoproj file as \"Bundle\" files:\r\n\r\n\r\n\t\"Includes\": [\r\n\t\t\"yourJavaScriptFile.js:Bundle\"\r\n\t\t..other files ..\r\n\t]\r\n\r\nor if you want to make all JavaScript files be includes as bundled files:\r\n\r\n\t\"Includes\": [\r\n\t\t\"**.js:Bundle\"\r\n\t]\r\n\r\nThen, you can require using the JavaScript file name:\r\n\r\n\tvar myModule = require('/someJavaScriptFile.js');\r\n\r\n\r\nNote that prefixing the file name with a \"/\" means that we are looking for the file relative to the project root directory. To name a file relative to the current file, prefix with \"./\". By omitting the prefixes, the file name is relative to the project root, or the global module it's in.\r\n\r\n\tvar relativeToProjectRoot = require('/SomeComponent');\r\n\tvar relativeFile = require('./MainView');\r\n\tvar relativeToRootOrGlobalModule = require('SomeOtherComponent.js');\r\n\r\n> Note that you may omit the .js file extension in the file name if you wish\r\n\r\n## Module instancing\r\n\r\nFuse's treatment of the `<JavaScript>` tag has some important differences from how modules work in the <a href=\"http://www.commonjs.org/\">CommonJS</a> module system.\r\n\r\nA module inside a `<JavaScript>` tag (or pointed to in an external file) will be instantiated once *for each time* the surrounding UX scope is instantiated. This means that if the `<JavaScript>` tag is part of a component, each instance of that component will initialise the code and have a separate set of the local variables and exports.\r\n\r\n### Cleaning up after modules\r\n\r\nIn Fuse, a JavaScript module can correspond to multiple module instances that get created and destroyed on the fly. If your module allocates resources that need manual cleanup, such as creating explicit `Observable` subscriptions, you can assign a handler to `module.disposed` and clean up after yourself there.\r\n\r\nExample:\r\n\r\n\tvar foo = getSomeGlobalObservable();\r\n\r\n\tfunction fooChanged() { ... }\r\n\t\r\n\tfoo.addSubscriber(fooChanged);\r\n\r\n\t...\r\n\r\n\tmodule.disposed = function () {\r\n\t\tfoo.removeSubscriber(fooChanged)\r\n\t}\r\n\r\n## Design and motivation\r\n\r\nThe key design goal of FuseJS is to keep your JavaScript code small, clean and only concerned with the practical functions of your application. Meanwhile\r\nall things related to UX, such as layout, data presentation, animation and gesture response, is left to declarative UX markup and native UI components.\r\n\r\nThe way Fuse separates JavaScript business logic from UX markup presentation has some clear benefits:\r\n\r\n* Performance - all the performance critical bits are handled in native code and based on native UI components.\r\n* Easy - declarative code is easy to read, write and understand even with limited programming knowledge\r\n* Less error prone - fewer states means fewer things can go wrong\r\n  * Visual tooling - UX markup can be edited by Fuse tools such as inspectors, timelines and generally cool drag & droppy stuff.\r\n\r\nNote that Fuse has tons of declarative APIs (designed for UX markup) that replace the need for controlling animation from JavaScript (i.e. imperatively).\r\n\r\nMany other JavaScript frameworks mix imperative UI code, animation and performance critical tasks into JavaScript, hence many people new to FuseJS tend to try\r\ndoing things this way in the beginning. While most of these things are technically possible in FuseJS, it is discouraged. We recommend taking some\r\ntime to study the Fuse examples to get a feel for the new way of doing things.\r\n\r\nPurifying your code by separating view and logic into UX markup and JavaScript can shrink your code base significantly, make it more maintainable, and allow\r\nmore effective collaboration between UX designers and developers.\r\n\r\nIf you need to write performance-critical business logic, we recommend doing that in native code or alternatively in Uno code instead of in JavaScript.",
              "attributes": {
                "topic": "JavaScript"
              }
            },
            "id": {
              "id": "fuse/reactive/javascript",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/javascript",
              "href": "fuse/reactive/javascript"
            },
            "titles": {
              "indexTitle": "JavaScript",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.JavaScript"
            }
          },
          {
            "comment": {
              "brief": "Calculates the linear interpolation between two values.",
              "full": "Calculates the linear interpolation between two values.\n\n    lerp( from, to, step )\n\nWhen step==0 the result is `from`, when step==1 the result is `to`. Partial values are linearly interpolated. Step values <0 and >1 are also supported.\n\nThe input supports a 1-4 component value for `from` and `to`. The result will be same size.\n`step` must always be a single value."
            },
            "id": {
              "id": "fuse/reactive/lerp",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/lerp",
              "href": "fuse/reactive/lerp"
            },
            "titles": {
              "indexTitle": "Lerp",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Lerp"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/lessorequal",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/lessorequal",
              "href": "fuse/reactive/lessorequal"
            },
            "titles": {
              "indexTitle": "LessOrEqual",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LessOrEqual"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/lessthan",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/lessthan",
              "href": "fuse/reactive/lessthan"
            },
            "titles": {
              "indexTitle": "LessThan",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LessThan"
            }
          },
          {
            "comment": {
              "brief": "Binds an expression or value to a name in the data context. This simplifies repeated calculations and allows introduction of new variables.",
              "full": "Binds an expression or value to a name in the data context. This simplifies repeated calculations and allows introduction of new variables.\n\nTo introduce a new value:\n\n    <Let ux:Name=\"a\" Value=\"5\"/>\n\nThe value is now part of the data context:\n\n    <Slider Value=\"{a}\"/>\n\nIt can also be accessed directly outside of the context:\n\n    <Slider Value=\"{Property a.Value}\"/>\n\nIf you are using an expression it's recommended now to use `Expression` instead of `Value`:\n\n    <Let ux:Name=\"p\" Expression=\"{pos} + 5\"/>\n\nThis ensures proper propagation of undefined values.  (This is part of the reason this is an experimental API, since we don't really want to distinguish between Expression and Value, but have no choice at the moment).\n\n## LetType\n\nIf you are creating a value of a specific type, and/or need to use `Change` or other animators, consider using one of the @LetType classes instead, such as @LetFloat or @LetString. They have a cleaner conversion mechanism, leading to fewer surprises.\n\nExperimental since there are some fine details about handling observables, nulls, and expressions that aren't quite defined and might subtlely alter the behaviour. For typical use-cases it should be okay though.",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/reactive/let",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/let",
              "href": "fuse/reactive/let"
            },
            "titles": {
              "indexTitle": "Let",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Let"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `bool` value.",
              "full": "A @LetType that specifies a `bool` value."
            },
            "id": {
              "id": "fuse/reactive/letbool",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letbool",
              "href": "fuse/reactive/letbool"
            },
            "titles": {
              "indexTitle": "LetBool",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetBool"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `float` value.",
              "full": "A @LetType that specifies a `float` value."
            },
            "id": {
              "id": "fuse/reactive/letfloat",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letfloat",
              "href": "fuse/reactive/letfloat"
            },
            "titles": {
              "indexTitle": "LetFloat",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `float2` value.",
              "full": "A @LetType that specifies a `float2` value."
            },
            "id": {
              "id": "fuse/reactive/letfloat2",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letfloat2",
              "href": "fuse/reactive/letfloat2"
            },
            "titles": {
              "indexTitle": "LetFloat2",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat2"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `float3` value.",
              "full": "A @LetType that specifies a `float3` value."
            },
            "id": {
              "id": "fuse/reactive/letfloat3",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letfloat3",
              "href": "fuse/reactive/letfloat3"
            },
            "titles": {
              "indexTitle": "LetFloat3",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat3"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `float4` value.",
              "full": "A @LetType that specifies a `float4` value."
            },
            "id": {
              "id": "fuse/reactive/letfloat4",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letfloat4",
              "href": "fuse/reactive/letfloat4"
            },
            "titles": {
              "indexTitle": "LetFloat4",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat4"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `Size` value.",
              "full": "A @LetType that specifies a `Size` value."
            },
            "id": {
              "id": "fuse/reactive/letsize",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letsize",
              "href": "fuse/reactive/letsize"
            },
            "titles": {
              "indexTitle": "LetSize",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetSize"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `Size2` value.",
              "full": "A @LetType that specifies a `Size2` value."
            },
            "id": {
              "id": "fuse/reactive/letsize2",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letsize2",
              "href": "fuse/reactive/letsize2"
            },
            "titles": {
              "indexTitle": "LetSize2",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetSize2"
            }
          },
          {
            "comment": {
              "brief": "A @LetType that specifies a `string` value.",
              "full": "A @LetType that specifies a `string` value."
            },
            "id": {
              "id": "fuse/reactive/letstring",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letstring",
              "href": "fuse/reactive/letstring"
            },
            "titles": {
              "indexTitle": "LetString",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetString"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/log",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/log",
              "href": "fuse/reactive/log"
            },
            "titles": {
              "indexTitle": "Log",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Log"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/log2",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/log2",
              "href": "fuse/reactive/log2"
            },
            "titles": {
              "indexTitle": "Log2",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Log2"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/logicaland",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/logicaland",
              "href": "fuse/reactive/logicaland"
            },
            "titles": {
              "indexTitle": "LogicalAnd",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalAnd"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/logicalnot",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/logicalnot",
              "href": "fuse/reactive/logicalnot"
            },
            "titles": {
              "indexTitle": "LogicalNot",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalNot"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/logicalor",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/logicalor",
              "href": "fuse/reactive/logicalor"
            },
            "titles": {
              "indexTitle": "LogicalOr",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalOr"
            }
          },
          {
            "comment": {
              "brief": "Represents a reactive look-up operation, with a computed index (number) or key (string).",
              "full": "Represents a reactive look-up operation, with a computed index (number) or key (string).\n\nIndex can be either a number (for IArray lookups) or a string (for IObject lookups).\n\nDiagnostic erros are reported in the following cases:\n* If the collection is an `IArray` and the index is not convertible to a number.\n* If the collection is an `IArray` and the index is not within the bounds of the array.\n* If the colleciton is an `IObject` and the key is not present in the object.\n* If the collection is neither an `IArray` or `IObject`."
            },
            "id": {
              "id": "fuse/reactive/lookup",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/lookup",
              "href": "fuse/reactive/lookup"
            },
            "titles": {
              "indexTitle": "LookUp",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LookUp"
            }
          },
          {
            "comment": {
              "brief": "Compares a value with a set of constants, and activates/deactivates visual trees associated with those constants.",
              "full": "Compares a value with a set of constants, and activates/deactivates visual trees associated with those constants.\n\n`Match` (in conjunction with @Case) is useful when you want to display one of a number of different visuals\nbased on a certain value. You can think of it like pattern matching and/or switch/case constructs from your\nfavorite programming language.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            active: \"blue\"\n        };\n    </JavaScript>\n    <Match Value=\"{active}\">\n        <Case String=\"red\">\n            <Rectangle Fill=\"#f00\" Height=\"50\" Width=\"50\" />\n        </Case>\n        <Case String=\"blue\">\n            <Rectangle Fill=\"#00f\" Height=\"50\" Width=\"50\" />\n        </Case>\n    </Match>"
            },
            "id": {
              "id": "fuse/reactive/match",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/match",
              "href": "fuse/reactive/match"
            },
            "titles": {
              "indexTitle": "Match",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Match"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/max",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/max",
              "href": "fuse/reactive/max"
            },
            "titles": {
              "indexTitle": "Max",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Max"
            }
          },
          {
            "comment": {
              "brief": "Represents a reactive object-member look-up operation.",
              "full": "Represents a reactive object-member look-up operation."
            },
            "id": {
              "id": "fuse/reactive/member",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/member",
              "href": "fuse/reactive/member"
            },
            "titles": {
              "indexTitle": "Member",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Member"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/min",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/min",
              "href": "fuse/reactive/min"
            },
            "titles": {
              "indexTitle": "Min",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Min"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/mod",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/mod",
              "href": "fuse/reactive/mod"
            },
            "titles": {
              "indexTitle": "Mod",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Mod"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/multiply",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/multiply",
              "href": "fuse/reactive/multiply"
            },
            "titles": {
              "indexTitle": "Multiply",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Multiply"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/namedfunctioncall",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/namedfunctioncall",
              "href": "fuse/reactive/namedfunctioncall"
            },
            "titles": {
              "indexTitle": "NamedFunctionCall",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.NamedFunctionCall"
            }
          },
          {
            "comment": {
              "brief": "Creates a `Fuse.NameValuePair` from a name and a value.",
              "full": "Creates a `Fuse.NameValuePair` from a name and a value."
            },
            "id": {
              "id": "fuse/reactive/namevaluepair",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/namevaluepair",
              "href": "fuse/reactive/namevaluepair"
            },
            "titles": {
              "indexTitle": "NameValuePair",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.NameValuePair"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/negate",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/negate",
              "href": "fuse/reactive/negate"
            },
            "titles": {
              "indexTitle": "Negate",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Negate"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/notequal",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/notequal",
              "href": "fuse/reactive/notequal"
            },
            "titles": {
              "indexTitle": "NotEqual",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.NotEqual"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/nullcoalesce",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/nullcoalesce",
              "href": "fuse/reactive/nullcoalesce"
            },
            "titles": {
              "indexTitle": "NullCoalesce",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.NullCoalesce"
            }
          },
          {
            "comment": {
              "brief": "Creates an `IObject` from an arbitrary number of NameValuePairs.",
              "full": "Creates an `IObject` from an arbitrary number of NameValuePairs.\n\nThe returned object also implements `IArray` with the original ordering of the NameValuePairs.\n\nIn UX expressions, objects are denoted as lists of NameValuePair: `{name1: value1, name2: value2}`.\n\nA single `NameValuePair` also implements `IObject` (but doesn't need this `Object` operator)."
            },
            "id": {
              "id": "fuse/reactive/object",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/object",
              "href": "fuse/reactive/object"
            },
            "titles": {
              "indexTitle": "Object",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Object"
            }
          },
          {
            "comment": {
              "brief": "True if the rounded value is odd, false otherwise",
              "full": "True if the rounded value is odd, false otherwise"
            },
            "id": {
              "id": "fuse/reactive/odd",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/odd",
              "href": "fuse/reactive/odd"
            },
            "titles": {
              "indexTitle": "Odd",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Odd"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/offsetindexfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/offsetindexfunction",
              "href": "fuse/reactive/offsetindexfunction"
            },
            "titles": {
              "indexTitle": "OffsetIndexFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.OffsetIndexFunction"
            }
          },
          {
            "comment": {
              "brief": "Returns the parameter of the given page (visual), parsed from a JSON string.",
              "full": "Returns the parameter of the given page (visual), parsed from a JSON string.\n\nUsage:\n\n    <Text Value=\"parameter(this).title\" />\n\nThe parameter can be ommited"
            },
            "id": {
              "id": "fuse/reactive/parameter",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/parameter",
              "href": "fuse/reactive/parameter"
            },
            "titles": {
              "indexTitle": "Parameter",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Parameter"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/pow",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/pow",
              "href": "fuse/reactive/pow"
            },
            "titles": {
              "indexTitle": "Pow",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Pow"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/property",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/property",
              "href": "fuse/reactive/property"
            },
            "titles": {
              "indexTitle": "Property",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Property"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/propertybinding",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/propertybinding",
              "href": "fuse/reactive/propertybinding"
            },
            "titles": {
              "indexTitle": "PropertyBinding",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.PropertyBinding"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/radianstodegrees",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/radianstodegrees",
              "href": "fuse/reactive/radianstodegrees"
            },
            "titles": {
              "indexTitle": "RadiansToDegrees",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.RadiansToDegrees"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/resource",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/resource",
              "href": "fuse/reactive/resource"
            },
            "titles": {
              "indexTitle": "Resource",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Resource"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/resourcebinding",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/resourcebinding",
              "href": "fuse/reactive/resourcebinding"
            },
            "titles": {
              "indexTitle": "ResourceBinding",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ResourceBinding"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/round",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/round",
              "href": "fuse/reactive/round"
            },
            "titles": {
              "indexTitle": "Round",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Round"
            }
          },
          {
            "comment": {
              "brief": "Deprecated (< 2017-01-01)",
              "full": "Deprecated (< 2017-01-01)"
            },
            "id": {
              "id": "fuse/reactive/select",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/select",
              "href": "fuse/reactive/select"
            },
            "titles": {
              "indexTitle": "Select",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Select"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/sign",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/sign",
              "href": "fuse/reactive/sign"
            },
            "titles": {
              "indexTitle": "Sign",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Sign"
            }
          },
          {
            "comment": {
              "brief": "The trigonometric sine of the input angle (in radians)",
              "full": "The trigonometric sine of the input angle (in radians)"
            },
            "id": {
              "id": "fuse/reactive/sin",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/sin",
              "href": "fuse/reactive/sin"
            },
            "titles": {
              "indexTitle": "Sin",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Sin"
            }
          },
          {
            "comment": {
              "brief": "Returns the first value to propagate from the source expression, and then stops listening.",
              "full": "Returns the first value to propagate from the source expression, and then stops listening."
            },
            "id": {
              "id": "fuse/reactive/snapshot",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/snapshot",
              "href": "fuse/reactive/snapshot"
            },
            "titles": {
              "indexTitle": "Snapshot",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Snapshot"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/sqrt",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/sqrt",
              "href": "fuse/reactive/sqrt"
            },
            "titles": {
              "indexTitle": "Sqrt",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Sqrt"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/subtract",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/subtract",
              "href": "fuse/reactive/subtract"
            },
            "titles": {
              "indexTitle": "Subtract",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Subtract"
            }
          },
          {
            "comment": {
              "brief": "The trigonometric tangent of the input angle (in radians)",
              "full": "The trigonometric tangent of the input angle (in radians)"
            },
            "id": {
              "id": "fuse/reactive/tan",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/tan",
              "href": "fuse/reactive/tan"
            },
            "titles": {
              "indexTitle": "Tan",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Tan"
            }
          },
          {
            "comment": {
              "brief": "Forces a conversion to floating point. This supports any 1-4 component float vector.",
              "full": "Forces a conversion to floating point. This supports any 1-4 component float vector."
            },
            "id": {
              "id": "fuse/reactive/tofloat",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/tofloat",
              "href": "fuse/reactive/tofloat"
            },
            "titles": {
              "indexTitle": "ToFloat",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ToFloat"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/tolower",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/tolower",
              "href": "fuse/reactive/tolower"
            },
            "titles": {
              "indexTitle": "ToLower",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ToLower"
            }
          },
          {
            "comment": {
              "brief": "Forces conversion to a Size or Size2 depending on input size.",
              "full": "Forces conversion to a Size or Size2 depending on input size.\n\nThis is useful when using operators that may not be able to infer the desired types. For example:\n\n    <JavaScript>\n        exports.jsArray = [0.2, 0.4]\n    </JavaScript>\n    <Panel Offset=\"size({jsArray}) * 100%\"/>\n\nThis function follows the conversion rules as though the operand was being converted directly to a `Size` or `Size2` property type. If the input is a `float2`, array, or already a Size2, then it will be converted to a `Size2`, otherwise a `Size` type."
            },
            "id": {
              "id": "fuse/reactive/tosize",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/tosize",
              "href": "fuse/reactive/tosize"
            },
            "titles": {
              "indexTitle": "ToSize",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ToSize"
            }
          },
          {
            "comment": {
              "brief": "Forces conversion to a string value.",
              "full": "Forces conversion to a string value."
            },
            "id": {
              "id": "fuse/reactive/tostring",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/tostring",
              "href": "fuse/reactive/tostring"
            },
            "titles": {
              "indexTitle": "ToString",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ToString"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/toupper",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/toupper",
              "href": "fuse/reactive/toupper"
            },
            "titles": {
              "indexTitle": "ToUpper",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ToUpper"
            }
          },
          {
            "comment": {
              "brief": "Rounds to the next whole integer closer to zero",
              "full": "Rounds to the next whole integer closer to zero"
            },
            "id": {
              "id": "fuse/reactive/trunc",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/trunc",
              "href": "fuse/reactive/trunc"
            },
            "titles": {
              "indexTitle": "Trunc",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Trunc"
            }
          },
          {
            "comment": {
              "brief": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)",
              "full": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)"
            },
            "id": {
              "id": "fuse/reactive/vector",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/vector",
              "href": "fuse/reactive/vector"
            },
            "titles": {
              "indexTitle": "Vector",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Vector"
            }
          },
          {
            "comment": {
              "brief": "Returns the `W` value of a `float4` value.",
              "full": "Returns the `W` value of a `float4` value."
            },
            "id": {
              "id": "fuse/reactive/vectorw",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/vectorw",
              "href": "fuse/reactive/vectorw"
            },
            "titles": {
              "indexTitle": "VectorW",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorW"
            }
          },
          {
            "comment": {
              "brief": "Returns the `Z` value of a `float3` or `float4` value.",
              "full": "Returns the `Z` value of a `float3` or `float4` value."
            },
            "id": {
              "id": "fuse/reactive/vectorz",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/vectorz",
              "href": "fuse/reactive/vectorz"
            },
            "titles": {
              "indexTitle": "VectorZ",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorZ"
            }
          },
          {
            "comment": {
              "brief": "Active when the number of items in a collection fulfills some criteria.",
              "full": "Active when the number of items in a collection fulfills some criteria.\n\nThe collection is specified with `Items`.\n\n`WhileCount` accepts a combination of properties that form an open or closed range of numbers to test against. The trigger is active while the count of items matches.\n\n- `EqualTo` is used on its own and the item count must match this number.\n- Using just `LessThan` or `LessThanEqual` the count of items must be less than, or less than or equal to, this number.\n- Using juse `GreaterThan` or `GreaterThanEqual` the count of items must be greater than, or greater than or equal to, this number.\n- Using both a `LessThan` or `LessThanEqual` and `GreaterThan` or `GreaterThanEqual` creates a closed range to compare. The number of items must be within this range.\n\nThis example shows how to use @WhileCount and @WhileEmpty with an @Observable:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Alice\", \"Bob\", \"Courtney\")\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>\n    <WhileCount Items=\"{friends}\" EqualTo=\"1\">\n        <Text>Your have 1 friend.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThan=\"3\" >\n        <Text>You have more than 3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"1\" LessThanEqual=\"3\" >\n        <Text>You have 1-3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"2\" LessThanEqual=\"5\" Invert=\"true\">\n        <Text>You do not have 2-5 friends.</Text>\n    </WhileCount>"
            },
            "id": {
              "id": "fuse/reactive/whilecount",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/whilecount",
              "href": "fuse/reactive/whilecount"
            },
            "titles": {
              "indexTitle": "WhileCount",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileCount"
            }
          },
          {
            "comment": {
              "brief": "Active when the number of items in a collection is 0.",
              "full": "Active when the number of items in a collection is 0.\n\nThis is equivalent to using @WhileCount with `EqualTo=\"0\"`.\n\n## Example\n\nThis example displays the text `Your friends list is empty.` using `WhileEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable()\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>"
            },
            "id": {
              "id": "fuse/reactive/whileempty",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/whileempty",
              "href": "fuse/reactive/whileempty"
            },
            "titles": {
              "indexTitle": "WhileEmpty",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileEmpty"
            }
          },
          {
            "comment": {
              "brief": "Active when the number of items in a collection is greater than 0.",
              "full": "Active when the number of items in a collection is greater than 0.\n\nThis is opposite of using @WhileEmpty.\n\n## Example\n\nThis example displays the text `You have at least one friend!` using `WhileNotEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Jake\")\n        }\n    </JavaScript>\n    <WhileNotEmpty Items=\"{friends}\">\n        <Text>You have at least one friend!</Text>\n    </WhileNotEmpty>"
            },
            "id": {
              "id": "fuse/reactive/whilenotempty",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/whilenotempty",
              "href": "fuse/reactive/whilenotempty"
            },
            "titles": {
              "indexTitle": "WhileNotEmpty",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileNotEmpty"
            }
          },
          {
            "comment": {
              "brief": "Provides details about the device and view needed for layout.",
              "full": "Provides details about the device and view needed for layout.\n\nThe `window()` function returns an object with reactive properties. \"Window\" is a common term that refers to the entire area the application is using on the device, which is not always the entire screen.\n    - `width` (float):  the width of the window\n    - `height` (float): the height of the window\n    -  `size` (float2): the combined width and height of the window\n    - `safeMargins` (float4): Margins needed on the content of the window to exclude it from all device UI and reserved areas.\n    - `staticMargins` (float4): Like `safeMargins` but does not adjust for popup controls like the soft keyboard.\n    - `deviceMargins` (float4): (Experimental) The margins the device reports as not being complete safe for drawing as something may obstruct the view (such as the rounded corners of an iPhone X)\n\nDrawing anythng but a background (image or brush fill) in the gradient areas is not recommended as it may be obscured by the system UI or the hardware.\n\nRefer to @SafeEdgePanel and [Safe Layout](articles:layout/safe-layout.md) for more information about safe layouts and device margins."
            },
            "id": {
              "id": "fuse/reactive/windowfunction",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/windowfunction",
              "href": "fuse/reactive/windowfunction"
            },
            "titles": {
              "indexTitle": "WindowFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.WindowFunction"
            }
          },
          {
            "comment": {
              "brief": "Represents a scope in which the current data context is narrowed down.",
              "full": "Represents a scope in which the current data context is narrowed down.\n\n`With` is useful when you have a complex data context and you'd like to simplify data-binding. This is\nparticularly useful for \"viewing\" part of a deeply-nested object graph.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            complex: {\n                item1: {\n                    subitem1: { name: \"Spongebob\", age: 32 }\n                }\n            }\n        };\n    </JavaScript>\n    <With Data=\"{complex.item1.subitem1}\">\n        <Text Value=\"{name}\" />\n        <Text Value=\"{age}\" />\n    </With>"
            },
            "id": {
              "id": "fuse/reactive/with",
              "parentId": "fuse/reactive",
              "type": "UxClass",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/with",
              "href": "fuse/reactive/with"
            },
            "titles": {
              "indexTitle": "With",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.With"
            }
          }
        ]
      }
    ],
    "classes": [
      {
        "items": [
          {
            "comment": {
              "brief": "[subclass Fuse.Reactive.BinaryFloatOperator]",
              "full": "[subclass Fuse.Reactive.BinaryFloatOperator]"
            },
            "id": {
              "id": "fuse/reactive/binaryfloatoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/binaryfloatoperator",
              "href": "fuse/reactive/binaryfloatoperator"
            },
            "titles": {
              "indexTitle": "BinaryFloatOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryFloatOperator"
            }
          },
          {
            "comment": {
              "brief": "Base class for reactive functions/operators that take two arguments/operands.",
              "full": "Base class for reactive functions/operators that take two arguments/operands."
            },
            "id": {
              "id": "fuse/reactive/binaryoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/binaryoperator",
              "href": "fuse/reactive/binaryoperator"
            },
            "titles": {
              "indexTitle": "BinaryOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryOperator"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/capsobject",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/capsobject",
              "href": "fuse/reactive/capsobject"
            },
            "titles": {
              "indexTitle": "CapsObject",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.CapsObject"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/closureargs",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/closureargs",
              "href": "fuse/reactive/closureargs"
            },
            "titles": {
              "indexTitle": "ClosureArgs",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ClosureArgs"
            }
          },
          {
            "comment": {
              "brief": "Base class for UX expression functions that take arguments and compute a value from them.",
              "full": "Base class for UX expression functions that take arguments and compute a value from them.\n\nThis is the preferred base for most functions unless they have special needs to track whether/when arguments are set and/or lost.\n\nOnly a conctructor and the `Compute` method need to be defined."
            },
            "id": {
              "id": "fuse/reactive/computeexpression",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/computeexpression",
              "href": "fuse/reactive/computeexpression"
            },
            "titles": {
              "indexTitle": "ComputeExpression",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ComputeExpression"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/constantexpression",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/constantexpression",
              "href": "fuse/reactive/constantexpression"
            },
            "titles": {
              "indexTitle": "ConstantExpression",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ConstantExpression"
            }
          },
          {
            "comment": {
              "brief": "Provides information about the device.",
              "full": "Provides information about the device.\n\nUse the global `Device` variable to access these reactive variables. For example, to include something only on Android:\n\n    <Instance IsEnabled=\"Device.isAndroid\">\n        <CameraView/>\n    </Instance>\n\nThe properties are:\n    - `isAndroid` (bool): True if running on Android OS, false otherwise\n    - `isIOS` (bool): True if running on iOS OS, false otherwise\n    - `isMac` (bool): True if running on Mac OS, false otherwise\n    - `isWindows` (bool): True if running on Windows OS, false otherwise\n    - `isPreview` (bool): True if running inside Preview\n\nOn iOS and Android the following are also available:\n    - `osVersion` (int3): (major, minor, revision) Version of the operating system. (Android: This is for information, stats, and/or debug purposes only. As it doesn't reliably reflect any system features it should not be used for any conditionals.)\n\nOn Android:\n    - `apiLevel` (int): API Level supported by the device"
            },
            "id": {
              "id": "fuse/reactive/devicecaps",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/devicecaps",
              "href": "fuse/reactive/devicecaps"
            },
            "titles": {
              "indexTitle": "DeviceCaps",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.DeviceCaps"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/expression",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/expression",
              "href": "fuse/reactive/expression"
            },
            "titles": {
              "indexTitle": "Expression",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Expression"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/expressionbinding",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/expressionbinding",
              "href": "fuse/reactive/expressionbinding"
            },
            "titles": {
              "indexTitle": "ExpressionBinding",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionBinding"
            }
          },
          {
            "comment": {
              "brief": "A base class for common expression subscriptions. This handles the basic bookkeeping. Derived classes should implement `OnArguments` (coming from the base class). The members `ClearData` and `SetData` should be called to set the output state.",
              "full": "A base class for common expression subscriptions. This handles the basic bookkeeping. Derived classes should implement `OnArguments` (coming from the base class). The members `ClearData` and `SetData` should be called to set the output state.\n\nUsing this directly is unsual, consider `ComputeExpression` instead.\n\nDerived classes should implement `OnArguments`",
              "attributes": {
                "advanced": true
              }
            },
            "id": {
              "id": "fuse/reactive/expressionlistener",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/expressionlistener",
              "href": "fuse/reactive/expressionlistener"
            },
            "titles": {
              "indexTitle": "ExpressionListener",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionListener"
            }
          },
          {
            "comment": {
              "brief": "Subscribes to many argument expressions used in higher level functions. This collects common\nbehaviour and means to simplify higher-level code.",
              "full": "Subscribes to many argument expressions used in higher level functions. This collects common\nbehaviour and means to simplify higher-level code.\n\nNOTE: The use of InnerListener is questionable but unavoidable at this time.\nhttps://github.com/fusetools/fuselibs-public/issues/785\n\n@hide"
            },
            "id": {
              "id": "fuse/reactive/expressionsubscriber",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/expressionsubscriber",
              "href": "fuse/reactive/expressionsubscriber"
            },
            "titles": {
              "indexTitle": "ExpressionSubscriber",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionSubscriber"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/infixoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/infixoperator",
              "href": "fuse/reactive/infixoperator"
            },
            "titles": {
              "indexTitle": "InfixOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InfixOperator"
            }
          },
          {
            "comment": {
              "brief": "Using this class directly is unusual. `ComputeExpression` is the preferred option for functions, and `ExpressionListener` for when that doesn't apply.",
              "full": "Using this class directly is unusual. `ComputeExpression` is the preferred option for functions, and `ExpressionListener` for when that doesn't apply.\n\nRelying on this behaviour is bad. The Observable support was only intended for bindings. All other\nvalues should use IExpression's facilities. The unintended support may be removed in the future.\n\nImplements `IListener`, and forward incoming values to the protected `OnNewData` method.\nIf the incoming value is an observable, a subscription is created and the value of that observable\nis forwarded to the `OnNewData` method instead.\n\nExtenders should override `OnNewData()`, `OnLostData` and `Dispose()`.\n\n@hide"
            },
            "id": {
              "id": "fuse/reactive/innerlistener",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/innerlistener",
              "href": "fuse/reactive/innerlistener"
            },
            "titles": {
              "indexTitle": "InnerListener",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InnerListener"
            }
          },
          {
            "comment": {
              "brief": "Base class for behaviors that can instantiate templates from a source.",
              "full": "Base class for behaviors that can instantiate templates from a source.\n\nThis class can not be directly instantiated or inherited because its constructors are internal. Use one of the\nprovided derived classes instead: @Each or @Instance."
            },
            "id": {
              "id": "fuse/reactive/instantiator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "partial"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiator",
              "href": "fuse/reactive/instantiator"
            },
            "titles": {
              "indexTitle": "Instantiator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
            }
          },
          {
            "comment": {
              "brief": "Common base for functions that work with an item in an instantiator",
              "full": "Common base for functions that work with an item in an instantiator"
            },
            "id": {
              "id": "fuse/reactive/instantiatorfunction",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instantiatorfunction",
              "href": "fuse/reactive/instantiatorfunction"
            },
            "titles": {
              "indexTitle": "InstantiatorFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InstantiatorFunction"
            }
          },
          {
            "comment": {
              "brief": "Provides an implementation for `Let` and the various `LetType` forms.\n@hide",
              "full": "Provides an implementation for `Let` and the various `LetType` forms.\n@hide"
            },
            "id": {
              "id": "fuse/reactive/letbase",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/letbase",
              "href": "fuse/reactive/letbase"
            },
            "titles": {
              "indexTitle": "LetBase",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetBase"
            }
          },
          {
            "comment": {
              "brief": "Provides a bindable value for use in UX. This assists in combining animations and transitions in the UX without needing to use JavaScript intermediates. It is not meant to store application state, being intended only for UI level changes and effects.",
              "full": "Provides a bindable value for use in UX. This assists in combining animations and transitions in the UX without needing to use JavaScript intermediates. It is not meant to store application state, being intended only for UI level changes and effects.\n\nUnlike @Let this enforces a specific value type and is suitable for use with `Change`, `Set`, and other property bindings.\n\nThese values are two-way bindable (like Observables), for example:\n\n    <LetString Value=\"hello\" ux:Name=\"a\"/>\n    <TextInput Value=\"{a}\"/>\n    <Text Value=\"{a}\"/>\n\nTyping in the `TextInput` will modify the value of `a` and update the `Text` value.\n\n## Available types\n\n[subclass Fuse.Reactive.LetType]",
              "attributes": {
                "experimental": true
              }
            },
            "id": {
              "id": "fuse/reactive/lettype_1",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/lettype_1",
              "href": "fuse/reactive/lettype_1"
            },
            "titles": {
              "indexTitle": "LetType<T>",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.LetType<T>"
            }
          },
          {
            "comment": {
              "brief": "A series of functions to check the device platform.",
              "full": "A series of functions to check the device platform.\n\n[subclass Fuse.Reactive.PlatformFunction]"
            },
            "id": {
              "id": "fuse/reactive/platformfunction",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/platformfunction",
              "href": "fuse/reactive/platformfunction"
            },
            "titles": {
              "indexTitle": "PlatformFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.PlatformFunction"
            }
          },
          {
            "comment": {
              "brief": "Base class for reactive functions/operators that take four arguments/operands.",
              "full": "Base class for reactive functions/operators that take four arguments/operands."
            },
            "id": {
              "id": "fuse/reactive/quaternaryoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/quaternaryoperator",
              "href": "fuse/reactive/quaternaryoperator"
            },
            "titles": {
              "indexTitle": "QuaternaryOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.QuaternaryOperator"
            }
          },
          {
            "comment": {
              "brief": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments.",
              "full": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments."
            },
            "id": {
              "id": "fuse/reactive/simplevarargfunction",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/simplevarargfunction",
              "href": "fuse/reactive/simplevarargfunction"
            },
            "titles": {
              "indexTitle": "SimpleVarArgFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.SimpleVarArgFunction"
            }
          },
          {
            "comment": {
              "brief": "Base class for reactive functions/operators that take three arguments/operands.",
              "full": "Base class for reactive functions/operators that take three arguments/operands."
            },
            "id": {
              "id": "fuse/reactive/ternaryoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ternaryoperator",
              "href": "fuse/reactive/ternaryoperator"
            },
            "titles": {
              "indexTitle": "TernaryOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.TernaryOperator"
            }
          },
          {
            "comment": {
              "brief": "Common base for floating point operations",
              "full": "Common base for floating point operations\n\nAll the derived expressions support 1-4 component input values and will return a value of the same size.\n\n[subclass Fuse.Reactive.UnaryFloatOperator]"
            },
            "id": {
              "id": "fuse/reactive/unaryfloatoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/unaryfloatoperator",
              "href": "fuse/reactive/unaryfloatoperator"
            },
            "titles": {
              "indexTitle": "UnaryFloatOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryFloatOperator"
            }
          },
          {
            "comment": {
              "brief": "Optimized base class for reactive functions/operators that take a single argument/operand.",
              "full": "Optimized base class for reactive functions/operators that take a single argument/operand."
            },
            "id": {
              "id": "fuse/reactive/unaryoperator",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/unaryoperator",
              "href": "fuse/reactive/unaryoperator"
            },
            "titles": {
              "indexTitle": "UnaryOperator",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryOperator"
            }
          },
          {
            "comment": {
              "brief": "Base class for UX functions that accept a variable number of arguments.",
              "full": "Base class for UX functions that accept a variable number of arguments.\n\nDerived classes must override exaclty one of either `OnNewPartialArguments` or `OnNewArguments`."
            },
            "id": {
              "id": "fuse/reactive/varargfunction",
              "parentId": "fuse/reactive",
              "type": "Class",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/varargfunction",
              "href": "fuse/reactive/varargfunction"
            },
            "titles": {
              "indexTitle": "VarArgFunction",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.VarArgFunction"
            }
          }
        ]
      }
    ],
    "delegates": [
      {
        "items": [
          {
            "parameters": [
              {
                "name": "sender",
                "href": "uno/object",
                "title": "object",
                "fullyQualifiedTitle": "object"
              },
              {
                "name": "args",
                "href": "fuse/reactive/closureargs",
                "title": "ClosureArgs",
                "fullyQualifiedTitle": "Fuse.Reactive.ClosureArgs"
              }
            ],
            "id": {
              "id": "fuse/reactive/closurehandler",
              "parentId": "fuse/reactive",
              "type": "Delegate",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/closurehandler",
              "href": "fuse/reactive/closurehandler"
            },
            "titles": {
              "indexTitle": "ClosureHandler (object, ClosureArgs)",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.ClosureHandler (object, Fuse.Reactive.ClosureArgs)"
            }
          }
        ]
      }
    ],
    "enums": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/reactive/bindingmode",
              "parentId": "fuse/reactive",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/bindingmode",
              "href": "fuse/reactive/bindingmode"
            },
            "titles": {
              "indexTitle": "BindingMode",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.BindingMode"
            }
          },
          {
            "comment": {
              "brief": "Which templates are instantiating when no specific match is found.",
              "full": "Which templates are instantiating when no specific match is found."
            },
            "id": {
              "id": "fuse/reactive/instancedefaults",
              "parentId": "fuse/reactive",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instancedefaults",
              "href": "fuse/reactive/instancedefaults"
            },
            "titles": {
              "indexTitle": "InstanceDefaults",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InstanceDefaults"
            }
          },
          {
            "comment": {
              "brief": "Allows for the deferred creation of items to avoid processing bottlenecks.",
              "full": "Allows for the deferred creation of items to avoid processing bottlenecks."
            },
            "id": {
              "id": "fuse/reactive/instancedefer",
              "parentId": "fuse/reactive",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instancedefer",
              "href": "fuse/reactive/instancedefer"
            },
            "titles": {
              "indexTitle": "InstanceDefer",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InstanceDefer"
            }
          },
          {
            "comment": {
              "brief": "How @Instance and @Each recognize an object is the same.",
              "full": "How @Instance and @Each recognize an object is the same."
            },
            "id": {
              "id": "fuse/reactive/instanceidentity",
              "parentId": "fuse/reactive",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instanceidentity",
              "href": "fuse/reactive/instanceidentity"
            },
            "titles": {
              "indexTitle": "InstanceIdentity",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InstanceIdentity"
            }
          },
          {
            "comment": {
              "brief": "Which nodes can be reused as the items list changes.",
              "full": "Which nodes can be reused as the items list changes."
            },
            "id": {
              "id": "fuse/reactive/instancereuse",
              "parentId": "fuse/reactive",
              "type": "Enum",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/instancereuse",
              "href": "fuse/reactive/instancereuse"
            },
            "titles": {
              "indexTitle": "InstanceReuse",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.InstanceReuse"
            }
          }
        ]
      }
    ],
    "interfaces": [
      {
        "items": [
          {
            "id": {
              "id": "fuse/reactive/icontext",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/icontext",
              "href": "fuse/reactive/icontext"
            },
            "titles": {
              "indexTitle": "IContext",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IContext"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/ieventhandler",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ieventhandler",
              "href": "fuse/reactive/ieventhandler"
            },
            "titles": {
              "indexTitle": "IEventHandler",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IEventHandler"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/ieventrecord",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ieventrecord",
              "href": "fuse/reactive/ieventrecord"
            },
            "titles": {
              "indexTitle": "IEventRecord",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IEventRecord"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/iexpression",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/iexpression",
              "href": "fuse/reactive/iexpression"
            },
            "titles": {
              "indexTitle": "IExpression",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IExpression"
            }
          },
          {
            "id": {
              "id": "fuse/reactive/ilistener",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/ilistener",
              "href": "fuse/reactive/ilistener"
            },
            "titles": {
              "indexTitle": "IListener",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IListener"
            }
          },
          {
            "comment": {
              "brief": "Represents a subscription that might support write-back.",
              "full": "Represents a subscription that might support write-back."
            },
            "id": {
              "id": "fuse/reactive/iwriteable",
              "parentId": "fuse/reactive",
              "type": "Interface",
              "modifiers": [
                "public",
                "abstract"
              ]
            },
            "uri": {
              "idUri": "fuse/reactive/iwriteable",
              "href": "fuse/reactive/iwriteable"
            },
            "titles": {
              "indexTitle": "IWriteable",
              "fullyQualifiedIndexTitle": "Fuse.Reactive.IWriteable"
            }
          }
        ]
      }
    ]
  }
}