{
  "entity": {
    "id": {
      "id": "fusejs",
      "type": "Namespace",
      "modifiers": []
    },
    "uri": {
      "idUri": "fusejs",
      "href": "fusejs"
    },
    "titles": {
      "pageTitle": "FuseJS Namespace",
      "navigationTitle": "FuseJS Namespace",
      "fullTitle": "FuseJS",
      "indexTitle": "FuseJS",
      "fullyQualifiedIndexTitle": "FuseJS"
    },
    "syntax": {
      "uno": "namespace FuseJS {}"
    }
  },
  "tableOfContents": {
    "jsModules": [
      {
        "items": [
          {
            "comment": {
              "brief": "Allows you to encode and decode strings from Base64.",
              "full": "Allows you to encode and decode strings from Base64.\n\nThis is useful when passing string to places where some characters are not allowed.\n\nThis example demonstrates simple use of the `Base64` module. The code prints the input string, and the computed Base64 string.\n\n    var Base64 = require(\"FuseJS/Base64\");\n    var string = \"Hello, world!\";\n    console.log(string); //LOG: Hello, world!\n    console.log(Base64.encodeAscii(string)); //LOG: SGVsbG8sIHdvcmxkIQ==",
              "attributes": {
                "scriptModule": "FuseJS/Base64"
              }
            },
            "id": {
              "id": "fusejs/base64",
              "parentId": "fusejs",
              "type": "JsModule",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/base64",
              "href": "fusejs/base64"
            },
            "titles": {
              "indexTitle": "Base64",
              "fullyQualifiedIndexTitle": "FuseJS.Base64"
            }
          },
          {
            "comment": {
              "brief": "The bundle API allows you to read files that is bundled with the application, defined in the project file (using `<filename>:Bundle`).",
              "full": "The bundle API allows you to read files that is bundled with the application, defined in the project file (using `<filename>:Bundle`).\n\n```\nvar Bundle = require(\"FuseJS/Bundle\");\n```\n\nYou can read up on bundling files [here](/docs/assets/bundle)",
              "attributes": {
                "scriptModule": "FuseJS/Bundle"
              }
            },
            "id": {
              "id": "fusejs/bundle",
              "parentId": "fusejs",
              "type": "JsModule",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/bundle",
              "href": "fusejs/bundle"
            },
            "titles": {
              "indexTitle": "Bundle",
              "fullyQualifiedIndexTitle": "FuseJS.Bundle"
            }
          },
          {
            "comment": {
              "brief": "The Environment API allows you to check which platform your app is currently running on.",
              "full": "The Environment API allows you to check which platform your app is currently running on.\n\nYou need to add a reference to `\"FuseJS\"` in your project file to use this feature.\n\n## Examples\n\nYou can check which platform your app is running on using the following boolean properties:\n\n    var Environment = require('FuseJS/Environment');\n\n    if(Environment.ios)        console.log(\"Running on iOS\");\n    if(Environment.android)    console.log(\"Running on Android\");\n    if(Environment.preview)    console.log(\"Running in preview mode\");\n    if(Environment.mobile)     console.log(\"Running on iOS or Android\");\n    if(Environment.desktop)    console.log(\"Running on desktop\");\n\nYou can also get the version of the current *mobile* OS as a\nhuman-readable string using the `mobileOSVersion` property.\n\n    console.log(Environment.mobileOSVersion);\n\n> *Note*\n>\n> On Android, `mobileOSVersion` returns [Build.VERSION.RELEASE](https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE)\n> (e.g. `1.0` or `3.4b5`).\n> On iOS, it returns a string in the format of `<major>.<minor>.<patch>`\n> (e.g. `9.2.1`).\n> Returns an empty string on all other platforms.",
              "attributes": {
                "scriptModule": "FuseJS/Environment",
                "scriptProperty": "(string) mobileOSVersion A user-readable OS version number.On Android, it returns [Build.VERSION.RELEASE](https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE)\r\n(e.g. `1.0` or `3.4b5`).\r\nOn iOS, it returns a string in the format of `<major>.<minor>.<patch>` (e.g. `9.2.1`).\r\nReturns an empty string on all other platforms.\r\n"
              }
            },
            "id": {
              "id": "fusejs/environment",
              "parentId": "fusejs",
              "type": "JsModule",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/environment",
              "href": "fusejs/environment"
            },
            "titles": {
              "indexTitle": "Environment",
              "fullyQualifiedIndexTitle": "FuseJS.Environment"
            }
          },
          {
            "comment": {
              "brief": "Monitor the application lifecycle from JS",
              "full": "Monitor the application lifecycle from JS\n\nThe lifecycle of an app is the time from when your app starts to the time it terminates.\nDuring this time the app will go through a number of states.\n\nThe Lifecycle module allows you query the current state and also be alerted when the\napp changes state.\n\n## The States\n\n- Starting\n- Background\n- Foreground\n- Interactive\n\n### Starting\nYour app start event is implicit, as this is when your JavaScript is first evaluated.\n\n### Background\nYour app is not the app the user is interactive with right now and so the operating system\nhas put it into a 'sleep' state.\n\nWhilst your app is in this state is is not allowed to run code, but you don't have to worry\nabout this as Fuse will ensure your JS/UX is not doing something when it shouldn't.\n\n### Foreground\nYour app is front and center on the user's device but they cannot yet interact with it. The\nmain reason to be in this state is that the user has opened the notification bar on iOS or\nAndroid.\n\n### Interactive\nYour app is now in the foreground and is accepting input from the user.\n\n## Changing States\nIt would be hard to work with app lifecycle if your app could just jump around the states\nrandomly. Instead we guarentee the following flow through the states:\n\nStarting\n   ↓\nBackground ⟷ Foreground ⟷ Interactive\n   ↓\nTerminating\n\n## No `terminating` event\nYou may be wondering why there is no `terminating` event. The reason is that on mobile\nplatforms the OS doesn't promise to call you when terminating your app. It may, but in\ncertain circumstances (low memory, emergency phone call, etc) it won't.\n\nBecause of this the guides for mobile platforms strongly advise against using the `terminating`\nevent as a cue that the app is shutting down, instead you should be regularly 'checkpointing'\nyour app so you can recover from any kind of shutdown.\n\nGiven that we are not meant to use it, we have opted not to expose the event.\n\nThis module is an @EventEmitter, so the methods from @EventEmitter can be used to listen to events.\n\n## Example\n\n    <JavaScript>\n        var Lifecycle = require('FuseJS/Lifecycle');\n\n        Lifecycle.on(\"enteringForeground\", function() {\n            console.log(\"on enteringForeground\");\n        });\n        Lifecycle.on(\"enteringInteractive\", function() {\n            console.log(\"on enteringInteractive\");\n        });\n        Lifecycle.on(\"exitedInteractive\", function() {\n            console.log(\"on exitedInteractive\");\n        });\n        Lifecycle.on(\"enteringBackground\", function() {\n            console.log(\"on enteringBackground\");\n        });\n        Lifecycle.on(\"stateChanged\", function(newState) {\n            console.log(\"on stateChanged \" + newState);\n        });\n        module.exports = { lifecycleState: Lifecycle.observe(\"stateChanged\") }\n    </JavaScript>\n    <StackPanel>\n        <Text TextWrapping=\"Wrap\">Open the Fuse Monitor to see the logs</Text>\n        <Text>Current lifecycle state:</Text>\n        <Text Value=\"{lifecycleState}\" />\n    </StackPanel>\n\nIn the above example we're using the @EventEmitter `on` method to listen to the different events.\nWe're also using the @EventEmitter `observe` method on the `\"stateChanged\"` event to get an @Observable containing the current state.",
              "attributes": {
                "scriptModule": "Lifecycle"
              }
            },
            "id": {
              "id": "fusejs/lifecycle",
              "parentId": "fusejs",
              "type": "JsModule",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/lifecycle",
              "href": "fusejs/lifecycle"
            },
            "titles": {
              "indexTitle": "Lifecycle",
              "fullyQualifiedIndexTitle": "FuseJS.Lifecycle"
            }
          }
        ]
      }
    ],
    "classes": [
      {
        "items": [
          {
            "comment": {
              "brief": "@hide",
              "full": "@hide"
            },
            "id": {
              "id": "fusejs/filereaderimpl",
              "parentId": "fusejs",
              "type": "Class",
              "modifiers": [
                "public"
              ]
            },
            "uri": {
              "idUri": "fusejs/filereaderimpl",
              "href": "fusejs/filereaderimpl"
            },
            "titles": {
              "indexTitle": "FileReaderImpl",
              "fullyQualifiedIndexTitle": "FuseJS.FileReaderImpl"
            }
          },
          {
            "id": {
              "id": "fusejs/globals",
              "parentId": "fusejs",
              "type": "Class",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/globals",
              "href": "fusejs/globals"
            },
            "titles": {
              "indexTitle": "Globals",
              "fullyQualifiedIndexTitle": "FuseJS.Globals"
            }
          },
          {
            "id": {
              "id": "fusejs/userevents",
              "parentId": "fusejs",
              "type": "Class",
              "modifiers": [
                "public",
                "sealed"
              ]
            },
            "uri": {
              "idUri": "fusejs/userevents",
              "href": "fusejs/userevents"
            },
            "titles": {
              "indexTitle": "UserEvents",
              "fullyQualifiedIndexTitle": "FuseJS.UserEvents"
            }
          }
        ]
      }
    ]
  }
}